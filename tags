!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOUNDARY_DIR	boundary/makefile	/^BOUNDARY_DIR=$(MAIN_DIR)\/boundary\/$/;"	m
BOUNDARY_DIR	geometry/makefile	/^BOUNDARY_DIR=$(MAIN_DIR)\/boundary\/$/;"	m
BOUNDARY_DIR	makefile	/^BOUNDARY_DIR=$(MAIN_DIR)\/boundary\/$/;"	m
BOUNDARY_DIR	state/makefile	/^BOUNDARY_DIR=$(MAIN_DIR)\/boundary\/$/;"	m
BOUNDARY_OBJS	makefile	/^BOUNDARY_OBJS   = boundary.o boundary_solid_shocktube.o boundary_solid_shocktube3d.o boundary_solid_tpshocktube.o boundary_solid_gresho.o \\$/;"	m
B_OBJS	makefile	/^B_OBJS := $(foreach OBJ,$(BOUNDARY_OBJS),$(addprefix $(BOUNDARY_DIR),$(OBJ)))$/;"	m
Ball	geometry/geometry.cpp	/^Ball::Ball():radius(10.0), xCen(0), yCen(0), zCen(0) {}$/;"	f	class:Ball
Ball	geometry/geometry.h	/^class Ball: public Geometry {$/;"	c
Ballexp3D	geometry/geometry_ballexp.cpp	/^Ballexp3D::Ballexp3D():radius(0.2), xCen(0), yCen(0), zCen(0) {}$/;"	f	class:Ballexp3D
Ballexp3D	geometry/geometry_ballexp.h	/^class Ballexp3D: public Geometry {$/;"	c
Ballexp3DState	state/state_ballexp.cpp	/^Ballexp3DState::Ballexp3DState(): $/;"	f	class:Ballexp3DState
Ballexp3DState	state/state_ballexp.h	/^class Ballexp3DState: public State {$/;"	c
Ballpressurewave3DState	state/state_ballexp.cpp	/^Ballpressurewave3DState::Ballpressurewave3DState():$/;"	f	class:Ballpressurewave3DState
Ballpressurewave3DState	state/state_ballexp.h	/^class Ballpressurewave3DState: public State {$/;"	c
Ballrotate3DState	state/state_ballexp.cpp	/^Ballrotate3DState::Ballrotate3DState():$/;"	f	class:Ballrotate3DState
Ballrotate3DState	state/state_ballexp.h	/^class Ballrotate3DState: public State {$/;"	c
Bessel_I0	lp_solver.cpp	/^float           Bessel_I0($/;"	f
Bessel_I1	lp_solver.cpp	/^float           Bessel_I1($/;"	f
Bessel_K0	lp_solver.cpp	/^float           Bessel_K0($/;"	f
Bessel_K1	lp_solver.cpp	/^float           Bessel_K1($/;"	f
Bessel_Kn	lp_solver.cpp	/^float           Bessel_Kn($/;"	f
BigShocktube2D	geometry/geometry_shocktube.cpp	/^BigShocktube2D::BigShocktube2D():lengthX(10), lengthY(5) {}$/;"	f	class:BigShocktube2D
BigShocktube2D	geometry/geometry_shocktube.h	/^class BigShocktube2D: public Geometry {$/;"	c
Boundary	boundary/boundary.h	/^class Boundary {$/;"	c
BoundaryFactory	boundary/boundary.h	/^	BoundaryFactory() {} \/\/\/< for singleton design pattern$/;"	f	class:BoundaryFactory
BoundaryFactory	boundary/boundary.h	/^class BoundaryFactory {$/;"	c
BoundaryRegistrar	registrar.h	/^BoundaryRegistrar<Derived>::BoundaryRegistrar(std::string name) {$/;"	f	class:BoundaryRegistrar
BoundaryRegistrar	registrar.h	/^class BoundaryRegistrar {$/;"	c
BoundaryTest2D	geometry/geometry_shocktube.cpp	/^BoundaryTest2D::BoundaryTest2D():lengthX(1), lengthY(1) {}$/;"	f	class:BoundaryTest2D
BoundaryTest2D	geometry/geometry_shocktube.h	/^class BoundaryTest2D: public Geometry {$/;"	c
BoundaryTest2DState	state/state_shocktube.cpp	/^BoundaryTest2DState::BoundaryTest2DState():$/;"	f	class:BoundaryTest2DState
BoundaryTest2DState	state/state_shocktube.h	/^class BoundaryTest2DState: public State {$/;"	c
BoundingBox	initializer.h	/^	BoundingBox(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax): $/;"	f	class:BoundingBox
BoundingBox	initializer.h	/^class BoundingBox {$/;"	c
CC	boundary/makefile	/^CC     = g++$/;"	m
CC	geometry/makefile	/^CC     = g++$/;"	m
CC	makefile	/^CC     = g++$/;"	m
CC	state/makefile	/^CC     = g++$/;"	m
CFLAGS	boundary/makefile	/^CFLAGS = -Wall -std=c++11 $(DEBUG) $(OMP) $(INCS) -c$/;"	m
CFLAGS	geometry/makefile	/^CFLAGS = -Wall -c -std=c++11 $(DEBUG) $(OMP) $(INCS)$/;"	m
CFLAGS	makefile	/^CFLAGS = -Wall -c -std=c++11 $(DEBUG) $(OMP) $(INCS)$/;"	m
CFLAGS	state/makefile	/^CFLAGS = -Wall -c -std=c++11 $(DEBUG) $(OMP)$/;"	m
ComputeVoronoiArea	voronoi_area_estimator.cpp	/^int VoronoiAreaEstimator::ComputeVoronoiArea() {$/;"	f	class:VoronoiAreaEstimator
ConvergentShock2DState	state/state_gresho.cpp	/^ConvergentShock2DState::ConvergentShock2DState():$/;"	f	class:ConvergentShock2DState
ConvergentShock2DState	state/state_gresho.h	/^class ConvergentShock2DState: public State {$/;"	c
DEBUG	boundary/makefile	/^DEBUG  = -g$/;"	m
DEBUG	geometry/makefile	/^DEBUG  = -g$/;"	m
DEBUG	makefile	/^DEBUG  = -g$/;"	m
DEBUG	state/makefile	/^DEBUG  = -g$/;"	m
DamBreak2D	geometry/geometry_shocktube.cpp	/^DamBreak2D::DamBreak2D():lengthX(0.5), lengthY(0.5) {}$/;"	f	class:DamBreak2D
DamBreak2D	geometry/geometry_shocktube.h	/^class DamBreak2D: public Geometry {$/;"	c
DamBreak2DBoundary	boundary/boundary_dambreak.cpp	/^DamBreak2DBoundary::DamBreak2DBoundary():lengthX(1), lengthY(100), thickness(0.2) {$/;"	f	class:DamBreak2DBoundary
DamBreak2DBoundary	boundary/boundary_dambreak.h	/^class DamBreak2DBoundary: public Boundary {$/;"	c
DamBreak2DState	state/state_shocktube.cpp	/^DamBreak2DState::DamBreak2DState():$/;"	f	class:DamBreak2DState
DamBreak2DState	state/state_shocktube.h	/^class DamBreak2DState: public State {$/;"	c
DefaultTimeController	time_controller.cpp	/^DefaultTimeController::DefaultTimeController(const Initializer& init, LPSolver* solver, const vector<ParticleViewer*>& viewers) {$/;"	f	class:DefaultTimeController
DefaultTimeController	time_controller.h	/^class DefaultTimeController : public TimeController {$/;"	c
Disk	geometry/geometry.cpp	/^Disk::Disk():radius(1), xCen(0), yCen(0) {}$/;"	f	class:Disk
Disk	geometry/geometry.h	/^class Disk: public Geometry {$/;"	c
DiskLeft	geometry/geometry_collision.cpp	/^DiskLeft::DiskLeft():radius(5), xCen(-5.3354), yCen(0) {}$/;"	f	class:DiskLeft
DiskLeft	geometry/geometry_collision.h	/^class DiskLeft: public Geometry {$/;"	c
DiskRight	geometry/geometry_collision.cpp	/^DiskRight::DiskRight():radius(5), xCen(5.2911), yCen(3) {}$/;"	f	class:DiskRight
DiskRight	geometry/geometry_collision.h	/^class DiskRight: public Geometry {$/;"	c
EOS	eos.h	/^class EOS {$/;"	c
FORTRAN_NAME	ls_solver.cpp	9;"	d	file:
GEOMETRY_DIR	boundary/makefile	/^GEOMETRY_DIR=$(MAIN_DIR)\/geometry\/$/;"	m
GEOMETRY_DIR	geometry/makefile	/^GEOMETRY_DIR=$(MAIN_DIR)\/geometry\/$/;"	m
GEOMETRY_DIR	makefile	/^GEOMETRY_DIR=$(MAIN_DIR)\/geometry\/$/;"	m
GEOMETRY_DIR	state/makefile	/^GEOMETRY_DIR=$(MAIN_DIR)\/geometry\/$/;"	m
GEOMETRY_OBJS	makefile	/^GEOMETRY_OBJS = geometry.o geometry_1d.o geometry_nozzle.o geometry_random.o\\$/;"	m
GSL_DIR	makefile	/^GSL_DIR=\/home\/syuan\/local\/gsl2.5\/include\/$/;"	m
G_OBJS	makefile	/^G_OBJS := $(foreach OBJ,$(GEOMETRY_OBJS),$(addprefix $(GEOMETRY_DIR),$(OBJ)))$/;"	m
Gaussian3D	geometry/geometry_random.cpp	/^Gaussian3D::Gaussian3D():sigma(1),radius(3),xCen(0),yCen(0),zCen(0){}$/;"	f	class:Gaussian3D
Gaussian3D	geometry/geometry_random.h	/^class Gaussian3D: public Geometry {$/;"	c
GaussianPressure1DState	state/state_1d.cpp	/^GaussianPressure1DState::GaussianPressure1DState(): m_fDen(0.01), m_fVelX(0), m_fPCenX(0), m_fPPeak(2.), m_fPCoeff(-100.) {} $/;"	f	class:GaussianPressure1DState
GaussianPressure1DState	state/state_1d.h	/^class GaussianPressure1DState: public State {$/;"	c
GaussianPressureState	state/state.cpp	/^GaussianPressureState::GaussianPressureState(): m_fDen(1.), m_fVelX(0), m_fVelY(0), m_fVelZ(0), m_fPCenX(0), m_fPCenY(0), m_fPCenZ(0), m_fPPeak(7.), m_fPCoeff(-100.) {} $/;"	f	class:GaussianPressureState
GaussianPressureState	state/state.h	/^class GaussianPressureState: public State {$/;"	c
GeoCreateFunc	boundary/boundary.h	/^	typedef Boundary* (*GeoCreateFunc)();$/;"	t	class:BoundaryFactory
GeoCreateFunc	geometry/geometry.h	/^	typedef Geometry* (*GeoCreateFunc)();$/;"	t	class:GeometryFactory
Geometry	geometry/geometry.h	/^class Geometry {$/;"	c
GeometryFactory	geometry/geometry.h	/^	GeometryFactory() {} \/\/\/< for singleton design pattern$/;"	f	class:GeometryFactory
GeometryFactory	geometry/geometry.h	/^class GeometryFactory {$/;"	c
GeometryRegistrar	registrar.h	/^    GeometryRegistrar<Derived>::GeometryRegistrar(std::string name) {$/;"	f	class:GeometryRegistrar
GeometryRegistrar	registrar.h	/^class GeometryRegistrar {$/;"	c
Gresho2D	geometry/geometry_gresho.cpp	/^Gresho2D::Gresho2D():radius(1.), xCen(0), yCen(0) {}$/;"	f	class:Gresho2D
Gresho2D	geometry/geometry_gresho.h	/^class Gresho2D: public Geometry {$/;"	c
Gresho2DSolidBoundary	boundary/boundary_solid_gresho.cpp	/^Gresho2DSolidBoundary::Gresho2DSolidBoundary():radius(1.), thickness(0.3) {$/;"	f	class:Gresho2DSolidBoundary
Gresho2DSolidBoundary	boundary/boundary_solid_gresho.h	/^class Gresho2DSolidBoundary: public Boundary {$/;"	c
Gresho2DState	state/state_gresho.cpp	/^Gresho2DState::Gresho2DState(): $/;"	f	class:Gresho2DState
Gresho2DState	state/state_gresho.h	/^class Gresho2DState: public State {$/;"	c
H	boundary/boundary_powder_target.h	/^	double H; \/\/ container height$/;"	m	class:PowderTarget2DSolidBoundary
H	boundary/boundary_powder_target_3d.h	/^	double H; \/\/ container height$/;"	m	class:PowderTarget3DSolidBoundary
HexagonalPacking2D	hexagonal_packing.cpp	/^HexagonalPacking2D::HexagonalPacking2D(double xmin_, double xmax_, double ymin_, double ymax_, double h_r_) $/;"	f	class:HexagonalPacking2D
HexagonalPacking2D	hexagonal_packing.h	/^class HexagonalPacking2D {$/;"	c
HexagonalPacking3D	hexagonal_packing.cpp	/^HexagonalPacking3D::HexagonalPacking3D(double xmin_, double xmax_, double ymin_, double ymax_, $/;"	f	class:HexagonalPacking3D
HexagonalPacking3D	hexagonal_packing.h	/^class HexagonalPacking3D {$/;"	c
HyperbolicLPSolver	lp_solver.cpp	/^HyperbolicLPSolver::HyperbolicLPSolver(const Initializer& init, ParticleData* pData, NeighbourSearcher* ns) {$/;"	f	class:HyperbolicLPSolver
HyperbolicLPSolver	lp_solver.h	/^class HyperbolicLPSolver : public LPSolver {$/;"	c
INCS	boundary/makefile	/^INCS   = -I $(BOUNDARY_DIR) -I $(STATE_DIR) -I $(GEOMETRY_DIR) -I $(MAIN_DIR)$/;"	m
INCS	geometry/makefile	/^INCS   = -I $(BOUNDARY_DIR) -I $(STATE_DIR) -I $(GEOMETRY_DIR) -I $(MAIN_DIR)$/;"	m
INCS	makefile	/^INCS   = -I $(BOUNDARY_DIR) -I $(STATE_DIR) -I $(GEOMETRY_DIR) -I $(MAIN_DIR) -I $(GSL_DIR)$/;"	m
INCS	state/makefile	/^INCS   = -I $(BOUNDARY_DIR) -I $(STATE_DIR) -I $(GEOMETRY_DIR) -I $(MAIN_DIR)$/;"	m
INTERP_TYPE	eos.cpp	13;"	d	file:
INe	initializer.h	/^        double INe;$/;"	m	class:Initializer
INe	particle_data.h	/^	double INe;$/;"	m	class:ParticleData
Initializer	initializer.cpp	/^Initializer::Initializer(const string& inputfileName, bool ifDebug, const string& debugfileName)$/;"	f	class:Initializer
Initializer	initializer.cpp	/^Initializer::Initializer(const string& inputfileName, const string& datafileName, $/;"	f	class:Initializer
Initializer	initializer.h	/^class Initializer {$/;"	c
Jet1D	geometry/geometry_jet.cpp	/^Jet1D::Jet1D():length(16), xCen(0) {}$/;"	f	class:Jet1D
Jet1D	geometry/geometry_jet.h	/^class Jet1D: public Geometry {$/;"	c
Jet1DCenter	geometry/geometry_jet.cpp	/^Jet1DCenter::Jet1DCenter():length(0.16), xCen(0.0) {}$/;"	f	class:Jet1DCenter
Jet1DCenter	geometry/geometry_jet.h	/^class Jet1DCenter: public Geometry {$/;"	c
Jet1DCenterState	state/state_jet.cpp	/^Jet1DCenterState::Jet1DCenterState():$/;"	f	class:Jet1DCenterState
Jet1DCenterState	state/state_jet.h	/^class Jet1DCenterState: public State {$/;"	c
Jet1DLaterState	state/state_jet.cpp	/^Jet1DLaterState::Jet1DLaterState():$/;"	f	class:Jet1DLaterState
Jet1DLaterState	state/state_jet.h	/^class Jet1DLaterState: public State {$/;"	c
Jet1DLeft	geometry/geometry_jet.cpp	/^Jet1DLeft::Jet1DLeft():length(0.08), xCen(-0.25) {}$/;"	f	class:Jet1DLeft
Jet1DLeft	geometry/geometry_jet.h	/^class Jet1DLeft: public Geometry {$/;"	c
Jet1DLeftState	state/state_jet.cpp	/^Jet1DLeftState::Jet1DLeftState():$/;"	f	class:Jet1DLeftState
Jet1DLeftState	state/state_jet.h	/^class Jet1DLeftState: public State {$/;"	c
Jet1DRight	geometry/geometry_jet.cpp	/^Jet1DRight::Jet1DRight():length(0.08), xCen(0.25) {}$/;"	f	class:Jet1DRight
Jet1DRight	geometry/geometry_jet.h	/^class Jet1DRight: public Geometry {$/;"	c
Jet1DRightState	state/state_jet.cpp	/^Jet1DRightState::Jet1DRightState():$/;"	f	class:Jet1DRightState
Jet1DRightState	state/state_jet.h	/^class Jet1DRightState: public State {$/;"	c
Jet1DState	state/state_jet.cpp	/^Jet1DState::Jet1DState(): $/;"	f	class:Jet1DState
Jet1DState	state/state_jet.h	/^class Jet1DState: public State {$/;"	c
Jet2D	geometry/geometry_jet.cpp	/^Jet2D::Jet2D():radius(0.5), length(16), xCen(0), yCen(0), magnitude(0.3) {}$/;"	f	class:Jet2D
Jet2D	geometry/geometry_jet.h	/^class Jet2D: public Geometry {$/;"	c
Jet2DCollision	geometry/geometry_jet.cpp	/^Jet2DCollision::Jet2DCollision():xLength(5), yLength(20), xLeftCen(-5), xRightCen(5), yCen(0) {}$/;"	f	class:Jet2DCollision
Jet2DCollision	geometry/geometry_jet.h	/^class Jet2DCollision: public Geometry {$/;"	c
Jet2DCollisionState	state/state_jet.cpp	/^Jet2DCollisionState::Jet2DCollisionState(): $/;"	f	class:Jet2DCollisionState
Jet2DCollisionState	state/state_jet.h	/^class Jet2DCollisionState: public State {$/;"	c
Jet2DExpansion	geometry/geometry_jet.cpp	/^Jet2DExpansion::Jet2DExpansion():radius(2.5), length(20), xCen(0), yCen(0) {}$/;"	f	class:Jet2DExpansion
Jet2DExpansion	geometry/geometry_jet.h	/^class Jet2DExpansion: public Geometry {$/;"	c
Jet2DExpansionState	state/state_jet.cpp	/^Jet2DExpansionState::Jet2DExpansionState(): $/;"	f	class:Jet2DExpansionState
Jet2DExpansionState	state/state_jet.h	/^class Jet2DExpansionState: public State {$/;"	c
Jet2DMerge	geometry/geometry_jet.cpp	/^Jet2DMerge::Jet2DMerge():radius(2.5), length(20), xCen(0), yCen(23), alpha(-12.0\/180.0*M_PI) {}$/;"	f	class:Jet2DMerge
Jet2DMerge	geometry/geometry_jet.h	/^class Jet2DMerge: public Geometry {$/;"	c
Jet2DMergeLower	geometry/geometry_jet.cpp	/^Jet2DMergeLower::Jet2DMergeLower():radius(2.5), length(20), xCen(0), yCen(-23), alpha(12.0\/180.0*M_PI) {}$/;"	f	class:Jet2DMergeLower
Jet2DMergeLower	geometry/geometry_jet.h	/^class Jet2DMergeLower: public Geometry {$/;"	c
Jet2DMergeLowerState	state/state_jet.cpp	/^Jet2DMergeLowerState::Jet2DMergeLowerState(): $/;"	f	class:Jet2DMergeLowerState
Jet2DMergeLowerState	state/state_jet.h	/^class Jet2DMergeLowerState: public State {$/;"	c
Jet2DMergeState	state/state_jet.cpp	/^Jet2DMergeState::Jet2DMergeState(): $/;"	f	class:Jet2DMergeState
Jet2DMergeState	state/state_jet.h	/^class Jet2DMergeState: public State {$/;"	c
Jet2DMergeUpper	geometry/geometry_jet.cpp	/^Jet2DMergeUpper::Jet2DMergeUpper():radius(2.5), length(20), xCen(0), yCen(23), alpha(-12.0\/180.0*M_PI) {}$/;"	f	class:Jet2DMergeUpper
Jet2DMergeUpper	geometry/geometry_jet.h	/^class Jet2DMergeUpper: public Geometry {$/;"	c
Jet2DMergeUpperState	state/state_jet.cpp	/^Jet2DMergeUpperState::Jet2DMergeUpperState(): $/;"	f	class:Jet2DMergeUpperState
Jet2DMergeUpperState	state/state_jet.h	/^class Jet2DMergeUpperState: public State {$/;"	c
Jet3D	geometry/geometry_jet.cpp	/^Jet3D::Jet3D():radius(0.5), length(16), xCen(0), yCen(0), zCen(0), magnitude(0.3) {}$/;"	f	class:Jet3D
Jet3D	geometry/geometry_jet.h	/^class Jet3D: public Geometry {$/;"	c
Jet3DExpansion	geometry/geometry_jet.cpp	/^Jet3DExpansion::Jet3DExpansion():radius(2.5), length(10), xCen(0), yCen(0), zCen(0) {}$/;"	f	class:Jet3DExpansion
Jet3DExpansion	geometry/geometry_jet.h	/^class Jet3DExpansion: public Geometry {$/;"	c
Jet3DExpansionState	state/state_jet.cpp	/^Jet3DExpansionState::Jet3DExpansionState(): $/;"	f	class:Jet3DExpansionState
Jet3DExpansionState	state/state_jet.h	/^class Jet3DExpansionState: public State {$/;"	c
Jet3DState	state/state_jet.cpp	/^Jet3DState::Jet3DState(): $/;"	f	class:Jet3DState
Jet3DState	state/state_jet.h	/^class Jet3DState: public State {$/;"	c
KelvinHelmholtz2D	geometry/geometry_shocktube.cpp	/^KelvinHelmholtz2D::KelvinHelmholtz2D():lengthX(1), lengthY(1) {}$/;"	f	class:KelvinHelmholtz2D
KelvinHelmholtz2D	geometry/geometry_shocktube.h	/^class KelvinHelmholtz2D: public Geometry {$/;"	c
KelvinHelmholtz2DBoundary	boundary/boundary_kelvinhelmholtz.cpp	/^KelvinHelmholtz2DBoundary::KelvinHelmholtz2DBoundary():lengthX(1), lengthY(1), thickness(0.2) {$/;"	f	class:KelvinHelmholtz2DBoundary
KelvinHelmholtz2DBoundary	boundary/boundary_kelvinhelmholtz.h	/^class KelvinHelmholtz2DBoundary: public Boundary {$/;"	c
KelvinHelmholtz2DState	state/state_shocktube.cpp	/^KelvinHelmholtz2DState::KelvinHelmholtz2DState():$/;"	f	class:KelvinHelmholtz2DState
KelvinHelmholtz2DState	state/state_shocktube.h	/^class KelvinHelmholtz2DState: public State {$/;"	c
KeyIndex	octree.h	/^struct KeyIndex$/;"	s
KeyIndex_integral	octree.h	/^struct KeyIndex_integral$/;"	s
L	boundary/boundary_powder_target.h	/^	double L; \/\/ container thickness$/;"	m	class:PowderTarget2DSolidBoundary
L	boundary/boundary_powder_target_3d.h	/^	double L; \/\/ container thickness $/;"	m	class:PowderTarget3DSolidBoundary
LAPACK_DIR	boundary/makefile	/^LAPACK_DIR=\/gpfs\/home\/shyyuan\/local\/lapack-3.8.0$/;"	m
LAPACK_DIR	geometry/makefile	/^LAPACK_DIR=\/gpfs\/home\/shyyuan\/local\/lapack-3.8.0$/;"	m
LAPACK_DIR	makefile	/^LAPACK_DIR=\/gpfs\/home\/shyyuan\/local\/lapack-3.8.0$/;"	m
LAPACK_DIR	state/makefile	/^LAPACK_DIR=\/gpfs\/home\/shyyuan\/local\/lapack-3.8.0$/;"	m
LFLAGS	boundary/makefile	/^LFLAGS = -Wall  $(DEBUG) $(INCS) $(LIBS) $(OMP)$/;"	m
LFLAGS	geometry/makefile	/^LFLAGS = -Wall  $(DEBUG) $(INCS) $(LIBS) $(OMP)$/;"	m
LFLAGS	makefile	/^LFLAGS = -Wall  $(DEBUG) $(INCS) $(LIBS) $(OMP)$/;"	m
LFLAGS	state/makefile	/^LFLAGS = -Wall  $(DEBUG) $(INCS) $(LIBS) $(OMP)$/;"	m
LIBS	boundary/makefile	/^LIBS   = -L $(LAPACK_DIR) $/;"	m
LIBS	geometry/makefile	/^LIBS   = -L $(LAPACK_DIR) $/;"	m
LIBS	makefile	/^LIBS   = -L $(LAPACK_DIR) $/;"	m
LIBS	state/makefile	/^LIBS   = -L $(LAPACK_DIR) $/;"	m
LPSolver	lp_solver.h	/^class LPSolver {$/;"	c
LSSolver	ls_solver.h	/^class LSSolver {$/;"	c
LeftUniformVelocityState	state/state_collision.cpp	/^LeftUniformVelocityState::LeftUniformVelocityState(): $/;"	f	class:LeftUniformVelocityState
LeftUniformVelocityState	state/state_collision.h	/^class LeftUniformVelocityState: public State {$/;"	c
Line	geometry/geometry_1d.cpp	/^Line::Line():leftLen(-1.5), rightLen(1.5) {}$/;"	f	class:Line
Line	geometry/geometry_1d.h	/^class Line: public Geometry {$/;"	c
MAIN_DIR	boundary/makefile	/^MAIN_DIR:=${CURDIR}\/..\/$/;"	m
MAIN_DIR	geometry/makefile	/^MAIN_DIR:=${CURDIR}\/..\/$/;"	m
MAIN_DIR	makefile	/^MAIN_DIR:=${CURDIR}$/;"	m
MAIN_DIR	state/makefile	/^MAIN_DIR:=${CURDIR}\/..\/$/;"	m
MAIN_OBJS	makefile	/^MAIN_OBJS   = eos.o hexagonal_packing.o initializer.o lp_main.o lp_solver.o ls_solver.o\\$/;"	m
Magx	initializer.h	/^        double Magx;$/;"	m	class:Initializer
Magx	particle_data.h	/^	double Magx;$/;"	m	class:ParticleData
Magy	initializer.h	/^        double Magy;$/;"	m	class:Initializer
Magy	particle_data.h	/^	double Magy;$/;"	m	class:ParticleData
Magz	initializer.h	/^        double Magz;$/;"	m	class:Initializer
Magz	particle_data.h	/^	double Magz;$/;"	m	class:ParticleData
MultiGaussian3D	geometry/geometry_random.cpp	/^MultiGaussian3D::MultiGaussian3D():sigma(0.1),radius(4){xCen={0.,0.,2.,2.,1.},yCen={0.,2.,0.,2.,1.},zCen={0.,0.,0.,0.,0};}$/;"	f	class:MultiGaussian3D
MultiGaussian3D	geometry/geometry_random.h	/^class MultiGaussian3D: public Geometry {$/;"	c
MultiPelletLayer	geometry/geometry_pellet.h	/^        MultiPelletLayer(){} $/;"	f	class:MultiPelletLayer
MultiPelletLayer	geometry/geometry_pellet.h	/^class MultiPelletLayer: public Geometry {$/;"	c
NeighbourSearcher	neighbour_searcher.h	/^class NeighbourSearcher {$/;"	c
Noh2DState	state/state_gresho.cpp	/^Noh2DState::Noh2DState(){}$/;"	f	class:Noh2DState
Noh2DState	state/state_gresho.h	/^class Noh2DState: public State {$/;"	c
NormalShock2DState	state/state_shocktube.cpp	/^NormalShock2DState::NormalShock2DState(): $/;"	f	class:NormalShock2DState
NormalShock2DState	state/state_shocktube.h	/^class NormalShock2DState: public State {$/;"	c
Nozzle2D	geometry/geometry_nozzle.cpp	/^Nozzle2D::Nozzle2D():left(0), radius(0.75e-3), length(0.2e-3), k(0.125){}$/;"	f	class:Nozzle2D
Nozzle2D	geometry/geometry_nozzle.h	/^class Nozzle2D: public Geometry {$/;"	c
Nozzle2DBNLSolidBoundary	boundary/boundary_nozzle.cpp	/^Nozzle2DBNLSolidBoundary::Nozzle2DBNLSolidBoundary():x1(0e-3),r1(0.75e-3),x2(4e-3),r2(0.25e-3),x3(7e-3),r3(0.5e-3),x4(8e-3),r4(1.65e-3), thickness(0.2e-3){}$/;"	f	class:Nozzle2DBNLSolidBoundary
Nozzle2DBNLSolidBoundary	boundary/boundary_nozzle.h	/^class Nozzle2DBNLSolidBoundary: public Boundary {$/;"	c
Nozzle2DComplete	geometry/geometry_nozzle.cpp	/^Nozzle2DComplete::Nozzle2DComplete():x0(0),r0(0.75e-3),x1(4e-3),r1(0.25e-3),x2(7e-3),r2(0.5e-3),x3(8e-3),r3(1.65e-3){}$/;"	f	class:Nozzle2DComplete
Nozzle2DComplete	geometry/geometry_nozzle.h	/^class Nozzle2DComplete: public Geometry {$/;"	c
Nozzle2DRothe	geometry/geometry_nozzle.cpp	/^Nozzle2DRothe::Nozzle2DRothe():left(0), radius(8.3e-3), length(5e-3), k(0.125){}$/;"	f	class:Nozzle2DRothe
Nozzle2DRothe	geometry/geometry_nozzle.h	/^class Nozzle2DRothe: public Geometry {$/;"	c
Nozzle2DSimple	geometry/geometry_nozzle.cpp	/^Nozzle2DSimple::Nozzle2DSimple():left(0), radius(0.75e-3), length(0.2e-3){}$/;"	f	class:Nozzle2DSimple
Nozzle2DSimple	geometry/geometry_nozzle.h	/^class Nozzle2DSimple: public Geometry {$/;"	c
Nozzle2DSimpleSolidBoundary	boundary/boundary_nozzle.cpp	/^Nozzle2DSimpleSolidBoundary::Nozzle2DSimpleSolidBoundary():radius(8.3e-3), thickness(2e-3) {$/;"	f	class:Nozzle2DSimpleSolidBoundary
Nozzle2DSimpleSolidBoundary	boundary/boundary_nozzle.h	/^class Nozzle2DSimpleSolidBoundary: public Boundary {$/;"	c
Nozzle2DSolidBoundary	boundary/boundary_nozzle.cpp	/^Nozzle2DSolidBoundary::Nozzle2DSolidBoundary():x0(-2e-3), r0(0.751e-3), x1(0+0e-3),r1(0.75e-3),x2(4e-3+0e-3),r2(0.25e-3),x3(7e-3+0e-3),r3(0.5e-3),x4(8e-3+0e-3),r4(1.65e-3), thickness(0.1e-3){}$/;"	f	class:Nozzle2DSolidBoundary
Nozzle2DSolidBoundary	boundary/boundary_nozzle.h	/^class Nozzle2DSolidBoundary: public Boundary {$/;"	c
Nozzle3D	geometry/geometry_nozzle.cpp	/^Nozzle3D::Nozzle3D():left(0), radius(0.75e-3), length(0.4e-3), k(0.125){}$/;"	f	class:Nozzle3D
Nozzle3D	geometry/geometry_nozzle.h	/^class Nozzle3D: public Geometry {$/;"	c
Nozzle3DBNLSolidBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DBNLSolidBoundary::Nozzle3DBNLSolidBoundary():x1(0e-3),r1(0.75e-3),x2(4e-3),r2(0.25e-3),x3(7e-3),r3(0.5e-3),x4(8e-3),r4(1.65e-3), thickness(0.3e-3){}$/;"	f	class:Nozzle3DBNLSolidBoundary
Nozzle3DBNLSolidBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DBNLSolidBoundary: public Boundary {$/;"	c
Nozzle3DInflowBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DInflowBoundary::Nozzle3DInflowBoundary():left(-1e-3), right(0), radius(0.75e-3), Uinflow(1768), Pinflow(5.369e+4), Vinflow(12.5) {$/;"	f	class:Nozzle3DInflowBoundary
Nozzle3DInflowBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DInflowBoundary: public Boundary {$/;"	c
Nozzle3DInflowFixPressureBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DInflowFixPressureBoundary::Nozzle3DInflowFixPressureBoundary():left(-0.5e-3), right(0), average_rightlimit(0.2e-3),radius(0.75e-3), Uinflow(0), OldUinflow(0), Pinflow(1e+5), Vinflow(0), Pinitial(1e+5), Vinitial(12.5) {$/;"	f	class:Nozzle3DInflowFixPressureBoundary
Nozzle3DInflowFixPressureBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DInflowFixPressureBoundary: public Boundary {$/;"	c
Nozzle3DOutflowBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DOutflowBoundary::Nozzle3DOutflowBoundary():xmin(-0.01),xmax(0.020),rmax(0.010) {$/;"	f	class:Nozzle3DOutflowBoundary
Nozzle3DOutflowBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DOutflowBoundary: public Boundary {$/;"	c
Nozzle3DRothe	geometry/geometry_nozzle.cpp	/^Nozzle3DRothe::Nozzle3DRothe():left(0), radius(8.3e-3), length(5e-3), k(0.125){}$/;"	f	class:Nozzle3DRothe
Nozzle3DRothe	geometry/geometry_nozzle.h	/^class Nozzle3DRothe: public Geometry {$/;"	c
Nozzle3DSimpleSolidBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DSimpleSolidBoundary::Nozzle3DSimpleSolidBoundary():radius(8.3e-3), thickness(2e-3) {$/;"	f	class:Nozzle3DSimpleSolidBoundary
Nozzle3DSimpleSolidBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DSimpleSolidBoundary: public Boundary {$/;"	c
Nozzle3DSolidBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DSolidBoundary::Nozzle3DSolidBoundary():x0(-2e-3), r0(0.751e-3), x1(0+0e-3),r1(0.75e-3),x2(4e-3+0e-3),r2(0.25e-3),x3(7e-3+0e-3),r3(0.5e-3),x4(8e-3+0e-3),r4(1.65e-3), thickness(2*0.3e-3){}$/;"	f	class:Nozzle3DSolidBoundary
Nozzle3DSolidBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DSolidBoundary: public Boundary {$/;"	c
Nozzle3DSolidRightBoundary	boundary/boundary_nozzle.cpp	/^Nozzle3DSolidRightBoundary::Nozzle3DSolidRightBoundary():x0(20e-3),r0(0.501e-3),thickness(0.3e-3){}$/;"	f	class:Nozzle3DSolidRightBoundary
Nozzle3DSolidRightBoundary	boundary/boundary_nozzle.h	/^class Nozzle3DSolidRightBoundary: public Boundary {$/;"	c
NozzleInflowBoundary	boundary/boundary_nozzle.cpp	/^NozzleInflowBoundary::NozzleInflowBoundary():left(-1e-3), right(0), radius(0.75e-3), Uinflow(500), Pinflow(1e+5), Vinflow(12.5) {$/;"	f	class:NozzleInflowBoundary
NozzleInflowBoundary	boundary/boundary_nozzle.h	/^class NozzleInflowBoundary: public Boundary {$/;"	c
NozzleInflowFixPressureBoundary	boundary/boundary_nozzle.cpp	/^NozzleInflowFixPressureBoundary::NozzleInflowFixPressureBoundary():left(-1e-3), right(0), average_rightlimit(0.1e-3),radius(0.75e-3), Uinflow(0), OldUinflow(0), Pinflow(1e+5), Vinflow(0), Pinitial(1e+5), Vinitial(12.5) {$/;"	f	class:NozzleInflowFixPressureBoundary
NozzleInflowFixPressureBoundary	boundary/boundary_nozzle.h	/^class NozzleInflowFixPressureBoundary: public Boundary {$/;"	c
NozzleOutflowBoundary	boundary/boundary_nozzle.cpp	/^NozzleOutflowBoundary::NozzleOutflowBoundary():xmin(-0.01),xmax(0.020),ymin(-0.010),ymax(0.010) {$/;"	f	class:NozzleOutflowBoundary
NozzleOutflowBoundary	boundary/boundary_nozzle.h	/^class NozzleOutflowBoundary: public Boundary {$/;"	c
NozzleRotheState	state/state_nozzle.cpp	/^NozzleRotheState::NozzleRotheState():$/;"	f	class:NozzleRotheState
NozzleRotheState	state/state_nozzle.h	/^class NozzleRotheState: public State {$/;"	c
NozzleState	state/state_nozzle.cpp	/^NozzleState::NozzleState():$/;"	f	class:NozzleState
NozzleState	state/state_nozzle.h	/^class NozzleState: public State {$/;"	c
NumberofPellet	geometry/geometry_pellet.h	/^	    int NumberofPellet;$/;"	m	class:MultiPelletLayer
OBJS	boundary/makefile	/^OBJS := $(SRC_FILES:.cpp=.o)$/;"	m
OBJS	geometry/makefile	/^OBJS := $(SRC_FILES:.cpp=.o)$/;"	m
OBJS	makefile	/^OBJS = $(B_OBJS) $(S_OBJS) $(G_OBJS) $(MAIN_OBJS)$/;"	m
OBJS	state/makefile	/^OBJS := $(SRC_FILES:.cpp=.o)$/;"	m
OMP	boundary/makefile	/^OMP    = -fopenmp$/;"	m
OMP	geometry/makefile	/^OMP    = -fopenmp$/;"	m
OMP	makefile	/^OMP    = -fopenmp$/;"	m
OMP	state/makefile	/^OMP    = -fopenmp$/;"	m
Octree	octree.cpp	/^Octree::Octree(int treedepth, size_t maxParticleNum)$/;"	f	class:Octree
Octree	octree.h	/^class Octree {$/;"	c
OctreeSearcher	neighbour_searcher.cpp	/^OctreeSearcher::OctreeSearcher(const Initializer& init) {$/;"	f	class:OctreeSearcher
OctreeSearcher	neighbour_searcher.cpp	/^OctreeSearcher::OctreeSearcher(size_t maxParticleNum, size_t maxNeighbourNum, int treedepth)$/;"	f	class:OctreeSearcher
OctreeSearcher	neighbour_searcher.h	/^class OctreeSearcher : public NeighbourSearcher {$/;"	c
OldUinflow	boundary/boundary_nozzle.h	/^	double OldUinflow;$/;"	m	class:NozzleInflowFixPressureBoundary
OldUinflow	boundary/boundary_nozzle.h	/^        double OldUinflow;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
PI	state/state_jet.cpp	/^static const double PI =  atan(1.0)*4.0;$/;"	v	file:
ParticleData	particle_data.cpp	/^ParticleData::ParticleData(Initializer& init) {$/;"	f	class:ParticleData
ParticleData	particle_data.h	/^class ParticleData {$/;"	c
ParticleViewer	particle_viewer.h	/^class ParticleViewer {$/;"	c
PelletInflowBoundary	boundary/boundary_pellet.cpp	/^PelletInflowBoundary::PelletInflowBoundary():Pinflow(30), Uinflow(0), Vinflow(100){}$/;"	f	class:PelletInflowBoundary
PelletInflowBoundary	boundary/boundary_pellet.h	/^class PelletInflowBoundary: public Boundary {$/;"	c
PelletLayer	geometry/geometry_pellet.cpp	/^PelletLayer::PelletLayer(): xcen(0),ycen(0),zcen(0),innerradius(0.2), outerradius(0.24){}$/;"	f	class:PelletLayer
PelletLayer	geometry/geometry_pellet.h	/^class PelletLayer: public Geometry {$/;"	c
PelletOutflowBoundary	boundary/boundary_pellet.cpp	/^PelletOutflowBoundary::PelletOutflowBoundary():xmin(-20),xmax(20),ymin(-20),ymax(20),zmin(-20),zmax(20) {$/;"	f	class:PelletOutflowBoundary
PelletOutflowBoundary	boundary/boundary_pellet.h	/^class PelletOutflowBoundary: public Boundary {$/;"	c
PelletSolver	pellet_solver.cpp	/^PelletSolver::PelletSolver(const Initializer& init,ParticleData* pdata){$/;"	f	class:PelletSolver
PelletSolver	pellet_solver.h	/^class PelletSolver {$/;"	c
PelletState	state/state_pellet.cpp	/^PelletState::PelletState():$/;"	f	class:PelletState
PelletState	state/state_pellet.h	/^class PelletState: public State{$/;"	c
Pinflow	boundary/boundary_nozzle.h	/^	double Pinflow;$/;"	m	class:NozzleInflowBoundary
Pinflow	boundary/boundary_nozzle.h	/^        double Pinflow;$/;"	m	class:Nozzle3DInflowBoundary
Pinflow	boundary/boundary_nozzle.h	/^        double Pinflow;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
Pinflow	boundary/boundary_nozzle.h	/^        double Pinflow;$/;"	m	class:NozzleInflowFixPressureBoundary
Pinflow	boundary/boundary_pellet.h	/^	double Pinflow;\/\/inflow pressure, constant$/;"	m	class:PelletInflowBoundary
Pinitial	boundary/boundary_nozzle.h	/^	double Pinitial;$/;"	m	class:NozzleInflowFixPressureBoundary
Pinitial	boundary/boundary_nozzle.h	/^        double Pinitial;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
PolytropicGasEOS	eos.h	/^	PolytropicGasEOS(double gamma) : m_fGamma(gamma) {m_iEOSChoice=1;}$/;"	f	class:PolytropicGasEOS
PolytropicGasEOS	eos.h	/^class PolytropicGasEOS : public EOS {$/;"	c
PowderTarget2D	geometry/geometry_powder_target.cpp	/^PowderTarget2D::PowderTarget2D():radius(0.6), height(0.6) {}$/;"	f	class:PowderTarget2D
PowderTarget2D	geometry/geometry_powder_target.h	/^class PowderTarget2D: public Geometry {$/;"	c
PowderTarget2DSolidBoundary	boundary/boundary_powder_target.cpp	/^PowderTarget2DSolidBoundary::PowderTarget2DSolidBoundary():R(0.6), L(0.2), H(0.6) {}$/;"	f	class:PowderTarget2DSolidBoundary
PowderTarget2DSolidBoundary	boundary/boundary_powder_target.h	/^class PowderTarget2DSolidBoundary: public Boundary {$/;"	c
PowderTarget2DState	state/state_powder_target.cpp	/^PowderTarget2DState::PowderTarget2DState(): $/;"	f	class:PowderTarget2DState
PowderTarget2DState	state/state_powder_target.h	/^class PowderTarget2DState: public State {$/;"	c
PowderTarget3D	geometry/geometry_powder_target_3d.cpp	/^PowderTarget3D::PowderTarget3D():radius(0.75), height(0.75), length(4.0) {}$/;"	f	class:PowderTarget3D
PowderTarget3D	geometry/geometry_powder_target_3d.h	/^class PowderTarget3D: public Geometry {$/;"	c
PowderTarget3DSolidBoundary	boundary/boundary_powder_target_3d.cpp	/^PowderTarget3DSolidBoundary::PowderTarget3DSolidBoundary():R(0.75), L(0.2), H(0.75),length(4.0) {} \/\/ L is thickness$/;"	f	class:PowderTarget3DSolidBoundary
PowderTarget3DSolidBoundary	boundary/boundary_powder_target_3d.h	/^class PowderTarget3DSolidBoundary: public Boundary {$/;"	c
PowderTarget3DState	state/state_powder_target_3d.cpp	/^PowderTarget3DState::PowderTarget3DState(): $/;"	f	class:PowderTarget3DState
PowderTarget3DState	state/state_powder_target_3d.h	/^class PowderTarget3DState: public State {$/;"	c
QRSolver	ls_solver.h	/^	QRSolver(std::size_t numRow, std::size_t numCol, double *A, double limitR=1e-3) {$/;"	f	class:QRSolver
QRSolver	ls_solver.h	/^class QRSolver : public LSSolver {$/;"	c
R	boundary/boundary_powder_target.h	/^	double R; \/\/ container radius	$/;"	m	class:PowderTarget2DSolidBoundary
R	boundary/boundary_powder_target_3d.h	/^	double R; \/\/ container radius	$/;"	m	class:PowderTarget3DSolidBoundary
RayleighTaylor2D	geometry/geometry_shocktube.cpp	/^RayleighTaylor2D::RayleighTaylor2D():lengthX(1), lengthY(1) {}$/;"	f	class:RayleighTaylor2D
RayleighTaylor2D	geometry/geometry_shocktube.h	/^class RayleighTaylor2D: public Geometry {$/;"	c
RayleighTaylor2DBoundary	boundary/boundary_rayleightaylor.cpp	/^RayleighTaylor2DBoundary::RayleighTaylor2DBoundary():lengthX(1), lengthY(1), thickness(0.2) {$/;"	f	class:RayleighTaylor2DBoundary
RayleighTaylor2DBoundary	boundary/boundary_rayleightaylor.h	/^class RayleighTaylor2DBoundary: public Boundary {$/;"	c
RayleighTaylor2DState	state/state_shocktube.cpp	/^RayleighTaylor2DState::RayleighTaylor2DState():$/;"	f	class:RayleighTaylor2DState
RayleighTaylor2DState	state/state_shocktube.h	/^class RayleighTaylor2DState: public State {$/;"	c
RayleighTaylor3D	geometry/geometry_shocktube3d.cpp	/^RayleighTaylor3D::RayleighTaylor3D():lengthX(1), lengthY(1), lengthZ(1) {}$/;"	f	class:RayleighTaylor3D
RayleighTaylor3D	geometry/geometry_shocktube3d.h	/^class RayleighTaylor3D: public Geometry {$/;"	c
RayleighTaylor3DBoundary	boundary/boundary_rayleightaylor3d.cpp	/^RayleighTaylor3DBoundary::RayleighTaylor3DBoundary():lengthX(1), lengthY(1), lengthZ(1), thickness(0.1) {$/;"	f	class:RayleighTaylor3DBoundary
RayleighTaylor3DBoundary	boundary/boundary_rayleightaylor3d.h	/^class RayleighTaylor3DBoundary: public Boundary {$/;"	c
RayleighTaylor3DState	state/state_shocktube.cpp	/^RayleighTaylor3DState::RayleighTaylor3DState():$/;"	f	class:RayleighTaylor3DState
RayleighTaylor3DState	state/state_shocktube.h	/^class RayleighTaylor3DState: public State {$/;"	c
RayleighTaylorPeriodic2DBoundary	boundary/boundary_rayleightaylor_periodic.cpp	/^RayleighTaylorPeriodic2DBoundary::RayleighTaylorPeriodic2DBoundary():lengthX(1), lengthY(1), thickness(0.2) {$/;"	f	class:RayleighTaylorPeriodic2DBoundary
RayleighTaylorPeriodic2DBoundary	boundary/boundary_rayleightaylor_periodic.h	/^class RayleighTaylorPeriodic2DBoundary: public Boundary {$/;"	c
RightUniformVelocityState	state/state_collision.cpp	/^RightUniformVelocityState::RightUniformVelocityState(): $/;"	f	class:RightUniformVelocityState
RightUniformVelocityState	state/state_collision.h	/^class RightUniformVelocityState: public State {$/;"	c
SPHDensityEstimatorForFluidParticle	lp_solver.cpp	/^void HyperbolicLPSolver::SPHDensityEstimatorForFluidParticle(int choice) {$/;"	f	class:HyperbolicLPSolver
SRC_FILES	boundary/makefile	/^SRC_FILES := $(wildcard *.cpp) $/;"	m
SRC_FILES	geometry/makefile	/^SRC_FILES := $(wildcard *.cpp) $/;"	m
SRC_FILES	state/makefile	/^SRC_FILES := $(wildcard *.cpp) $/;"	m
STATE_DIR	boundary/makefile	/^STATE_DIR=$(MAIN_DIR)\/state\/$/;"	m
STATE_DIR	geometry/makefile	/^STATE_DIR=$(MAIN_DIR)\/state\/$/;"	m
STATE_DIR	makefile	/^STATE_DIR=$(MAIN_DIR)\/state\/$/;"	m
STATE_DIR	state/makefile	/^STATE_DIR=$(MAIN_DIR)\/state\/$/;"	m
STATE_OBJS	makefile	/^STATE_OBJS =  state.o state_1d.o state_ballexp.o state_collision.o state_gresho.o state_powder_target.o state_powder_target_3d.o state_nozzle.o\\$/;"	m
S_OBJS	makefile	/^S_OBJS := $(foreach OBJ,$(STATE_OBJS),$(addprefix $(STATE_DIR),$(OBJ)))$/;"	m
SahaEOS	eos.h	/^	SahaEOS(double gamma) : m_fGamma(gamma) {m_iEOSChoice=3;}$/;"	f	class:SahaEOS
SahaEOS	eos.h	/^class SahaEOS : public EOS {$/;"	c
SearchResult	octree.h	/^struct SearchResult {$/;"	s
Sedov2D	geometry/geometry_gresho.cpp	/^Sedov2D::Sedov2D():radius(1.), xCen(0), yCen(0) {}$/;"	f	class:Sedov2D
Sedov2D	geometry/geometry_gresho.h	/^class Sedov2D: public Geometry {$/;"	c
Sedov2DSolidBoundary	boundary/boundary_solid_gresho.cpp	/^Sedov2DSolidBoundary::Sedov2DSolidBoundary():radius(1.), thickness(0.3) {$/;"	f	class:Sedov2DSolidBoundary
Sedov2DSolidBoundary	boundary/boundary_solid_gresho.h	/^class Sedov2DSolidBoundary: public Boundary {$/;"	c
Sedov2DState	state/state_gresho.cpp	/^Sedov2DState::Sedov2DState(){}$/;"	f	class:Sedov2DState
Sedov2DState	state/state_gresho.h	/^class Sedov2DState: public State {$/;"	c
Shocktube2D	geometry/geometry_shocktube.cpp	/^Shocktube2D::Shocktube2D():lengthX(5), lengthY(2) {}$/;"	f	class:Shocktube2D
Shocktube2D	geometry/geometry_shocktube.h	/^class Shocktube2D: public Geometry {$/;"	c
Shocktube2DLeft	geometry/geometry_shocktube.cpp	/^Shocktube2DLeft::Shocktube2DLeft():lengthX(5), lengthY(2) {}$/;"	f	class:Shocktube2DLeft
Shocktube2DLeft	geometry/geometry_shocktube.h	/^class Shocktube2DLeft: public Geometry {$/;"	c
Shocktube2DRight	geometry/geometry_shocktube.cpp	/^Shocktube2DRight::Shocktube2DRight():lengthX(5), lengthY(2) {}$/;"	f	class:Shocktube2DRight
Shocktube2DRight	geometry/geometry_shocktube.h	/^class Shocktube2DRight: public Geometry {$/;"	c
Shocktube2DSolidBoundary	boundary/boundary_solid_shocktube.cpp	/^Shocktube2DSolidBoundary::Shocktube2DSolidBoundary():lengthX(5), lengthY(2), thickness(0.8) {$/;"	f	class:Shocktube2DSolidBoundary
Shocktube2DSolidBoundary	boundary/boundary_solid_shocktube.h	/^class Shocktube2DSolidBoundary: public Boundary {$/;"	c
Shocktube2DState	state/state_shocktube.cpp	/^Shocktube2DState::Shocktube2DState(): $/;"	f	class:Shocktube2DState
Shocktube2DState	state/state_shocktube.h	/^class Shocktube2DState: public State {$/;"	c
Shocktube3D	geometry/geometry_shocktube3d.cpp	/^Shocktube3D::Shocktube3D():lengthX(7), lengthY(2), lengthZ(2) {}$/;"	f	class:Shocktube3D
Shocktube3D	geometry/geometry_shocktube3d.h	/^class Shocktube3D: public Geometry {$/;"	c
Shocktube3D0005	geometry/geometry_shocktube3d.cpp	/^Shocktube3D0005::Shocktube3D0005():lengthX(5), lengthY(0.099593), lengthZ(0.100315) {}$/;"	f	class:Shocktube3D0005
Shocktube3D0005	geometry/geometry_shocktube3d.h	/^class Shocktube3D0005: public Geometry {$/;"	c
Shocktube3D0005SolidBoundary	boundary/boundary_solid_shocktube3d.cpp	/^Shocktube3D0005SolidBoundary::Shocktube3D0005SolidBoundary():lengthX(5), lengthY(0.099593), lengthZ(0.100315), thickness(0.02) {$/;"	f	class:Shocktube3D0005SolidBoundary
Shocktube3D0005SolidBoundary	boundary/boundary_solid_shocktube3d.h	/^class Shocktube3D0005SolidBoundary: public Boundary {$/;"	c
Shocktube3D0025	geometry/geometry_shocktube3d.cpp	/^Shocktube3D0025::Shocktube3D0025():lengthX(5), lengthY(0.49796), lengthZ(0.50157) {}$/;"	f	class:Shocktube3D0025
Shocktube3D0025	geometry/geometry_shocktube3d.h	/^class Shocktube3D0025: public Geometry {$/;"	c
Shocktube3D0025SolidBoundary	boundary/boundary_solid_shocktube3d.cpp	/^Shocktube3D0025SolidBoundary::Shocktube3D0025SolidBoundary():lengthX(5), lengthY(0.49796), lengthZ(0.50157), thickness(0.1) {$/;"	f	class:Shocktube3D0025SolidBoundary
Shocktube3D0025SolidBoundary	boundary/boundary_solid_shocktube3d.h	/^class Shocktube3D0025SolidBoundary: public Boundary {$/;"	c
Shocktube3DSolidBoundary	boundary/boundary_solid_shocktube3d.cpp	/^Shocktube3DSolidBoundary::Shocktube3DSolidBoundary():lengthX(7), lengthY(2), lengthZ(2), thickness(0.2) {$/;"	f	class:Shocktube3DSolidBoundary
Shocktube3DSolidBoundary	boundary/boundary_solid_shocktube3d.h	/^class Shocktube3DSolidBoundary: public Boundary {$/;"	c
SimpleWave2DState	state/state_shocktube.cpp	/^SimpleWave2DState::SimpleWave2DState():$/;"	f	class:SimpleWave2DState
SimpleWave2DState	state/state_shocktube.h	/^class SimpleWave2DState: public State {$/;"	c
SodShocktube2DLaterState	state/state_shocktube.cpp	/^SodShocktube2DLaterState::SodShocktube2DLaterState():$/;"	f	class:SodShocktube2DLaterState
SodShocktube2DLaterState	state/state_shocktube.h	/^class SodShocktube2DLaterState: public State {$/;"	c
SodShocktube2DState	state/state_shocktube.cpp	/^SodShocktube2DState::SodShocktube2DState():$/;"	f	class:SodShocktube2DState
SodShocktube2DState	state/state_shocktube.h	/^class SodShocktube2DState: public State {$/;"	c
State	state/state.h	/^class State {$/;"	c
StateCreateFunc	state/state.h	/^	typedef State* (*StateCreateFunc)();$/;"	t	class:StateFactory
StateFactory	state/state.h	/^	StateFactory() {}; \/\/\/< for singleton design pattern$/;"	f	class:StateFactory
StateFactory	state/state.h	/^class StateFactory {$/;"	c
StateRegistrar	registrar.h	/^StateRegistrar<Derived>::StateRegistrar(std::string name) {$/;"	f	class:StateRegistrar
StateRegistrar	registrar.h	/^class StateRegistrar {$/;"	c
StiffPolytropicGasEOS	eos.h	/^        StiffPolytropicGasEOS(double gamma, double pinf, double einf):$/;"	f	class:StiffPolytropicGasEOS
StiffPolytropicGasEOS	eos.h	/^class StiffPolytropicGasEOS : public EOS {$/;"	c
TPShocktube2D	geometry/geometry_shocktube.cpp	/^TPShocktube2D::TPShocktube2D():lengthX(7), lengthY(3) {}$/;"	f	class:TPShocktube2D
TPShocktube2D	geometry/geometry_shocktube.h	/^class TPShocktube2D: public Geometry {$/;"	c
TPShocktube2DSolidBoundary	boundary/boundary_solid_tpshocktube.cpp	/^TPShocktube2DSolidBoundary::TPShocktube2DSolidBoundary():lengthX(7), lengthY(3), thickness(0.8) {$/;"	f	class:TPShocktube2DSolidBoundary
TPShocktube2DSolidBoundary	boundary/boundary_solid_tpshocktube.h	/^class TPShocktube2DSolidBoundary: public Boundary {$/;"	c
TPShocktube2DState	state/state_shocktube.cpp	/^TPShocktube2DState::TPShocktube2DState():$/;"	f	class:TPShocktube2DState
TPShocktube2DState	state/state_shocktube.h	/^class TPShocktube2DState: public State {$/;"	c
TXTParticleViewer1D	particle_viewer.cpp	/^TXTParticleViewer1D::TXTParticleViewer1D(ParticleData* data, const std::string& particleType, $/;"	f	class:TXTParticleViewer1D
TXTParticleViewer1D	particle_viewer.h	/^class TXTParticleViewer1D : public ParticleViewer {$/;"	c
T_conductivity	eos.cpp	/^static const gsl_interp2d_type *T_conductivity = INTERP_TYPE;$/;"	v	file:
T_sound_speed	eos.cpp	/^static const gsl_interp2d_type *T_sound_speed = INTERP_TYPE;$/;"	v	file:
T_temperature	eos.cpp	/^static const gsl_interp2d_type *T_temperature = INTERP_TYPE;$/;"	v	file:
TimeController	time_controller.h	/^class TimeController {$/;"	c
Uinflow	boundary/boundary_nozzle.h	/^        double Uinflow;$/;"	m	class:Nozzle3DInflowBoundary
Uinflow	boundary/boundary_nozzle.h	/^        double Uinflow;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
Uinflow	boundary/boundary_nozzle.h	/^        double Uinflow;$/;"	m	class:NozzleInflowBoundary
Uinflow	boundary/boundary_nozzle.h	/^        double Uinflow;$/;"	m	class:NozzleInflowFixPressureBoundary
Uinflow	boundary/boundary_pellet.h	/^	double Uinflow;\/\/inflow velocity, calculated using energy absorb rate$/;"	m	class:PelletInflowBoundary
Uniform3D	geometry/geometry_random.cpp	/^Uniform3D::Uniform3D():length(1.0){xCen={0,3,0,3}, yCen={0,0,3.5,3.5}, zCen={0,0,0,0};}$/;"	f	class:Uniform3D
Uniform3D	geometry/geometry_random.h	/^class Uniform3D: public Geometry {$/;"	c
UniformVelocityState	state/state.cpp	/^UniformVelocityState::UniformVelocityState(): m_fDen(1.66e-5), m_fPressure(1e-9), m_fVelocity(1e4), m_fCenX(0), m_fCenY(0), m_fCenZ(0) {} $/;"	f	class:UniformVelocityState
UniformVelocityState	state/state.h	/^class UniformVelocityState: public State {$/;"	c
UpdateInflowBoundary	boundary/boundary.h	/^	virtual int UpdateInflowBoundary(ParticleData* pData, EOS* m_pEOS, double dt, double m_fInitParticleSpacing){return 0;};$/;"	f	class:Boundary
UpdateInflowBoundary	boundary/boundary_nozzle.cpp	/^int Nozzle3DInflowBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:Nozzle3DInflowBoundary
UpdateInflowBoundary	boundary/boundary_nozzle.cpp	/^int Nozzle3DInflowFixPressureBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:Nozzle3DInflowFixPressureBoundary
UpdateInflowBoundary	boundary/boundary_nozzle.cpp	/^int Nozzle3DOutflowBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:Nozzle3DOutflowBoundary
UpdateInflowBoundary	boundary/boundary_nozzle.cpp	/^int NozzleInflowBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:NozzleInflowBoundary
UpdateInflowBoundary	boundary/boundary_nozzle.cpp	/^int NozzleInflowFixPressureBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:NozzleInflowFixPressureBoundary
UpdateInflowBoundary	boundary/boundary_nozzle.cpp	/^int NozzleOutflowBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:NozzleOutflowBoundary
UpdateInflowBoundary	boundary/boundary_pellet.cpp	/^int PelletInflowBoundary::UpdateInflowBoundary(ParticleData* m_pParticleData, EOS* m_pEOS, double dt, double dx){$/;"	f	class:PelletInflowBoundary
UpdateInflowBoundary	boundary/boundary_pellet.cpp	/^int PelletOutflowBoundary::UpdateInflowBoundary(ParticleData *m_pParticleData, EOS* m_pEOS, double dt, double dx) {$/;"	f	class:PelletOutflowBoundary
VTKParticleViewer	particle_viewer.cpp	/^VTKParticleViewer::VTKParticleViewer(ParticleData* data, const std::string& particleType, $/;"	f	class:VTKParticleViewer
VTKParticleViewer	particle_viewer.h	/^class VTKParticleViewer : public ParticleViewer {$/;"	c
Vinflow	boundary/boundary_nozzle.h	/^	double Vinflow;$/;"	m	class:NozzleInflowBoundary
Vinflow	boundary/boundary_nozzle.h	/^        double Vinflow;$/;"	m	class:Nozzle3DInflowBoundary
Vinflow	boundary/boundary_nozzle.h	/^        double Vinflow;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
Vinflow	boundary/boundary_nozzle.h	/^        double Vinflow;$/;"	m	class:NozzleInflowFixPressureBoundary
Vinflow	boundary/boundary_pellet.h	/^	double Vinflow;\/\/inflow specific volume, constant$/;"	m	class:PelletInflowBoundary
Vinitial	boundary/boundary_nozzle.h	/^	double Vinitial;$/;"	m	class:NozzleInflowFixPressureBoundary
Vinitial	boundary/boundary_nozzle.h	/^        double Vinitial;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
VolumeVoronoi	octree.h	/^  const double *VolumeVoronoi;$/;"	m	class:Octree
VoronoiAreaEstimator	voronoi_area_estimator.h	/^	VoronoiAreaEstimator(int d, int N, const double* x, const double* y, const double* z, const double* m, double* a): dimension(d),number_of_points(N), x_coord(x), y_coord(y), z_coord(z), area(a) {};$/;"	f	class:VoronoiAreaEstimator
VoronoiAreaEstimator	voronoi_area_estimator.h	/^class VoronoiAreaEstimator{$/;"	c
VoronoiDensityEstimator	neighbour_searcher.cpp	/^int OctreeSearcher::VoronoiDensityEstimator(const int index, const double x, const double y, const double z, const double radius, double* density) {$/;"	f	class:OctreeSearcher
VoronoiDensityEstimator	octree.cpp	/^int Octree::VoronoiDensityEstimator(const int search_index, const double search_x, const double search_y, const double search_z, const double radius, double* density_count){$/;"	f	class:Octree
Yee2D	geometry/geometry_gresho.cpp	/^Yee2D::Yee2D():radius(5.), xCen(0), yCen(0) {}$/;"	f	class:Yee2D
Yee2D	geometry/geometry_gresho.h	/^class Yee2D: public Geometry {$/;"	c
Yee2DSolidBoundary	boundary/boundary_solid_gresho.cpp	/^Yee2DSolidBoundary::Yee2DSolidBoundary():radius(5.), thickness(3.0) {$/;"	f	class:Yee2DSolidBoundary
Yee2DSolidBoundary	boundary/boundary_solid_gresho.h	/^class Yee2DSolidBoundary: public Boundary {$/;"	c
Yee2DState	state/state_gresho.cpp	/^Yee2DState::Yee2DState(){}$/;"	f	class:Yee2DState
Yee2DState	state/state_gresho.h	/^class Yee2DState: public State {$/;"	c
Yee3D	geometry/geometry_gresho.cpp	/^Yee3D::Yee3D():radius(5.), xCen(0), yCen(0), zlength(7.) {}$/;"	f	class:Yee3D
Yee3D	geometry/geometry_gresho.h	/^class Yee3D: public Geometry {$/;"	c
Yee3DSolidBoundary	boundary/boundary_solid_gresho.cpp	/^Yee3DSolidBoundary::Yee3DSolidBoundary():radius(5.), thickness(3.0),zlength(7.)  {$/;"	f	class:Yee3DSolidBoundary
Yee3DSolidBoundary	boundary/boundary_solid_gresho.h	/^class Yee3DSolidBoundary: public Boundary {$/;"	c
ZNe	initializer.h	/^        int ZNe;$/;"	m	class:Initializer
ZNe	particle_data.h	/^	int ZNe;$/;"	m	class:ParticleData
__BOUNDARY_DAMBREAK_H__	boundary/boundary_dambreak.h	19;"	d
__BOUNDARY_H__	boundary/boundary.h	17;"	d
__BOUNDARY_KELVINHELMHOLTZ_H__	boundary/boundary_kelvinhelmholtz.h	19;"	d
__BOUNDARY_NOZZLE_H__	boundary/boundary_nozzle.h	2;"	d
__BOUNDARY_PELLET_H__	boundary/boundary_pellet.h	2;"	d
__BOUNDARY_POWDER_TARGET_3D_H__	boundary/boundary_powder_target_3d.h	19;"	d
__BOUNDARY_POWDER_TARGET_H__	boundary/boundary_powder_target.h	19;"	d
__BOUNDARY_RAYLEIGHTAYLOR_H__	boundary/boundary_rayleightaylor.h	19;"	d
__BOUNDARY_RAYLEIGHTAYLOR_THREED_H__	boundary/boundary_rayleightaylor3d.h	2;"	d
__BOUNDARY_RT_PERIODIC_H__	boundary/boundary_rayleightaylor_periodic.h	19;"	d
__BOUNDARY_SOLID_GRESHO_H__	boundary/boundary_solid_gresho.h	19;"	d
__BOUNDARY_SOLID_SHOCKTUBE_H__	boundary/boundary_solid_shocktube.h	19;"	d
__BOUNDARY_SOLID_SHOCKTUBE_THREED_H__	boundary/boundary_solid_shocktube3d.h	2;"	d
__BOUNDARY_SOLID_TPSHOCKTUBE_H__	boundary/boundary_solid_tpshocktube.h	19;"	d
__EOS_H__	eos.h	10;"	d
__GEOMETRY_1D_H__	geometry/geometry_1d.h	17;"	d
__GEOMETRY_BALLEXP_H__	geometry/geometry_ballexp.h	19;"	d
__GEOMETRY_COLLISION_H__	geometry/geometry_collision.h	21;"	d
__GEOMETRY_GRESHO_H__	geometry/geometry_gresho.h	19;"	d
__GEOMETRY_H__	geometry/geometry.h	17;"	d
__GEOMETRY_JET_H__	geometry/geometry_jet.h	19;"	d
__GEOMETRY_NOZZLE_H__	geometry/geometry_nozzle.h	2;"	d
__GEOMETRY_PELLET_H	geometry/geometry_pellet.h	2;"	d
__GEOMETRY_POWDER_TARGET_3D_H__	geometry/geometry_powder_target_3d.h	2;"	d
__GEOMETRY_POWDER_TARGET_H__	geometry/geometry_powder_target.h	18;"	d
__GEOMETRY_RANDOM_H__	geometry/geometry_random.h	2;"	d
__GEOMETRY_SHOCKTUBE_H__	geometry/geometry_shocktube.h	19;"	d
__GEOMETRY_SHOCKTUBE_THREED_H__	geometry/geometry_shocktube3d.h	2;"	d
__HEXAGONALPACKING_H__	hexagonal_packing.h	21;"	d
__INITIALIZER_H__	initializer.h	24;"	d
__LP_SOLVER_H__	lp_solver.h	23;"	d
__LS_SOLVER_H__	ls_solver.h	21;"	d
__NEIGHBOUR_SEARCHER_H__	neighbour_searcher.h	23;"	d
__OCTREE_H__	octree.h	10;"	d
__PARTICLE_DATA_H__	particle_data.h	22;"	d
__PARTICLE_VIEWER_H__	particle_viewer.h	21;"	d
__PELLET_SOLVER__	pellet_solver.h	2;"	d
__REGISTRAR_H__	registrar.h	19;"	d
__STATE_1D_H__	state/state_1d.h	18;"	d
__STATE_BALLEXP_H__	state/state_ballexp.h	18;"	d
__STATE_COLLISION_H__	state/state_collision.h	21;"	d
__STATE_GRESHO_H__	state/state_gresho.h	18;"	d
__STATE_H__	state/state.h	17;"	d
__STATE_JET_H__	state/state_jet.h	18;"	d
__STATE_NOZZLE_H__	state/state_nozzle.h	2;"	d
__STATE_PELLET_H__	state/state_pellet.h	2;"	d
__STATE_POWDER_TARGET_3D_H__	state/state_powder_target_3d.h	18;"	d
__STATE_POWDER_TARGET_H__	state/state_powder_target.h	18;"	d
__STATE_SHOCKTUBE_H__	state/state_shocktube.h	18;"	d
__TIME_CONTROLLER_H__	time_controller.h	25;"	d
__VORONOI_AREA_ESTIMATOR__	voronoi_area_estimator.h	2;"	d
adjustDtByWriteTimeInterval	time_controller.cpp	/^bool TimeController::adjustDtByWriteTimeInterval() {$/;"	f	class:TimeController
alpha	geometry/geometry_jet.h	/^  double alpha;$/;"	m	class:Jet2DMerge
alpha	geometry/geometry_jet.h	/^  double alpha;$/;"	m	class:Jet2DMergeLower
alpha	geometry/geometry_jet.h	/^  double alpha;$/;"	m	class:Jet2DMergeUpper
alpha	state/state_jet.h	/^  double alpha;$/;"	m	class:Jet2DMergeLowerState
alpha	state/state_jet.h	/^  double alpha;$/;"	m	class:Jet2DMergeState
alpha	state/state_jet.h	/^  double alpha;$/;"	m	class:Jet2DMergeUpperState
angle	octree.h	/^  double angle;$/;"	m	struct:SearchResult
area	voronoi_area_estimator.h	/^	double* area;$/;"	m	class:VoronoiAreaEstimator
ascByDist	lp_solver.cpp	/^bool ascByDist(const pair<int,double>& l, const pair<int,double>& r ) {$/;"	f
augment	particle_data.h	/^void ParticleData::augment(T*& data, std::size_t newSize, bool keepOld) {$/;"	f	class:ParticleData
augmentAllDataArrays	particle_data.cpp	/^void ParticleData::augmentAllDataArrays(size_t newCapacity) {$/;"	f	class:ParticleData
auxiliaryoutput	particle_viewer.h	/^	std::string auxiliaryoutput;$/;"	m	class:ParticleViewer
average_rightlimit	boundary/boundary_nozzle.h	/^	double average_rightlimit;$/;"	m	class:NozzleInflowFixPressureBoundary
average_rightlimit	boundary/boundary_nozzle.h	/^        double average_rightlimit;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
bTable	boundary/boundary.h	/^	std::unordered_map<std::string,GeoCreateFunc> bTable; \/\/\/< hash table for the (name,creatFunction) pair$/;"	m	class:BoundaryFactory
bb	boundary/boundary_rayleightaylor3d.h	/^        double bb; \/\/\/< bottom boundary$/;"	m	class:RayleighTaylor3DBoundary
bb	boundary/boundary_solid_shocktube3d.h	/^	double bb; \/\/\/< bottom boundary$/;"	m	class:Shocktube3D0005SolidBoundary
bb	boundary/boundary_solid_shocktube3d.h	/^	double bb; \/\/\/< bottom boundary$/;"	m	class:Shocktube3D0025SolidBoundary
bb	boundary/boundary_solid_shocktube3d.h	/^	double bb; \/\/\/< bottom boundary$/;"	m	class:Shocktube3DSolidBoundary
bbo	boundary/boundary_rayleightaylor3d.h	/^        double bbo; \/\/\/< outer bottom boundary$/;"	m	class:RayleighTaylor3DBoundary
bbo	boundary/boundary_solid_shocktube3d.h	/^	double bbo; \/\/\/< outer bottom boundary$/;"	m	class:Shocktube3D0005SolidBoundary
bbo	boundary/boundary_solid_shocktube3d.h	/^	double bbo; \/\/\/< outer bottom boundary$/;"	m	class:Shocktube3D0025SolidBoundary
bbo	boundary/boundary_solid_shocktube3d.h	/^	double bbo; \/\/\/< outer bottom boundary$/;"	m	class:Shocktube3DSolidBoundary
bo	boundary/boundary_nozzle.h	/^	double bo;$/;"	m	class:Nozzle2DSimpleSolidBoundary
bo	boundary/boundary_nozzle.h	/^        double bo;$/;"	m	class:Nozzle3DSimpleSolidBoundary
bo	boundary/boundary_solid_gresho.h	/^	double bo; $/;"	m	class:Gresho2DSolidBoundary
bo	boundary/boundary_solid_gresho.h	/^        double bo;$/;"	m	class:Sedov2DSolidBoundary
bo	boundary/boundary_solid_gresho.h	/^        double bo;$/;"	m	class:Yee2DSolidBoundary
bo	boundary/boundary_solid_gresho.h	/^        double bo;$/;"	m	class:Yee3DSolidBoundary
buildOctree	octree.cpp	/^int Octree::buildOctree(const double* x, const double* y, const double* z, const double* m, const double* vv, size_t numParticles) {$/;"	f	class:Octree
buildOctree	octree.cpp	/^int Octree::buildOctree(const double* x, const double* y, const double* z, const double* m, size_t numParticles) {$/;"	f	class:Octree
buildOctree	octree.cpp	/^int Octree::buildOctree(const double* x, const double* y, const double* z, size_t numParticles) {$/;"	f	class:Octree
buildOctree	octree.cpp	/^int Octree::buildOctree(const double* x, const double* y, const double* z,const double* m, const double* vv,  size_t numParticles, const double* x_integral){$/;"	f	class:Octree
buildSearchStructure	neighbour_searcher.cpp	/^int OctreeSearcher::buildSearchStructure(const double* x, const double* y, const double* z, const double* m, const double* vv, size_t begin, size_t numParticles) {$/;"	f	class:OctreeSearcher
buildSearchStructure	neighbour_searcher.cpp	/^int OctreeSearcher::buildSearchStructure(const double* x, const double* y, const double* z, const double* m, size_t begin, size_t numParticles) {$/;"	f	class:OctreeSearcher
buildSearchStructure	neighbour_searcher.cpp	/^int OctreeSearcher::buildSearchStructure(const double* x, const double* y, const double* z, size_t begin, size_t numParticles) {$/;"	f	class:OctreeSearcher
buildSearchStructure	neighbour_searcher.h	/^	virtual int buildSearchStructure(const double* x, const double* y, const double* z, size_t numParticles) {$/;"	f	class:OctreeSearcher
buildSearchStructure_integral	neighbour_searcher.cpp	/^int OctreeSearcher::buildSearchStructure_integral(const double* x, const double* y, const double* z, const double* m, const double* vv, size_t begin, size_t numParticles,const double* x_temp) {$/;"	f	class:OctreeSearcher
c_light	pellet_solver.cpp	6;"	d	file:
calculateHeatDeposition	lp_solver.cpp	/^void HyperbolicLPSolver::calculateHeatDeposition() {$/;"	f	class:HyperbolicLPSolver
calculateHeatDeposition	pellet_solver.cpp	/^void PelletSolver::calculateHeatDeposition( double dt) {$/;"	f	class:PelletSolver
calculateMassFlowRate	boundary/boundary_pellet.cpp	/^double calculateMassFlowRate(double energy){$/;"	f
checkInvalid	lp_solver.cpp	/^void HyperbolicLPSolver::checkInvalid() {$/;"	f	class:HyperbolicLPSolver
cleanBadStates	pellet_solver.cpp	/^void PelletSolver::cleanBadStates(){$/;"	f	class:PelletSolver
clearOctreeStructure	octree.cpp	/^void Octree::clearOctreeStructure() {$/;"	f	class:Octree
compareSearchResultAngle	octree.cpp	/^bool compareSearchResultAngle(const SearchResult& sr1, const SearchResult& sr2) {$/;"	f
computeA2D	lp_solver.cpp	/^void HyperbolicLPSolver::computeA2D(size_t index, const int *neighbourList, $/;"	f	class:HyperbolicLPSolver
computeA3D	lp_solver.cpp	/^void HyperbolicLPSolver::computeA3D(size_t index, const int *neighbourList, $/;"	f	class:HyperbolicLPSolver
computeAvgParticleSpacing	lp_solver.cpp	/^void HyperbolicLPSolver::computeAvgParticleSpacing() {$/;"	f	class:HyperbolicLPSolver
computeB	lp_solver.cpp	/^void HyperbolicLPSolver::computeB(size_t index, const int *neighbourList, size_t numRow, const double* inData, $/;"	f	class:HyperbolicLPSolver
computeDtByCFL	time_controller.cpp	/^void DefaultTimeController::computeDtByCFL() {$/;"	f	class:DefaultTimeController
computeIntegral	neighbour_searcher.cpp	/^void OctreeSearcher::computeIntegral(const double *mass, double *left, double * right, int n){$/;"	f	class:OctreeSearcher
computeIntegral	octree.cpp	/^void Octree::computeIntegral(const double* mass, double* left_integral, double* right_integral, int fluidnum){$/;"	f	class:Octree
computeIntegralAPCloud	neighbour_searcher.cpp	/^void OctreeSearcher::computeIntegralAPCloud(const double *mass, double *left, double * right, int n, int maxnp){$/;"	f	class:OctreeSearcher
computeIntegralAPCloud	octree.cpp	/^void Octree::computeIntegralAPCloud(const double* mass, double* left_integral, double* right_integral, int fluidnum, int maxnp){$/;"	f	class:Octree
computeIntegralQuadtree	neighbour_searcher.cpp	/^void OctreeSearcher::computeIntegralQuadtree(const double* mass, double* left, double* right, int n, int maxnp, int binaryresolution)$/;"	f	class:OctreeSearcher
computeIntegralQuadtree	octree.cpp	/^void Octree::computeIntegralQuadtree(const double* mass, double* left_integral, double* right_integral, int fluidnum, int maxnp, int binaryresolution){$/;"	f	class:Octree
computeIntegralSpherical	lp_solver.cpp	/^void HyperbolicLPSolver::computeIntegralSpherical(){$/;"	f	class:HyperbolicLPSolver
computeIntegralSpherical	pellet_solver.cpp	/^void PelletSolver::computeIntegralSpherical(){$/;"	f	class:PelletSolver
computeKey	octree.cpp	/^inline uint64_t Octree::computeKey(const double& x, const double& y, const double& z)$/;"	f	class:Octree
computeMaxFluidVelocity	lp_solver.cpp	/^void HyperbolicLPSolver::computeMaxFluidVelocity() {$/;"	f	class:HyperbolicLPSolver
computeMaxSoundSpeed	lp_solver.cpp	/^void HyperbolicLPSolver::computeMaxSoundSpeed() {$/;"	f	class:HyperbolicLPSolver
computeMinCFL	lp_solver.cpp	/^void HyperbolicLPSolver::computeMinCFL() {$/;"	f	class:HyperbolicLPSolver
computeMinParticleSpacing	lp_solver.cpp	/^void HyperbolicLPSolver::computeMinParticleSpacing() {$/;"	f	class:HyperbolicLPSolver
computeNumParticleWithinSearchRadius	initializer.cpp	/^void Initializer::computeNumParticleWithinSearchRadius() {$/;"	f	class:Initializer
computeNumRowAndNumColAndLPFOrder	lp_solver.cpp	/^void HyperbolicLPSolver::computeNumRowAndNumColAndLPFOrder(size_t index, \/\/ input$/;"	f	class:HyperbolicLPSolver
computeSetupsForNextIteration	lp_solver.cpp	/^void HyperbolicLPSolver::computeSetupsForNextIteration() {$/;"	f	class:HyperbolicLPSolver
computeSpatialDer	lp_solver.cpp	/^void HyperbolicLPSolver::computeSpatialDer(int dir, size_t index, \/\/ input $/;"	f	class:HyperbolicLPSolver
computeSpatialDer	lp_solver.cpp	/^void HyperbolicLPSolver::computeSpatialDer(size_t index,  size_t offset, void (HyperbolicLPSolver::*computeA) (size_t, const int *, const int*, size_t, size_t,double*, double*),  const double* inPressure, const double* inVelocityU, const double* inVelocityV, const double* inVelocityW, const double* inVolume, const int *neighbourList, const int *neighbourListSize,$/;"	f	class:HyperbolicLPSolver
computeSpatialDer	lp_solver.cpp	/^void HyperbolicLPSolver::computeSpatialDer(size_t index, size_t offset, void (HyperbolicLPSolver::*computeA) (size_t, const int *, const int*, size_t, size_t,double*, double*),$/;"	f	class:HyperbolicLPSolver
computeTemperature	lp_solver.cpp	/^void HyperbolicLPSolver::computeTemperature(){$/;"	f	class:HyperbolicLPSolver
computeX	hexagonal_packing.h	/^	double computeX(int tag, size_t k) {$/;"	f	class:HexagonalPacking2D
computeX	hexagonal_packing.h	/^	double computeX(int tag, size_t k) {$/;"	f	class:HexagonalPacking3D
computeY	hexagonal_packing.h	/^	double computeY(int tag, size_t j) {$/;"	f	class:HexagonalPacking3D
computeY	hexagonal_packing.h	/^	double computeY(size_t j) {$/;"	f	class:HexagonalPacking2D
computeZ	hexagonal_packing.h	/^	double computeZ(size_t i) {$/;"	f	class:HexagonalPacking3D
conductivity	initializer.h	/^        double conductivity;$/;"	m	class:Initializer
conductivity	particle_data.h	/^	double conductivity;$/;"	m	class:ParticleData
countNumberinRange	octree.cpp	/^int Octree::countNumberinRange( int n, double x, double y) $/;"	f	class:Octree
createBoundary	boundary/boundary.cpp	/^Boundary* BoundaryFactory::createBoundary(std::string name) {$/;"	f	class:BoundaryFactory
createFunc	registrar.h	/^Boundary* BoundaryRegistrar<Derived>::createFunc() {$/;"	f	class:BoundaryRegistrar
createFunc	registrar.h	/^Geometry* GeometryRegistrar<Derived>::createFunc() {$/;"	f	class:GeometryRegistrar
createFunc	registrar.h	/^State* StateRegistrar<Derived>::createFunc() {$/;"	f	class:StateRegistrar
createGeometry	geometry/geometry.cpp	/^Geometry* GeometryFactory::createGeometry(std::string name) {$/;"	f	class:GeometryFactory
createState	state/state.cpp	/^State* StateFactory::createState(std::string name) {$/;"	f	class:StateFactory
debug	lp_solver.h	/^	std::ofstream debug;\/\/\/< output information for debugging	$/;"	m	class:LPSolver
debug	time_controller.h	/^	std::ofstream debug;\/\/\/< output information for debugging$/;"	m	class:TimeController
density	state/state.cpp	/^double GaussianPressureState::density(double x, double y, double z) {$/;"	f	class:GaussianPressureState
density	state/state.cpp	/^double UniformVelocityState::density(double x, double y, double z) {$/;"	f	class:UniformVelocityState
density	state/state_1d.cpp	/^double GaussianPressure1DState::density(double x, double y, double z) {$/;"	f	class:GaussianPressure1DState
density	state/state_ballexp.cpp	/^double Ballexp3DState::density(double x, double y, double z) {$/;"	f	class:Ballexp3DState
density	state/state_ballexp.cpp	/^double Ballpressurewave3DState::density(double x, double y, double z) {$/;"	f	class:Ballpressurewave3DState
density	state/state_ballexp.cpp	/^double Ballrotate3DState::density(double x, double y, double z) {$/;"	f	class:Ballrotate3DState
density	state/state_collision.cpp	/^double LeftUniformVelocityState::density(double x, double y, double z) {$/;"	f	class:LeftUniformVelocityState
density	state/state_collision.cpp	/^double RightUniformVelocityState::density(double x, double y, double z) {$/;"	f	class:RightUniformVelocityState
density	state/state_gresho.cpp	/^double ConvergentShock2DState::density(double x, double y, double z) {$/;"	f	class:ConvergentShock2DState
density	state/state_gresho.cpp	/^double Gresho2DState::density(double x, double y, double z) {$/;"	f	class:Gresho2DState
density	state/state_gresho.cpp	/^double Noh2DState::density(double x, double y, double z) {$/;"	f	class:Noh2DState
density	state/state_gresho.cpp	/^double Sedov2DState::density(double x, double y, double z) {$/;"	f	class:Sedov2DState
density	state/state_gresho.cpp	/^double Yee2DState::density(double x, double y, double z) {$/;"	f	class:Yee2DState
density	state/state_jet.cpp	/^double Jet1DCenterState::density(double x, double y, double z) {$/;"	f	class:Jet1DCenterState
density	state/state_jet.cpp	/^double Jet1DLaterState::density(double x, double y, double z) {$/;"	f	class:Jet1DLaterState
density	state/state_jet.cpp	/^double Jet1DLeftState::density(double x, double y, double z) {$/;"	f	class:Jet1DLeftState
density	state/state_jet.cpp	/^double Jet1DRightState::density(double x, double y, double z) {$/;"	f	class:Jet1DRightState
density	state/state_jet.cpp	/^double Jet1DState::density(double x, double y, double z) {$/;"	f	class:Jet1DState
density	state/state_jet.cpp	/^double Jet2DCollisionState::density(double x, double y, double z) {$/;"	f	class:Jet2DCollisionState
density	state/state_jet.cpp	/^double Jet2DExpansionState::density(double x, double y, double z) {$/;"	f	class:Jet2DExpansionState
density	state/state_jet.cpp	/^double Jet2DMergeLowerState::density(double x, double y, double z) {$/;"	f	class:Jet2DMergeLowerState
density	state/state_jet.cpp	/^double Jet2DMergeState::density(double x, double y, double z) {$/;"	f	class:Jet2DMergeState
density	state/state_jet.cpp	/^double Jet2DMergeUpperState::density(double x, double y, double z) {$/;"	f	class:Jet2DMergeUpperState
density	state/state_jet.cpp	/^double Jet3DExpansionState::density(double x, double y, double z) {$/;"	f	class:Jet3DExpansionState
density	state/state_jet.cpp	/^double Jet3DState::density(double x, double y, double z) {$/;"	f	class:Jet3DState
density	state/state_nozzle.cpp	/^double NozzleRotheState::density(double x, double y, double z) {$/;"	f	class:NozzleRotheState
density	state/state_nozzle.cpp	/^double NozzleState::density(double x, double y, double z) {$/;"	f	class:NozzleState
density	state/state_pellet.cpp	/^double PelletState::density(double x, double y, double z){$/;"	f	class:PelletState
density	state/state_powder_target.cpp	/^double PowderTarget2DState::density(double x, double y, double z) {$/;"	f	class:PowderTarget2DState
density	state/state_powder_target_3d.cpp	/^double PowderTarget3DState::density(double x, double y, double z) {$/;"	f	class:PowderTarget3DState
density	state/state_shocktube.cpp	/^double BoundaryTest2DState::density(double x, double y, double z) {$/;"	f	class:BoundaryTest2DState
density	state/state_shocktube.cpp	/^double DamBreak2DState::density(double x, double y, double z) {$/;"	f	class:DamBreak2DState
density	state/state_shocktube.cpp	/^double KelvinHelmholtz2DState::density(double x, double y, double z) {$/;"	f	class:KelvinHelmholtz2DState
density	state/state_shocktube.cpp	/^double NormalShock2DState::density(double x, double y, double z) {$/;"	f	class:NormalShock2DState
density	state/state_shocktube.cpp	/^double RayleighTaylor2DState::density(double x, double y, double z) {$/;"	f	class:RayleighTaylor2DState
density	state/state_shocktube.cpp	/^double RayleighTaylor3DState::density(double x, double y, double z) {$/;"	f	class:RayleighTaylor3DState
density	state/state_shocktube.cpp	/^double Shocktube2DState::density(double x, double y, double z) {$/;"	f	class:Shocktube2DState
density	state/state_shocktube.cpp	/^double SimpleWave2DState::density(double x, double y, double z) {$/;"	f	class:SimpleWave2DState
density	state/state_shocktube.cpp	/^double SodShocktube2DLaterState::density(double x, double y, double z) {$/;"	f	class:SodShocktube2DLaterState
density	state/state_shocktube.cpp	/^double SodShocktube2DState::density(double x, double y, double z) {$/;"	f	class:SodShocktube2DState
density	state/state_shocktube.cpp	/^double TPShocktube2DState::density(double x, double y, double z) {$/;"	f	class:TPShocktube2DState
densityEstimator	neighbour_searcher.cpp	/^int OctreeSearcher::densityEstimator(const double x, const double y, const double z, const double radius, double* count_density, double dir_x, double dir_y, double dir_z) {$/;"	f	class:OctreeSearcher
densityEstimator	neighbour_searcher.cpp	/^int OctreeSearcher::densityEstimator(const int index, const double x, const double y, const double z, const double radius, double* count_density, const double* volume, double* vmin, double* vmax) {$/;"	f	class:OctreeSearcher
densityEstimator	neighbour_searcher.cpp	/^int OctreeSearcher::densityEstimator(const int index, const double x, const double y, const double z, const double radius, double* count_density, double dir_x, double dir_y, double dir_z) {$/;"	f	class:OctreeSearcher
densityEstimator	octree.cpp	/^int Octree::densityEstimator(const double search_x, const double search_y, const double search_z, const double radius, double* density_count, double dir_x, double dir_y, double dir_z)$/;"	f	class:Octree
densityEstimator	octree.cpp	/^int Octree::densityEstimator(const int search_index, const double search_x, const double search_y, const double search_z, const double radius, double* density_count, const double* volume, double* vmin, double* vmax){$/;"	f	class:Octree
densityEstimator	octree.cpp	/^int Octree::densityEstimator(const int search_index, const double search_x, const double search_y, const double search_z, const double radius, double* density_count, double dir_x, double dir_y, double dir_z){$/;"	f	class:Octree
density_derivative	lp_solver.cpp	/^bool HyperbolicLPSolver::density_derivative() {$/;"	f	class:HyperbolicLPSolver
dimension	voronoi_area_estimator.h	/^	int dimension;$/;"	m	class:VoronoiAreaEstimator
distance	octree.h	/^  double distance;$/;"	m	struct:SearchResult
epsilon	boundary/boundary_dambreak.h	/^	double epsilon;$/;"	m	class:DamBreak2DBoundary
epsilon	boundary/boundary_rayleightaylor.h	/^	double epsilon;$/;"	m	class:RayleighTaylor2DBoundary
epsilon	boundary/boundary_rayleightaylor3d.h	/^        double epsilon;$/;"	m	class:RayleighTaylor3DBoundary
epsilon	boundary/boundary_solid_shocktube.h	/^	double epsilon;$/;"	m	class:Shocktube2DSolidBoundary
epsilon	boundary/boundary_solid_shocktube3d.h	/^        double epsilon;$/;"	m	class:Shocktube3D0005SolidBoundary
epsilon	boundary/boundary_solid_shocktube3d.h	/^        double epsilon;$/;"	m	class:Shocktube3D0025SolidBoundary
epsilon	boundary/boundary_solid_shocktube3d.h	/^        double epsilon;$/;"	m	class:Shocktube3DSolidBoundary
epsilon	boundary/boundary_solid_tpshocktube.h	/^	double epsilon;$/;"	m	class:TPShocktube2DSolidBoundary
exact_density	particle_viewer.cpp	/^double VTKParticleViewer::exact_density(double x, double y, double z, double time)$/;"	f	class:VTKParticleViewer
exact_pressure	particle_viewer.cpp	/^double VTKParticleViewer::exact_pressure(double x, double y, double z, double time)$/;"	f	class:VTKParticleViewer
exact_velocity_magnitude	particle_viewer.cpp	/^double VTKParticleViewer::exact_velocity_magnitude(double x, double y, double z, double time)$/;"	f	class:VTKParticleViewer
exact_velocityu	particle_viewer.cpp	/^double VTKParticleViewer::exact_velocityu(double x, double y, double z, double time)$/;"	f	class:VTKParticleViewer
exact_velocityv	particle_viewer.cpp	/^double VTKParticleViewer::exact_velocityv(double x, double y, double z, double time)$/;"	f	class:VTKParticleViewer
exact_volume	particle_viewer.cpp	/^double VTKParticleViewer::exact_volume(double x, double y, double z, double time)$/;"	f	class:VTKParticleViewer
exactsolution	particle_viewer.h	/^	std::string exactsolution;$/;"	m	class:ParticleViewer
fillGhostParticle2D	lp_solver.cpp	/^bool HyperbolicLPSolver::fillGhostParticle2D(int dir, int count[], size_t index, size_t* ghostIndex) {$/;"	f	class:HyperbolicLPSolver
fillGhostParticle2D	lp_solver.cpp	/^void HyperbolicLPSolver::fillGhostParticle2D(int dir, int count[], size_t index, $/;"	f	class:HyperbolicLPSolver
fillGhostParticle3D	lp_solver.cpp	/^bool HyperbolicLPSolver::fillGhostParticle3D(int dir, int count[], size_t index, size_t* ghostIndex) {$/;"	f	class:HyperbolicLPSolver
fillGhostParticle3D	lp_solver.cpp	/^void HyperbolicLPSolver::fillGhostParticle3D(int dir, int count[], size_t index, $/;"	f	class:HyperbolicLPSolver
generateGhostParticleByFillingVacancy	lp_solver.cpp	/^bool HyperbolicLPSolver::generateGhostParticleByFillingVacancy() {$/;"	f	class:HyperbolicLPSolver
generatePeriodicBoundaryByMirrorParticles	lp_solver.cpp	/^bool HyperbolicLPSolver::generatePeriodicBoundaryByMirrorParticles() {$/;"	f	class:HyperbolicLPSolver
generateSolidBoundaryByMirrorParticles	lp_solver.cpp	/^bool HyperbolicLPSolver::generateSolidBoundaryByMirrorParticles() {$/;"	f	class:HyperbolicLPSolver
geoTable	geometry/geometry.h	/^	std::unordered_map<std::string,GeoCreateFunc> geoTable; \/\/\/< hash table for the (name,creatFunction) pair$/;"	m	class:GeometryFactory
getAuxiliaryOutput	initializer.h	/^	std::string getAuxiliaryOutput() const {return m_sAuxiliaryOutput;}$/;"	f	class:Initializer
getBinarytreeResolution	initializer.h	/^    int getBinarytreeResolution() const {return m_iBinarytreeResolution;}$/;"	f	class:Initializer
getBinarytreeResolution	particle_data.h	/^    int getBinarytreeResolution() const {return m_iBinarytreeResolution;}$/;"	f	class:ParticleData
getBoundaryNum	particle_data.h	/^	std::size_t getBoundaryNum() {return m_iBoundaryNum;}$/;"	f	class:ParticleData
getBoundaryObj	initializer.h	/^	std::vector<Boundary*>& getBoundaryObj() {return m_vBoundaryObj;}$/;"	f	class:Initializer
getBoundaryObjTypes	initializer.h	/^	std::vector<std::string>& getBoundaryObjTypes() {return m_vBoundaryObjTypes;}$/;"	f	class:Initializer
getBoundaryStartIndex	particle_data.h	/^	std::size_t getBoundaryStartIndex() {return m_iBoundaryStartIndex;}$/;"	f	class:ParticleData
getBoundingBox	geometry/geometry.cpp	/^void Ball::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Ball
getBoundingBox	geometry/geometry.cpp	/^void Disk::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Disk
getBoundingBox	geometry/geometry_1d.cpp	/^void Line::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Line
getBoundingBox	geometry/geometry_ballexp.cpp	/^void Ballexp3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Ballexp3D
getBoundingBox	geometry/geometry_collision.cpp	/^void DiskLeft::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:DiskLeft
getBoundingBox	geometry/geometry_collision.cpp	/^void DiskRight::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:DiskRight
getBoundingBox	geometry/geometry_gresho.cpp	/^void Gresho2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Gresho2D
getBoundingBox	geometry/geometry_gresho.cpp	/^void Sedov2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Sedov2D
getBoundingBox	geometry/geometry_gresho.cpp	/^void Yee2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Yee2D
getBoundingBox	geometry/geometry_gresho.cpp	/^void Yee3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Yee3D
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet1D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet1D
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet1DCenter::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet1DCenter
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet1DLeft::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet1DLeft
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet1DRight::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet1DRight
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet2D
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet2DCollision::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet2DCollision
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet2DExpansion::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet2DExpansion
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet2DMerge::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet2DMerge
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet2DMergeLower::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet2DMergeLower
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet2DMergeUpper::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet2DMergeUpper
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet3D
getBoundingBox	geometry/geometry_jet.cpp	/^void Jet3DExpansion::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Jet3DExpansion
getBoundingBox	geometry/geometry_nozzle.cpp	/^void Nozzle2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Nozzle2D
getBoundingBox	geometry/geometry_nozzle.cpp	/^void Nozzle2DComplete::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Nozzle2DComplete
getBoundingBox	geometry/geometry_nozzle.cpp	/^void Nozzle2DRothe::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Nozzle2DRothe
getBoundingBox	geometry/geometry_nozzle.cpp	/^void Nozzle2DSimple::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Nozzle2DSimple
getBoundingBox	geometry/geometry_nozzle.cpp	/^void Nozzle3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Nozzle3D
getBoundingBox	geometry/geometry_nozzle.cpp	/^void Nozzle3DRothe::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Nozzle3DRothe
getBoundingBox	geometry/geometry_pellet.cpp	/^void MultiPelletLayer::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax){$/;"	f	class:MultiPelletLayer
getBoundingBox	geometry/geometry_pellet.cpp	/^void PelletLayer::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax){$/;"	f	class:PelletLayer
getBoundingBox	geometry/geometry_powder_target.cpp	/^void PowderTarget2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:PowderTarget2D
getBoundingBox	geometry/geometry_powder_target_3d.cpp	/^void PowderTarget3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:PowderTarget3D
getBoundingBox	geometry/geometry_random.cpp	/^void Gaussian3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Gaussian3D
getBoundingBox	geometry/geometry_random.cpp	/^void MultiGaussian3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:MultiGaussian3D
getBoundingBox	geometry/geometry_random.cpp	/^void Uniform3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Uniform3D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void BigShocktube2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:BigShocktube2D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void BoundaryTest2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:BoundaryTest2D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void DamBreak2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:DamBreak2D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void KelvinHelmholtz2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:KelvinHelmholtz2D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void RayleighTaylor2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:RayleighTaylor2D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void Shocktube2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Shocktube2D
getBoundingBox	geometry/geometry_shocktube.cpp	/^void Shocktube2DLeft::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Shocktube2DLeft
getBoundingBox	geometry/geometry_shocktube.cpp	/^void Shocktube2DRight::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Shocktube2DRight
getBoundingBox	geometry/geometry_shocktube.cpp	/^void TPShocktube2D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:TPShocktube2D
getBoundingBox	geometry/geometry_shocktube3d.cpp	/^void RayleighTaylor3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:RayleighTaylor3D
getBoundingBox	geometry/geometry_shocktube3d.cpp	/^void Shocktube3D0005::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Shocktube3D0005
getBoundingBox	geometry/geometry_shocktube3d.cpp	/^void Shocktube3D0025::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Shocktube3D0025
getBoundingBox	geometry/geometry_shocktube3d.cpp	/^void Shocktube3D::getBoundingBox(double& xmin, double& xmax, double& ymin, double& ymax, double& zmin, double& zmax) {$/;"	f	class:Shocktube3D
getCFLCoeff	initializer.h	/^	double getCFLCoeff() const {return m_fCFLCoeff;}$/;"	f	class:Initializer
getCapacity	initializer.h	/^	std::size_t getCapacity() const {return m_iCapacity;}$/;"	f	class:Initializer
getCapacity	particle_data.h	/^	std::size_t getCapacity() {return m_iCapacity;}$/;"	f	class:ParticleData
getContactLength	initializer.h	/^	double getContactLength() const {return m_fContactLength;}$/;"	f	class:Initializer
getDD1	particle_data.h	/^	const double* const getDD1() const {return m_vDD1;}$/;"	f	class:ParticleData
getDD2Left	particle_data.h	/^	const double* const getDD2Left() const {return m_vDD2Left;}$/;"	f	class:ParticleData
getDD2Right	particle_data.h	/^	const double* const getDD2Right() const {return m_vDD2Right;}$/;"	f	class:ParticleData
getDD3Left	particle_data.h	/^	const double* const getDD3Left() const {return m_vDD3Left;}$/;"	f	class:ParticleData
getDD3Right	particle_data.h	/^	const double* const getDD3Right() const {return m_vDD3Right;}$/;"	f	class:ParticleData
getDebugfileName	initializer.h	/^	std::string getDebugfileName() const {return m_sDebugfileName;}$/;"	f	class:Initializer
getDeltaQ	particle_data.h	/^    const double* const getDeltaQ() const {return m_vDeltaq;}$/;"	f	class:ParticleData
getDensity	particle_data.h	/^	const double* const getDensity() const {return m_vDensity;}$/;"	f	class:ParticleData
getDensityEstimatorType	initializer.h	/^        int getDensityEstimatorType() const {return m_iDensityEstimatorType;}$/;"	f	class:Initializer
getDimension	initializer.h	/^	int getDimension() const {return m_iDimension;}	$/;"	f	class:Initializer
getDimension	particle_data.h	/^	int getDimension() {return m_iDimension;}$/;"	f	class:ParticleData
getEOS	initializer.h	/^	EOS* getEOS() const {return m_pEOS;}$/;"	f	class:Initializer
getEOSChoice	eos.h	/^	int getEOSChoice() {return m_iEOSChoice;}$/;"	f	class:EOS
getEOSChoice	initializer.h	/^	int getEOSChoice() const {return m_iEOSChoice;} \/\/TODO$/;"	f	class:Initializer
getElectricConductivity	eos.cpp	/^double  StiffPolytropicGasEOS::getElectricConductivity(double pressure, double density) {$/;"	f	class:StiffPolytropicGasEOS
getElectricConductivity	eos.cpp	/^double PolytropicGasEOS::getElectricConductivity(double pressure, double density) {$/;"	f	class:PolytropicGasEOS
getElectricConductivity	eos.cpp	/^double SahaEOS::getElectricConductivity(double pressure, double density) {$/;"	f	class:SahaEOS
getEndTime	initializer.h	/^	double getEndTime() const {return m_fEndTime;}$/;"	f	class:Initializer
getEnergy	eos.cpp	/^double PolytropicGasEOS::getEnergy(double pressure, double density) {$/;"	f	class:PolytropicGasEOS
getEnergy	eos.cpp	/^double SahaEOS::getEnergy(double pressure, double density) {$/;"	f	class:SahaEOS
getEnergy	eos.cpp	/^double StiffPolytropicGasEOS::getEnergy(double pressure, double density) {$/;"	f	class:StiffPolytropicGasEOS
getExactSolutionName	initializer.h	/^        std::string getExactSolutionName() const {return m_sExactSolutionName;}$/;"	f	class:Initializer
getFixParticles	initializer.h	/^        bool getFixParticles() const {return m_iFixParticles;}$/;"	f	class:Initializer
getFluidBoundingBox	initializer.h	/^	std::vector<BoundingBox*>& getFluidBoundingBox() {return m_vFluidBoundingBox;}	$/;"	f	class:Initializer
getFluidNum	initializer.h	/^	std::size_t getFluidNum() const {return m_iFluidNum;}$/;"	f	class:Initializer
getFluidNum	particle_data.h	/^	std::size_t getFluidNum() {return m_iFluidNum;}$/;"	f	class:ParticleData
getFluidStartIndex	initializer.h	/^	std::size_t getFluidStartIndex() const {return m_iFluidStartIndex;}$/;"	f	class:Initializer
getFluidStartIndex	particle_data.h	/^	std::size_t getFluidStartIndex() {return m_iFluidStartIndex;}$/;"	f	class:ParticleData
getGhostNum	particle_data.h	/^	std::size_t getGhostNum() {return m_iGhostNum;}$/;"	f	class:ParticleData
getGhostStartIndex	particle_data.h	/^	std::size_t getGhostStartIndex() {return m_iGhostStartIndex;} $/;"	f	class:ParticleData
getGravity	initializer.h	/^	double getGravity() const {return m_fGravity;}$/;"	f	class:Initializer
getINe	initializer.h	/^        double getINe() {return INe;}$/;"	f	class:Initializer
getINe	particle_data.h	/^	double getINe() {return INe;}$/;"	f	class:ParticleData
getIfDebug	initializer.h	/^	bool getIfDebug() const {return m_iIfDebug;}$/;"	f	class:Initializer
getIfRestart	initializer.h	/^	bool getIfRestart() const {return m_iIfRestart;}$/;"	f	class:Initializer
getIfSPHDensity	particle_data.h	/^	const int* const getIfSPHDensity() const {return m_vIfSPHDensity;}$/;"	f	class:ParticleData
getInflowNum	particle_data.h	/^        std::size_t getInflowNum() {return m_iInflowNum;}$/;"	f	class:ParticleData
getInitParticleSpacing	initializer.h	/^	double getInitParticleSpacing() const {return m_fInitParticleSpacing;}$/;"	f	class:Initializer
getInitialPerturbation	hexagonal_packing.h	/^	void getInitialPerturbation(double ip){m_fInitialPerturbation=ip;}$/;"	f	class:HexagonalPacking2D
getInitialPerturbation	hexagonal_packing.h	/^	void getInitialPerturbation(double ip){m_fInitialPerturbation=ip;}$/;"	f	class:HexagonalPacking3D
getInitialPerturbation	initializer.h	/^        int getInitialPerturbation() const {return m_fInitialPerturbation;}$/;"	f	class:Initializer
getInvalidDensity	initializer.h	/^	double getInvalidDensity() const {return m_fInvalidDensity;}$/;"	f	class:Initializer
getInvalidPressure	initializer.h	/^	double getInvalidPressure() const {return m_fInvalidPressure;}$/;"	f	class:Initializer
getLPFOrder	initializer.h	/^	int getLPFOrder() const {return m_iLPFOrder;}	$/;"	f	class:Initializer
getLeftInflow	particle_data.h	/^	const bool* const getLeftInflow() const {return m_bLeftInflow;}$/;"	f	class:ParticleData
getLeftIntegral	particle_data.h	/^        const double* const getLeftIntegral() const {return m_vLeftIntegral;}$/;"	f	class:ParticleData
getLocalParSpacing	initializer.h	/^	double* getLocalParSpacing() const {return m_vLocalParSpacing;}$/;"	f	class:Initializer
getLocalParSpacing	particle_data.h	/^	const double* const getLocalParSpacing() const {return m_vLocalParSpacing;}$/;"	f	class:ParticleData
getMagx	initializer.h	/^        double getMagx() {return Magx;}$/;"	f	class:Initializer
getMagx	particle_data.h	/^	double getMagx() {return Magx;}$/;"	f	class:ParticleData
getMagy	initializer.h	/^        double getMagy() {return Magy;}$/;"	f	class:Initializer
getMagy	particle_data.h	/^	double getMagy() {return Magy;}$/;"	f	class:ParticleData
getMagz	initializer.h	/^        double getMagz() {return Magz;}$/;"	f	class:Initializer
getMagz	particle_data.h	/^	double getMagz() {return Magz;}$/;"	f	class:ParticleData
getMass	initializer.h	/^	double* getMass() const {return m_vMass;}$/;"	f	class:Initializer
getMass	particle_data.h	/^        const double* const getMass() const {return m_vMass;}$/;"	f	class:ParticleData
getMassFlowRate	particle_data.h	/^	double* getMassFlowRate() {return m_vMassFlowRate;}$/;"	f	class:ParticleData
getMaxFluidVelocity	lp_solver.h	/^	virtual double getMaxFluidVelocity() const {return m_fMaxFluidVelocity;}$/;"	f	class:LPSolver
getMaxNeighbourNum	initializer.h	/^	std::size_t getMaxNeighbourNum() const {return m_iMaxNeighbourNum;}$/;"	f	class:Initializer
getMaxNeighbourNum	particle_data.h	/^	std::size_t getMaxNeighbourNum() {return m_iMaxNeighbourNum;}$/;"	f	class:ParticleData
getMaxNeighbourNumInOneDir	initializer.h	/^	std::size_t getMaxNeighbourNumInOneDir() const {return m_iMaxNeighbourNumInOneDir;}$/;"	f	class:Initializer
getMaxNeighbourNumInOneDir	particle_data.h	/^	std::size_t getMaxNeighbourNumInOneDir() {return m_iMaxNeighbourNumInOneDir;}$/;"	f	class:ParticleData
getMaxParticlePerCell	initializer.h	/^	int getMaxParticlePerCell() const {return m_iMaxParticlePerCell;}$/;"	f	class:Initializer
getMaxParticlePerCell	particle_data.h	/^	int getMaxParticlePerCell() {return m_iMaxParticlePerCell;}$/;"	f	class:ParticleData
getMaxSoundSpeed	lp_solver.h	/^	virtual double getMaxSoundSpeed() const {return m_fMaxSoundSpeed;}$/;"	f	class:LPSolver
getMinCFL	lp_solver.h	/^	virtual double getMinCFL() const {return m_fMinCFL;}$/;"	f	class:LPSolver
getMinParticleSpacing	lp_solver.h	/^	virtual double getMinParticleSpacing() const {return m_fMinParticleSpacing;}$/;"	f	class:LPSolver
getNeiSearchRadius	initializer.h	/^	double getNeiSearchRadius() const {return m_fNeiSearchRadius;}$/;"	f	class:Initializer
getNeighList	particle_data.h	/^        const int* const getNeighList() const {return m_vNeighList;}$/;"	f	class:ParticleData
getNeighOfParticle	particle_data.h	/^        const int* const getNeighOfParticle() const {return m_vNeighOfParticle;}$/;"	f	class:ParticleData
getNeighSize	particle_data.h	/^        const int* const getNeighSize() const {return m_vNeighSize;}$/;"	f	class:ParticleData
getNeighbourList	particle_data.h	/^        const int* const getNeighbourList() const {return m_vNeighbourList;}$/;"	f	class:ParticleData
getNeighbourListSize	particle_data.h	/^	const int* const getNeighbourListSize() const {return m_vNeighbourListSize;}$/;"	f	class:ParticleData
getNumCol1stOrder	initializer.h	/^	std::size_t getNumCol1stOrder() const {return m_iNumCol1stOrder;}$/;"	f	class:Initializer
getNumCol2ndOrder	initializer.h	/^	std::size_t getNumCol2ndOrder() const {return m_iNumCol2ndOrder;}$/;"	f	class:Initializer
getNumParticleWithinSearchRadius	initializer.h	/^	std::size_t getNumParticleWithinSearchRadius() const {return m_iNumParticleWithinSearchRadius;}	$/;"	f	class:Initializer
getNumRow1stOrder	initializer.h	/^	std::size_t getNumRow1stOrder() const {return m_iNumRow1stOrder;}$/;"	f	class:Initializer
getNumRow2ndOrder	initializer.h	/^	std::size_t getNumRow2ndOrder() const {return m_iNumRow2ndOrder;}$/;"	f	class:Initializer
getNumThreads	initializer.h	/^	int getNumThreads() const {return m_iNumThreads;}$/;"	f	class:Initializer
getNumber	initializer.h	/^	size_t getNumber() {return m_iNumber;}$/;"	f	class:BoundingBox
getNumberofPellet	initializer.h	/^	int getNumberofPellet() const {return m_iNumberofPellet;}$/;"	f	class:Initializer
getNumberofPellet	particle_data.h	/^        int getNumberofPellet() {return m_iNumberofPellet;}$/;"	f	class:ParticleData
getObjectTag	initializer.h	/^	int* getObjectTag() const {return m_vObjectTag;} $/;"	f	class:Initializer
getObjectTag	initializer.h	/^	size_t getObjectTag() {return m_iObjectTag;}$/;"	f	class:BoundingBox
getObjectTag	particle_data.h	/^	const int* const getObjectTag() const {return m_vObjectTag;}$/;"	f	class:ParticleData
getOutputError	initializer.h	/^        bool getOutputError() const {return m_iOutputError;}$/;"	f	class:Initializer
getPError0	particle_data.h	/^        const double* const getPError0() const {return m_vPError0;}$/;"	f	class:ParticleData
getPError1	particle_data.h	/^        const double* const getPError1() const {return m_vPError1;}$/;"	f	class:ParticleData
getParameters	eos.cpp	/^void  SahaEOS::getParameters(std::vector<double>& params)$/;"	f	class:SahaEOS
getParameters	eos.h	/^	virtual void getParameters(std::vector<double>& params) { $/;"	f	class:StiffPolytropicGasEOS
getParameters	eos.h	/^	virtual void getParameters(std::vector<double>& params) {params.push_back(m_fGamma);}$/;"	f	class:PolytropicGasEOS
getParameters	hexagonal_packing.h	/^	void getParameters(size_t& l0_, size_t& l1_, $/;"	f	class:HexagonalPacking3D
getParameters	hexagonal_packing.h	/^	void getParameters(size_t& m0_, size_t& m1_, $/;"	f	class:HexagonalPacking2D
getPelletDistribution	initializer.h	/^	int getPelletDistribution() const {return m_iPelletDistribution;}$/;"	f	class:Initializer
getPelletEnergy	particle_data.h	/^        const double* const getPelletEnergy() const {return m_vPelletEnergy;}$/;"	f	class:ParticleData
getPelletID	particle_data.h	/^        const int* const getPelletID() const {return m_vPelletID;}$/;"	f	class:ParticleData
getPelletInnerRadius	initializer.h	/^	double* getPelletInnerRadius() const {return m_vPelletInnerRadius;}$/;"	f	class:Initializer
getPelletInnerRadius	particle_data.h	/^	const double* const getPelletInnerRadius() const {return m_vPelletInnerRadius;}$/;"	f	class:ParticleData
getPelletOuterRadius	initializer.h	/^        double* getPelletOuterRadius() const {return m_vPelletOuterRadius;}$/;"	f	class:Initializer
getPelletPositionX	initializer.h	/^    double* getPelletPositionX() const {return m_vPelletPositionX;}$/;"	f	class:Initializer
getPelletPositionX	particle_data.h	/^        const double* const getPelletPositionX() const {return m_vPelletPositionX;}$/;"	f	class:ParticleData
getPelletPositionY	initializer.h	/^        double* getPelletPositionY() const {return m_vPelletPositionY;}$/;"	f	class:Initializer
getPelletPositionY	particle_data.h	/^        const double* const getPelletPositionY() const {return m_vPelletPositionY;}$/;"	f	class:ParticleData
getPelletPositionZ	initializer.h	/^        double* getPelletPositionZ() const {return m_vPelletPositionZ;}$/;"	f	class:Initializer
getPelletPositionZ	particle_data.h	/^        const double* const getPelletPositionZ() const {return m_vPelletPositionZ;}$/;"	f	class:ParticleData
getPelletRadius	initializer.h	/^        double* getPelletRadius() const {return m_vPelletRadius;}$/;"	f	class:Initializer
getPelletRadius	particle_data.h	/^        const double* const getPelletRadius() const {return m_vPelletRadius;}$/;"	f	class:ParticleData
getPhi	particle_data.h	/^    const double* const getPhi() const {return m_vPhi;}$/;"	f	class:ParticleData
getPositionX	initializer.h	/^	double* getPositionX() const {return m_vPositionX;}$/;"	f	class:Initializer
getPositionX	particle_data.h	/^	const double* const getPositionX() const {return m_vPositionX;}$/;"	f	class:ParticleData
getPositionY	initializer.h	/^	double* getPositionY() const {return m_vPositionY;}$/;"	f	class:Initializer
getPositionY	particle_data.h	/^	const double* const getPositionY() const {return m_vPositionY;}$/;"	f	class:ParticleData
getPositionZ	initializer.h	/^	double* getPositionZ() const {return m_vPositionZ;}$/;"	f	class:Initializer
getPositionZ	particle_data.h	/^	const double* const getPositionZ() const {return m_vPositionZ;}$/;"	f	class:ParticleData
getPressure	initializer.h	/^	double* getPressure() const {return m_vPressure;}$/;"	f	class:Initializer
getPressure	particle_data.h	/^	const double* const getPressure() const {return m_vPressure;}	$/;"	f	class:ParticleData
getPrintAllParticle	initializer.h	/^   int getPrintAllParticle(){return m_iPrintAllParticle;}$/;"	f	class:Initializer
getPrintDeltaq	initializer.h	/^   int getPrintDeltaq(){return m_iPrintDeltaq;}$/;"	f	class:Initializer
getPrintDensity	initializer.h	/^   int getPrintDensity(){return m_iPrintDensity;}$/;"	f	class:Initializer
getPrintLeftIntegral	initializer.h	/^   int getPrintLeftIntegral(){return m_iPrintLeftIntegral;}$/;"	f	class:Initializer
getPrintLocalSpacing	initializer.h	/^   int getPrintLocalSpacing(){return m_iPrintLocalSpacing;}$/;"	f	class:Initializer
getPrintMass	initializer.h	/^   int getPrintMass(){return m_iPrintMass;}$/;"	f	class:Initializer
getPrintPressure	initializer.h	/^   int getPrintPressure(){return m_iPrintPressure;}$/;"	f	class:Initializer
getPrintQplusminus	initializer.h	/^   int getPrintQplusminus(){return m_iPrintQplusminus;}$/;"	f	class:Initializer
getPrintRightIntegral	initializer.h	/^   int getPrintRightIntegral(){return m_iPrintRightIntegral;}$/;"	f	class:Initializer
getPrintSoundSpeed	initializer.h	/^   int getPrintSoundSpeed(){return m_iPrintSoundSpeed;}$/;"	f	class:Initializer
getPrintTemperature	initializer.h	/^   int getPrintTemperature(){return m_iPrintTemperature;}$/;"	f	class:Initializer
getPrintTimeTrack	initializer.h	/^   int getPrintTimeTrack(){return m_iPrintTimeTrack;} $/;"	f	class:Initializer
getPrintVelocity	initializer.h	/^   int getPrintVelocity(){return m_iPrintVelocity;} $/;"	f	class:Initializer
getPrintVelocityU	initializer.h	/^   int getPrintVelocityU(){return m_iPrintVelocityU;}$/;"	f	class:Initializer
getPrintVelocityV	initializer.h	/^   int getPrintVelocityV(){return m_iPrintVelocityV;}$/;"	f	class:Initializer
getPrintVelocityW	initializer.h	/^   int getPrintVelocityW(){return m_iPrintVelocityW;}$/;"	f	class:Initializer
getPrintVolume	initializer.h	/^   int getPrintVolume(){return m_iPrintVolume;}$/;"	f	class:Initializer
getPtx	particle_data.h	/^        const double* const getPtx() const {return m_vPtx;}$/;"	f	class:ParticleData
getPty	particle_data.h	/^        const double* const getPty() const {return m_vPty;}$/;"	f	class:ParticleData
getPxl	particle_data.h	/^        const double* const getPxl() const {return m_vPxl;}$/;"	f	class:ParticleData
getPxr	particle_data.h	/^        const double* const getPxr() const {return m_vPxr;}$/;"	f	class:ParticleData
getPyl	particle_data.h	/^        const double* const getPyl() const {return m_vPyl;}$/;"	f	class:ParticleData
getPyr	particle_data.h	/^        const double* const getPyr() const {return m_vPyr;}$/;"	f	class:ParticleData
getQplusminus	particle_data.h	/^	const double* const getQplusminus() const {return m_vQplusminus;}$/;"	f	class:ParticleData
getQuadtreeResolution	initializer.h	/^    int getQuadtreeResolution() const {return m_iQuadtreeResolution;}$/;"	f	class:Initializer
getQuadtreeResolution	particle_data.h	/^	int getQuadtreeResolution() const {return m_iQuadtreeResolution;}$/;"	f	class:ParticleData
getRandomDirSplitOrder	initializer.h	/^	bool getRandomDirSplitOrder() const {return m_iRandomDirSplitOrder;}$/;"	f	class:Initializer
getRightIntegral	particle_data.h	/^        const double* const getRightIntegral() const {return m_vRightIntegral;}$/;"	f	class:ParticleData
getSoundSpeed	eos.cpp	/^double PolytropicGasEOS::getSoundSpeed(double pressure, double density) {$/;"	f	class:PolytropicGasEOS
getSoundSpeed	eos.cpp	/^double SahaEOS::getSoundSpeed(double pressure, double density) {$/;"	f	class:SahaEOS
getSoundSpeed	eos.cpp	/^double StiffPolytropicGasEOS::getSoundSpeed(double pressure, double density) {$/;"	f	class:StiffPolytropicGasEOS
getSoundSpeed	initializer.h	/^	double* getSoundSpeed() const {return m_vSoundSpeed;}$/;"	f	class:Initializer
getSoundSpeed	particle_data.h	/^	const double* const getSoundSpeed() const {return m_vSoundSpeed;}	$/;"	f	class:ParticleData
getStartIndex	initializer.h	/^	size_t getStartIndex() {return m_iStartIndex;}$/;"	f	class:BoundingBox
getStartTime	initializer.h	/^	double getStartTime() const {return m_fStartTime;}$/;"	f	class:Initializer
getTemperature	eos.cpp	/^double  StiffPolytropicGasEOS::getTemperature(double pressure, double density) {$/;"	f	class:StiffPolytropicGasEOS
getTemperature	eos.cpp	/^double PolytropicGasEOS::getTemperature(double pressure, double density) {$/;"	f	class:PolytropicGasEOS
getTemperature	eos.cpp	/^double SahaEOS::getTemperature(double pressure, double density) {$/;"	f	class:SahaEOS
getTemperature	initializer.h	/^    double* getTemperature() const {return m_vTemperature;}$/;"	f	class:Initializer
getTemperature	particle_data.h	/^    const double* const getTemperature() const{ return m_vTemperature;}$/;"	f	class:ParticleData
getTimeTrack	initializer.h	/^    int* getTimeTrack() const{return m_vTimeTrack;}$/;"	f	class:Initializer
getTimeTrack	particle_data.h	/^    int* const getTimeTrack() const{return m_vTimeTrack;}$/;"	f	class:ParticleData
getTimesBoundingBox	initializer.h	/^	double getTimesBoundingBox() const {return m_fTimesBoundingBox;}$/;"	f	class:Initializer
getTimesContactLength	initializer.h	/^	double getTimesContactLength() const {return m_fTimesContactLength;}$/;"	f	class:Initializer
getTimesNeiSearchRadius	initializer.h	/^	double getTimesNeiSearchRadius() const {return m_fTimesNeiSearchRadius;}$/;"	f	class:Initializer
getTotalNum	particle_data.h	/^	std::size_t getTotalNum() {return m_iTotalNum;}$/;"	f	class:ParticleData
getTreeDepth	initializer.h	/^	int getTreeDepth() const {return m_iTreeDepth;}$/;"	f	class:Initializer
getUseLimiter	initializer.h	/^	bool getUseLimiter() const {return m_iUseLimiter;}$/;"	f	class:Initializer
getVelError0	particle_data.h	/^        const double* const getVelError0() const {return m_vVelError0;}$/;"	f	class:ParticleData
getVelError1	particle_data.h	/^        const double* const getVelError1() const {return m_vVelError1;}$/;"	f	class:ParticleData
getVelocityU	initializer.h	/^	double* getVelocityU() const {return m_vVelocityU;}$/;"	f	class:Initializer
getVelocityU	particle_data.h	/^	const double* const getVelocityU() const {return m_vVelocityU;}$/;"	f	class:ParticleData
getVelocityV	initializer.h	/^	double* getVelocityV() const {return m_vVelocityV;}$/;"	f	class:Initializer
getVelocityV	particle_data.h	/^	const double* const getVelocityV() const {return m_vVelocityV;}$/;"	f	class:ParticleData
getVelocityW	initializer.h	/^	double* getVelocityW() const {return m_vVelocityW;}$/;"	f	class:Initializer
getVelocityW	particle_data.h	/^	const double* const getVelocityW() const {return m_vVelocityW;}$/;"	f	class:ParticleData
getVolume	initializer.h	/^	double* getVolume() const {return m_vVolume;}$/;"	f	class:Initializer
getVolume	particle_data.h	/^	const double* const getVolume() const {return m_vVolume;}$/;"	f	class:ParticleData
getVolumeOld	particle_data.h	/^	const double* const getVolumeOld() const {return m_vVolumeOld;}$/;"	f	class:ParticleData
getVolumeVoronoi	particle_data.h	/^	const double* const getVolumeVoronoi() const {return m_vVolumeVoronoi;}$/;"	f	class:ParticleData
getVolume_x	particle_data.h	/^        const double* const getVolume_x() const {return m_vVolume_x;}$/;"	f	class:ParticleData
getVolume_y	particle_data.h	/^        const double* const getVolume_y() const {return m_vVolume_y;}$/;"	f	class:ParticleData
getVolume_z	particle_data.h	/^        const double* const getVolume_z() const {return m_vVolume_z;}$/;"	f	class:ParticleData
getVolumetx	particle_data.h	/^	const double* const getVolumetx() const {return m_vVolumetx;}$/;"	f	class:ParticleData
getVolumety	particle_data.h	/^        const double* const getVolumety() const {return m_vVolumety;}$/;"	f	class:ParticleData
getVtx	particle_data.h	/^        const double* const getVtx() const {return m_vVtx;}$/;"	f	class:ParticleData
getVty	particle_data.h	/^        const double* const getVty() const {return m_vVty;}$/;"	f	class:ParticleData
getVxl	particle_data.h	/^        const double* const getVxl() const {return m_vVxl;}$/;"	f	class:ParticleData
getVxr	particle_data.h	/^        const double* const getVxr() const {return m_vVxr;}$/;"	f	class:ParticleData
getVyl	particle_data.h	/^        const double* const getVyl() const {return m_vVyl;}$/;"	f	class:ParticleData
getVyr	particle_data.h	/^        const double* const getVyr() const {return m_vVyr;}$/;"	f	class:ParticleData
getWriteStep	initializer.h	/^	double getWriteStep() const {return m_iWriteStep;}$/;"	f	class:Initializer
getWriteTimeInterval	initializer.h	/^	double getWriteTimeInterval() const {return m_fWriteTimeInterval;}$/;"	f	class:Initializer
getXmax	initializer.h	/^	double getXmax() {return m_fXmax;}$/;"	f	class:BoundingBox
getXmin	initializer.h	/^	double getXmin() {return m_fXmin;}$/;"	f	class:BoundingBox
getYmax	initializer.h	/^	double getYmax() {return m_fYmax;}$/;"	f	class:BoundingBox
getYmin	initializer.h	/^	double getYmin() {return m_fYmin;}$/;"	f	class:BoundingBox
getZNe	initializer.h	/^        int getZNe() {return ZNe;}$/;"	f	class:Initializer
getZNe	particle_data.h	/^	int getZNe() {return ZNe;}$/;"	f	class:ParticleData
getZmax	initializer.h	/^	double getZmax() {return m_fZmax;}$/;"	f	class:BoundingBox
getZmin	initializer.h	/^	double getZmin() {return m_fZmin;}$/;"	f	class:BoundingBox
getconductivity	initializer.h	/^        double getconductivity() {return conductivity;}$/;"	f	class:Initializer
getconductivity	particle_data.h	/^	double getconductivity() {return conductivity;}$/;"	f	class:ParticleData
getheatK	initializer.h	/^        double getheatK() {return heatK;}$/;"	f	class:Initializer
getheatK	particle_data.h	/^	double getheatK() {return heatK;}$/;"	f	class:ParticleData
getmassNe	initializer.h	/^        double getmassNe() {return massNe;}$/;"	f	class:Initializer
getmassNe	particle_data.h	/^	double getmassNe() {return massNe;}$/;"	f	class:ParticleData
getmasse	initializer.h	/^        double getmasse() {return masse;}$/;"	f	class:Initializer
getmasse	particle_data.h	/^	double getmasse() {return masse;}$/;"	f	class:ParticleData
getneinf	initializer.h	/^        double getneinf() {return neinf;}$/;"	f	class:Initializer
getneinf	particle_data.h	/^	double getneinf() {return neinf;}$/;"	f	class:ParticleData
getsublimationenergy	initializer.h	/^        double getsublimationenergy() {return sublimationenergy;}$/;"	f	class:Initializer
getsublimationenergy	particle_data.h	/^	double getsublimationenergy() {return sublimationenergy;}$/;"	f	class:ParticleData
getteinf	initializer.h	/^        double getteinf() {return teinf;}$/;"	f	class:Initializer
getteinf	particle_data.h	/^	double getteinf() {return teinf;}$/;"	f	class:ParticleData
h_r	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, h_r;$/;"	m	class:HexagonalPacking2D
h_r	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
heatK	initializer.h	/^        double heatK;$/;"	m	class:Initializer
heatK	particle_data.h	/^	double heatK;$/;"	m	class:ParticleData
height	geometry/geometry_powder_target.h	/^	double height;$/;"	m	class:PowderTarget2D
height	geometry/geometry_powder_target_3d.h	/^	double height;$/;"	m	class:PowderTarget3D
incone_test	octree.cpp	/^inline bool incone_test(const double a_x, const double a_y, const double a_z, const double b_x, const double b_y, const double b_z, const int dir){$/;"	f
incone_test	octree.cpp	/^inline bool incone_test(const double a_x, const double a_y, const double b_x, const double b_y, const double alpha, const double beta){$/;"	f
index	octree.h	/^  int index;$/;"	m	struct:KeyIndex
index	octree.h	/^  int index;$/;"	m	struct:KeyIndex_integral
index	octree.h	/^  int index;$/;"	m	struct:SearchResult
initGeometryAndState	initializer.cpp	/^void Initializer::initGeometryAndState() {$/;"	f	class:Initializer
initGeometryAndState1D	initializer.cpp	/^size_t Initializer::initGeometryAndState1D(bool saveData) {$/;"	f	class:Initializer
initGeometryAndStateOnHexPacking	initializer.cpp	/^size_t Initializer::initGeometryAndStateOnHexPacking(bool saveData) {$/;"	f	class:Initializer
initGeometryAndStateOnHexPackingTemp	initializer.cpp	/^size_t Initializer::initGeometryAndStateOnHexPackingTemp(bool saveData) {$/;"	f	class:Initializer
initGeometryAndStateOnRandomDistribution	initializer.cpp	/^size_t Initializer::initGeometryAndStateOnRandomDistribution(bool saveData){$/;"	f	class:Initializer
initParticleDataMemory	initializer.cpp	/^void Initializer::initParticleDataMemory() {$/;"	f	class:Initializer
initPellet	geometry/geometry.h	/^    virtual void initPellet(Initializer* init){}	$/;"	f	class:Geometry
initPellet	geometry/geometry_pellet.cpp	/^void MultiPelletLayer::initPellet(Initializer* init){$/;"	f	class:MultiPelletLayer
innerradius	geometry/geometry_pellet.h	/^	double innerradius;$/;"	m	class:PelletLayer
innerradius	geometry/geometry_pellet.h	/^        double* innerradius;$/;"	m	class:MultiPelletLayer
instance	boundary/boundary.cpp	/^BoundaryFactory& BoundaryFactory::instance() { $/;"	f	class:BoundaryFactory
instance	geometry/geometry.cpp	/^GeometryFactory& GeometryFactory::instance() { $/;"	f	class:GeometryFactory
instance	state/state.cpp	/^StateFactory& StateFactory::instance() { \/\/ singleton$/;"	f	class:StateFactory
int32_t	neighbour_searcher.h	/^typedef __int32 int32_t; $/;"	t
int32_t	octree.h	/^typedef __int32 int32_t; $/;"	t
int64_t	neighbour_searcher.h	/^typedef __int64 int64_t; $/;"	t
int64_t	octree.h	/^typedef __int64 int64_t; $/;"	t
ip2d	boundary/boundary_dambreak.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return (x1*x2+y1*y2)*(x1*x2+y1*y2)\/(x1*x1+x2*x2)\/(y1*y1+y2*y2);}\/\/\/< normalized inner product 2d$/;"	f	class:DamBreak2DBoundary
ip2d	boundary/boundary_nozzle.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Nozzle2DSolidBoundary
ip2d	boundary/boundary_nozzle.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Nozzle3DSimpleSolidBoundary
ip2d	boundary/boundary_nozzle.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Nozzle2DBNLSolidBoundary
ip2d	boundary/boundary_nozzle.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Nozzle3DBNLSolidBoundary
ip2d	boundary/boundary_nozzle.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Nozzle3DSolidBoundary
ip2d	boundary/boundary_nozzle.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Nozzle3DSolidRightBoundary
ip2d	boundary/boundary_powder_target.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:PowderTarget2DSolidBoundary
ip2d	boundary/boundary_powder_target_3d.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:PowderTarget3DSolidBoundary
ip2d	boundary/boundary_rayleightaylor.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return (x1*x2+y1*y2)*(x1*x2+y1*y2)\/(x1*x1+x2*x2)\/(y1*y1+y2*y2);}\/\/\/< normalized inner product 2d$/;"	f	class:RayleighTaylor2DBoundary
ip2d	boundary/boundary_solid_gresho.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Gresho2DSolidBoundary
ip2d	boundary/boundary_solid_gresho.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Sedov2DSolidBoundary
ip2d	boundary/boundary_solid_gresho.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Yee2DSolidBoundary
ip2d	boundary/boundary_solid_gresho.h	/^        double ip2d(double x1, double y1, double x2, double y2) {return x1*x2+y1*y2;}\/\/\/< inner product 2d$/;"	f	class:Yee3DSolidBoundary
ip2d	boundary/boundary_solid_shocktube.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return (x1*x2+y1*y2)*(x1*x2+y1*y2)\/(x1*x1+x2*x2)\/(y1*y1+y2*y2);}\/\/\/< normalized inner product 2d$/;"	f	class:Shocktube2DSolidBoundary
ip2d	boundary/boundary_solid_tpshocktube.h	/^	double ip2d(double x1, double y1, double x2, double y2) {return (x1*x2+y1*y2)*(x1*x2+y1*y2)\/(x1*x1+x2*x2)\/(y1*y1+y2*y2);}\/\/\/< normalized inner product 2d$/;"	f	class:TPShocktube2DSolidBoundary
ip3d	boundary/boundary_powder_target_3d.h	/^	double ip3d(double x1, double y1, double z1, double x2, double y2, double z2){ return x1*x2 + y1*y2 + z1*z2;} \/\/ inner product 3d$/;"	f	class:PowderTarget3DSolidBoundary
isDecomposed	ls_solver.h	/^	bool isDecomposed;\/\/\/< if true then the matrix A is decomposed into QR already; if false otherwise$/;"	m	class:QRSolver
is_node_intersect_search_region	octree.cpp	/^inline bool is_node_intersect_search_region(const double min_x, const double max_x, const double min_y, const double max_y, const double min_z, const double max_z, const double& search_x, const double& search_y, const double& search_z, const double& radius) {$/;"	f
is_node_intersect_search_region	octree.cpp	/^inline bool is_node_intersect_search_region(const double min_x, const double max_x, const double min_y, const double max_y, const double min_z, const double max_z, const double& search_x, const double& search_y, const double& search_z, const double& radius, const double alpha, const double beta) {$/;"	f
is_node_intersect_search_region	octree.cpp	/^inline bool is_node_intersect_search_region(const double min_x, const double max_x, const double min_y, const double max_y, const double min_z, const double max_z, const double& search_x, const double& search_y, const double& search_z, const double& radius, int dir) {$/;"	f
k	geometry/geometry_nozzle.h	/^	double k;$/;"	m	class:Nozzle2D
k	geometry/geometry_nozzle.h	/^        double k;$/;"	m	class:Nozzle2DRothe
k	geometry/geometry_nozzle.h	/^        double k;$/;"	m	class:Nozzle3D
k	geometry/geometry_nozzle.h	/^        double k;$/;"	m	class:Nozzle3DRothe
key	octree.h	/^  double key;\/\/Should be a 32\/64 bit integer. With a 32 bit integer we can use Octrees of depth 10. With a 64 bit integer we can use octrees of depth 20.$/;"	m	struct:KeyIndex_integral
key	octree.h	/^  uint64_t key;\/\/Should be a 32\/64 bit integer. With a 32 bit integer we can use Octrees of depth 10. With a 64 bit integer we can use octrees of depth 20.$/;"	m	struct:KeyIndex
l0	hexagonal_packing.h	/^	size_t l0,l1;$/;"	m	class:HexagonalPacking3D
l1	hexagonal_packing.h	/^	size_t l0,l1;$/;"	m	class:HexagonalPacking3D
lb	boundary/boundary_dambreak.h	/^	double lb; \/\/\/< left boundary$/;"	m	class:DamBreak2DBoundary
lb	boundary/boundary_kelvinhelmholtz.h	/^	double lb; \/\/\/< left boundary$/;"	m	class:KelvinHelmholtz2DBoundary
lb	boundary/boundary_rayleightaylor.h	/^	double lb; \/\/\/< left boundary$/;"	m	class:RayleighTaylor2DBoundary
lb	boundary/boundary_rayleightaylor3d.h	/^        double lb; \/\/\/< left boundary$/;"	m	class:RayleighTaylor3DBoundary
lb	boundary/boundary_rayleightaylor_periodic.h	/^	double lb; \/\/\/< left boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
lb	boundary/boundary_solid_shocktube.h	/^	double lb; \/\/\/< left boundary$/;"	m	class:Shocktube2DSolidBoundary
lb	boundary/boundary_solid_shocktube3d.h	/^        double lb; \/\/\/< left boundary$/;"	m	class:Shocktube3D0005SolidBoundary
lb	boundary/boundary_solid_shocktube3d.h	/^        double lb; \/\/\/< left boundary$/;"	m	class:Shocktube3D0025SolidBoundary
lb	boundary/boundary_solid_shocktube3d.h	/^        double lb; \/\/\/< left boundary$/;"	m	class:Shocktube3DSolidBoundary
lb	boundary/boundary_solid_tpshocktube.h	/^	double lb; \/\/\/< left boundary$/;"	m	class:TPShocktube2DSolidBoundary
lbl	boundary/boundary_kelvinhelmholtz.h	/^	double lbl; \/\/\/< left buffer limit$/;"	m	class:KelvinHelmholtz2DBoundary
lbl	boundary/boundary_rayleightaylor_periodic.h	/^	double lbl; \/\/\/< left buffer limit$/;"	m	class:RayleighTaylorPeriodic2DBoundary
lbo	boundary/boundary_dambreak.h	/^	double lbo; \/\/\/< outer left boundary$/;"	m	class:DamBreak2DBoundary
lbo	boundary/boundary_kelvinhelmholtz.h	/^	double lbo; \/\/\/< outer left boundary$/;"	m	class:KelvinHelmholtz2DBoundary
lbo	boundary/boundary_rayleightaylor.h	/^	double lbo; \/\/\/< outer left boundary$/;"	m	class:RayleighTaylor2DBoundary
lbo	boundary/boundary_rayleightaylor3d.h	/^        double lbo; \/\/\/< outer left boundary$/;"	m	class:RayleighTaylor3DBoundary
lbo	boundary/boundary_rayleightaylor_periodic.h	/^	double lbo; \/\/\/< outer left boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
lbo	boundary/boundary_solid_shocktube.h	/^	double lbo; \/\/\/< outer left boundary$/;"	m	class:Shocktube2DSolidBoundary
lbo	boundary/boundary_solid_shocktube3d.h	/^        double lbo; \/\/\/< outer left boundary$/;"	m	class:Shocktube3D0005SolidBoundary
lbo	boundary/boundary_solid_shocktube3d.h	/^        double lbo; \/\/\/< outer left boundary$/;"	m	class:Shocktube3D0025SolidBoundary
lbo	boundary/boundary_solid_shocktube3d.h	/^        double lbo; \/\/\/< outer left boundary$/;"	m	class:Shocktube3DSolidBoundary
lbo	boundary/boundary_solid_tpshocktube.h	/^	double lbo; \/\/\/< outer left boundary$/;"	m	class:TPShocktube2DSolidBoundary
left	boundary/boundary_nozzle.h	/^	double left;$/;"	m	class:NozzleInflowBoundary
left	boundary/boundary_nozzle.h	/^        double left;$/;"	m	class:Nozzle3DInflowBoundary
left	boundary/boundary_nozzle.h	/^        double left;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
left	boundary/boundary_nozzle.h	/^        double left;$/;"	m	class:NozzleInflowFixPressureBoundary
left	geometry/geometry_nozzle.h	/^	double left;$/;"	m	class:Nozzle2DSimple
left	geometry/geometry_nozzle.h	/^        double left;$/;"	m	class:Nozzle2D
left	geometry/geometry_nozzle.h	/^        double left;$/;"	m	class:Nozzle2DRothe
left	geometry/geometry_nozzle.h	/^        double left;$/;"	m	class:Nozzle3D
left	geometry/geometry_nozzle.h	/^        double left;$/;"	m	class:Nozzle3DRothe
leftLen	geometry/geometry_1d.h	/^	double leftLen; \/\/\/< length on the left of zero$/;"	m	class:Line
left_test	octree.cpp	/^inline bool left_test(const double a_x, const double a_y, const double b_x, const double b_y, const double c_x, const double c_y) {$/;"	f
length	boundary/boundary_powder_target_3d.h	/^	double length; \/\/ container length$/;"	m	class:PowderTarget3DSolidBoundary
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet1D
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet2D
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet2DExpansion
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet2DMerge
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet2DMergeLower
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet2DMergeUpper
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet3D
length	geometry/geometry_jet.h	/^	double length;$/;"	m	class:Jet3DExpansion
length	geometry/geometry_jet.h	/^        double length;$/;"	m	class:Jet1DCenter
length	geometry/geometry_jet.h	/^        double length;$/;"	m	class:Jet1DLeft
length	geometry/geometry_jet.h	/^        double length;$/;"	m	class:Jet1DRight
length	geometry/geometry_nozzle.h	/^        double length;$/;"	m	class:Nozzle2D
length	geometry/geometry_nozzle.h	/^        double length;$/;"	m	class:Nozzle2DRothe
length	geometry/geometry_nozzle.h	/^        double length;$/;"	m	class:Nozzle2DSimple
length	geometry/geometry_nozzle.h	/^        double length;$/;"	m	class:Nozzle3D
length	geometry/geometry_nozzle.h	/^        double length;$/;"	m	class:Nozzle3DRothe
length	geometry/geometry_powder_target_3d.h	/^	double length;$/;"	m	class:PowderTarget3D
length	geometry/geometry_random.h	/^	double length;$/;"	m	class:Uniform3D
lengthX	boundary/boundary_dambreak.h	/^	double lengthX;$/;"	m	class:DamBreak2DBoundary
lengthX	boundary/boundary_kelvinhelmholtz.h	/^	double lengthX;$/;"	m	class:KelvinHelmholtz2DBoundary
lengthX	boundary/boundary_rayleightaylor.h	/^	double lengthX;$/;"	m	class:RayleighTaylor2DBoundary
lengthX	boundary/boundary_rayleightaylor3d.h	/^        double lengthX;$/;"	m	class:RayleighTaylor3DBoundary
lengthX	boundary/boundary_rayleightaylor_periodic.h	/^	double lengthX;$/;"	m	class:RayleighTaylorPeriodic2DBoundary
lengthX	boundary/boundary_solid_shocktube.h	/^	double lengthX;$/;"	m	class:Shocktube2DSolidBoundary
lengthX	boundary/boundary_solid_shocktube3d.h	/^        double lengthX;$/;"	m	class:Shocktube3D0005SolidBoundary
lengthX	boundary/boundary_solid_shocktube3d.h	/^        double lengthX;$/;"	m	class:Shocktube3D0025SolidBoundary
lengthX	boundary/boundary_solid_shocktube3d.h	/^        double lengthX;$/;"	m	class:Shocktube3DSolidBoundary
lengthX	boundary/boundary_solid_tpshocktube.h	/^	double lengthX;$/;"	m	class:TPShocktube2DSolidBoundary
lengthX	geometry/geometry_shocktube.h	/^	double lengthX;$/;"	m	class:Shocktube2D
lengthX	geometry/geometry_shocktube.h	/^	double lengthX;$/;"	m	class:TPShocktube2D
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:BigShocktube2D
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:BoundaryTest2D
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:DamBreak2D
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:KelvinHelmholtz2D
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:RayleighTaylor2D
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:Shocktube2DLeft
lengthX	geometry/geometry_shocktube.h	/^        double lengthX;$/;"	m	class:Shocktube2DRight
lengthX	geometry/geometry_shocktube3d.h	/^        double lengthX;$/;"	m	class:RayleighTaylor3D
lengthX	geometry/geometry_shocktube3d.h	/^        double lengthX;$/;"	m	class:Shocktube3D
lengthX	geometry/geometry_shocktube3d.h	/^        double lengthX;$/;"	m	class:Shocktube3D0005
lengthX	geometry/geometry_shocktube3d.h	/^        double lengthX;$/;"	m	class:Shocktube3D0025
lengthY	boundary/boundary_dambreak.h	/^	double lengthY;	$/;"	m	class:DamBreak2DBoundary
lengthY	boundary/boundary_kelvinhelmholtz.h	/^	double lengthY;	$/;"	m	class:KelvinHelmholtz2DBoundary
lengthY	boundary/boundary_rayleightaylor.h	/^	double lengthY;	$/;"	m	class:RayleighTaylor2DBoundary
lengthY	boundary/boundary_rayleightaylor3d.h	/^        double lengthY;$/;"	m	class:RayleighTaylor3DBoundary
lengthY	boundary/boundary_rayleightaylor_periodic.h	/^	double lengthY;	$/;"	m	class:RayleighTaylorPeriodic2DBoundary
lengthY	boundary/boundary_solid_shocktube.h	/^	double lengthY;	$/;"	m	class:Shocktube2DSolidBoundary
lengthY	boundary/boundary_solid_shocktube3d.h	/^        double lengthY;$/;"	m	class:Shocktube3D0005SolidBoundary
lengthY	boundary/boundary_solid_shocktube3d.h	/^        double lengthY;$/;"	m	class:Shocktube3D0025SolidBoundary
lengthY	boundary/boundary_solid_shocktube3d.h	/^        double lengthY;$/;"	m	class:Shocktube3DSolidBoundary
lengthY	boundary/boundary_solid_tpshocktube.h	/^	double lengthY;	$/;"	m	class:TPShocktube2DSolidBoundary
lengthY	geometry/geometry_shocktube.h	/^	double lengthY;$/;"	m	class:Shocktube2D
lengthY	geometry/geometry_shocktube.h	/^	double lengthY;$/;"	m	class:TPShocktube2D
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:BigShocktube2D
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:BoundaryTest2D
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:DamBreak2D
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:KelvinHelmholtz2D
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:RayleighTaylor2D
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:Shocktube2DLeft
lengthY	geometry/geometry_shocktube.h	/^        double lengthY;$/;"	m	class:Shocktube2DRight
lengthY	geometry/geometry_shocktube3d.h	/^        double lengthY;$/;"	m	class:RayleighTaylor3D
lengthY	geometry/geometry_shocktube3d.h	/^        double lengthY;$/;"	m	class:Shocktube3D
lengthY	geometry/geometry_shocktube3d.h	/^        double lengthY;$/;"	m	class:Shocktube3D0005
lengthY	geometry/geometry_shocktube3d.h	/^        double lengthY;$/;"	m	class:Shocktube3D0025
lengthZ	boundary/boundary_rayleightaylor3d.h	/^        double lengthZ;$/;"	m	class:RayleighTaylor3DBoundary
lengthZ	boundary/boundary_solid_shocktube3d.h	/^	double lengthZ;$/;"	m	class:Shocktube3D0005SolidBoundary
lengthZ	boundary/boundary_solid_shocktube3d.h	/^	double lengthZ;$/;"	m	class:Shocktube3D0025SolidBoundary
lengthZ	boundary/boundary_solid_shocktube3d.h	/^	double lengthZ;$/;"	m	class:Shocktube3DSolidBoundary
lengthZ	geometry/geometry_shocktube3d.h	/^	double lengthZ;$/;"	m	class:Shocktube3D
lengthZ	geometry/geometry_shocktube3d.h	/^	double lengthZ;$/;"	m	class:Shocktube3D0005
lengthZ	geometry/geometry_shocktube3d.h	/^	double lengthZ;$/;"	m	class:Shocktube3D0025
lengthZ	geometry/geometry_shocktube3d.h	/^        double lengthZ;$/;"	m	class:RayleighTaylor3D
m0	hexagonal_packing.h	/^	size_t m0, m1, n0_odd, n1_odd, n0_even, n1_even;	$/;"	m	class:HexagonalPacking2D
m0_even	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
m0_odd	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
m1	hexagonal_packing.h	/^	size_t m0, m1, n0_odd, n1_odd, n0_even, n1_even;	$/;"	m	class:HexagonalPacking2D
m1_even	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
m1_odd	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
m_bLeftInflow	particle_data.h	/^	bool* m_bLeftInflow;$/;"	m	class:ParticleData
m_dBoundingBox_max_x	octree.h	/^  double m_dBoundingBox_max_x ;$/;"	m	class:Octree
m_dBoundingBox_max_y	octree.h	/^  double m_dBoundingBox_max_y ;$/;"	m	class:Octree
m_dBoundingBox_max_z	octree.h	/^  double m_dBoundingBox_max_z ;$/;"	m	class:Octree
m_dBoundingBox_min_x	octree.h	/^  double m_dBoundingBox_min_x ;$/;"	m	class:Octree
m_dBoundingBox_min_y	octree.h	/^  double m_dBoundingBox_min_y ;$/;"	m	class:Octree
m_dBoundingBox_min_z	octree.h	/^  double m_dBoundingBox_min_z ;$/;"	m	class:Octree
m_fAdditionalCapacity	initializer.h	/^	std::size_t m_fAdditionalCapacity; \/\/< how many additional capacity is besides m_fTimesCapacity*(m_iFluidNum+m_iBoundaryNum)$/;"	m	class:Initializer
m_fAngle	state/state_jet.h	/^	double m_fAngle; \/\/ angle of proton beam$/;"	m	class:Jet3DState
m_fAvgParticleSpacing	lp_solver.h	/^	double m_fAvgParticleSpacing; \/\/\/< the average particle spacing$/;"	m	class:HyperbolicLPSolver
m_fAvgParticleSpacing	time_controller.h	/^        double m_fAvgParticleSpacing; \/\/\/< the average particle spacing$/;"	m	class:TimeController
m_fBoundaryTime	lp_solver.h	/^	double m_fBoundaryTime;\/\/\/< CPU time to generate or update boundary (solid, ghost, periodic, inflow, outflow)particles$/;"	m	class:HyperbolicLPSolver
m_fCFLCoeff	initializer.h	/^	double m_fCFLCoeff;\/\/\/< CFL coeff$/;"	m	class:Initializer
m_fCFLCoeff	time_controller.h	/^	double m_fCFLCoeff; \/\/\/< a multiplier term which is between 0 and 1	used to shrink time stepping$/;"	m	class:DefaultTimeController
m_fCenX	state/state.h	/^	double m_fCenX, m_fCenY, m_fCenZ; \/\/\/< center of disk\/sphere$/;"	m	class:UniformVelocityState
m_fCenY	state/state.h	/^	double m_fCenX, m_fCenY, m_fCenZ; \/\/\/< center of disk\/sphere$/;"	m	class:UniformVelocityState
m_fCenZ	state/state.h	/^	double m_fCenX, m_fCenY, m_fCenZ; \/\/\/< center of disk\/sphere$/;"	m	class:UniformVelocityState
m_fContactLength	initializer.h	/^	double m_fContactLength;\/\/\/< defined length such that for two fluid particles from different fluid object, if the distance from each other is shorter than the length the two fluid particles start to interact with each other$/;"	m	class:Initializer
m_fDelta	state/state_shocktube.h	/^        double m_fDen1, m_fDen2, m_fVel1, m_fVel2, m_fDelta, m_fDeltay;$/;"	m	class:KelvinHelmholtz2DState
m_fDeltay	state/state_shocktube.h	/^        double m_fDen1, m_fDen2, m_fVel1, m_fVel2, m_fDelta, m_fDeltay;$/;"	m	class:KelvinHelmholtz2DState
m_fDen	state/state.h	/^	double m_fDen; \/\/\/< density$/;"	m	class:GaussianPressureState
m_fDen	state/state.h	/^	double m_fDen; \/\/\/< density$/;"	m	class:UniformVelocityState
m_fDen	state/state_1d.h	/^	double m_fDen; \/\/\/< density$/;"	m	class:GaussianPressure1DState
m_fDen	state/state_ballexp.h	/^	double m_fDen;$/;"	m	class:Ballexp3DState
m_fDen	state/state_ballexp.h	/^        double m_fDen;$/;"	m	class:Ballpressurewave3DState
m_fDen	state/state_ballexp.h	/^        double m_fDen;$/;"	m	class:Ballrotate3DState
m_fDen	state/state_collision.h	/^	double m_fDen;$/;"	m	class:LeftUniformVelocityState
m_fDen	state/state_collision.h	/^	double m_fDen;$/;"	m	class:RightUniformVelocityState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet1DState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet2DCollisionState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet2DExpansionState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet2DMergeLowerState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet2DMergeState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet2DMergeUpperState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet3DExpansionState
m_fDen	state/state_jet.h	/^	double m_fDen;$/;"	m	class:Jet3DState
m_fDen	state/state_jet.h	/^        double m_fDen;$/;"	m	class:Jet1DCenterState
m_fDen	state/state_jet.h	/^        double m_fDen;$/;"	m	class:Jet1DLaterState
m_fDen	state/state_jet.h	/^        double m_fDen;$/;"	m	class:Jet1DLeftState
m_fDen	state/state_jet.h	/^        double m_fDen;$/;"	m	class:Jet1DRightState
m_fDen	state/state_nozzle.h	/^        double m_fDen;$/;"	m	class:NozzleRotheState
m_fDen	state/state_nozzle.h	/^        double m_fDen;$/;"	m	class:NozzleState
m_fDen	state/state_pellet.h	/^	double m_fDen;$/;"	m	class:PelletState
m_fDen	state/state_shocktube.h	/^        double m_fDen;$/;"	m	class:BoundaryTest2DState
m_fDen	state/state_shocktube.h	/^        double m_fDen;$/;"	m	class:DamBreak2DState
m_fDen1	state/state_shocktube.h	/^	double m_fDen1, m_fDen2, m_fDen3;	$/;"	m	class:TPShocktube2DState
m_fDen1	state/state_shocktube.h	/^        double m_fDen1, m_fDen2, m_fVel1, m_fVel2, m_fDelta, m_fDeltay;$/;"	m	class:KelvinHelmholtz2DState
m_fDen2	state/state_shocktube.h	/^	double m_fDen1, m_fDen2, m_fDen3;	$/;"	m	class:TPShocktube2DState
m_fDen2	state/state_shocktube.h	/^        double m_fDen1, m_fDen2, m_fVel1, m_fVel2, m_fDelta, m_fDeltay;$/;"	m	class:KelvinHelmholtz2DState
m_fDen3	state/state_shocktube.h	/^	double m_fDen1, m_fDen2, m_fDen3;	$/;"	m	class:TPShocktube2DState
m_fDenL	state/state_shocktube.h	/^	double m_fDenL, m_fDenR;	$/;"	m	class:NormalShock2DState
m_fDenL	state/state_shocktube.h	/^	double m_fDenL, m_fDenR;	$/;"	m	class:Shocktube2DState
m_fDenL	state/state_shocktube.h	/^        double m_fDenL, m_fDenR;$/;"	m	class:SodShocktube2DLaterState
m_fDenL	state/state_shocktube.h	/^        double m_fDenL, m_fDenR;$/;"	m	class:SodShocktube2DState
m_fDenL	state/state_shocktube.h	/^        double m_fDenL;$/;"	m	class:SimpleWave2DState
m_fDenL	state/state_shocktube.h	/^        double m_fDenU, m_fDenL;$/;"	m	class:RayleighTaylor2DState
m_fDenL	state/state_shocktube.h	/^        double m_fDenU, m_fDenL;$/;"	m	class:RayleighTaylor3DState
m_fDenPost	state/state_jet.h	/^	double m_fDenPost;$/;"	m	class:Jet1DLaterState
m_fDenR	state/state_shocktube.h	/^	double m_fDenL, m_fDenR;	$/;"	m	class:NormalShock2DState
m_fDenR	state/state_shocktube.h	/^	double m_fDenL, m_fDenR;	$/;"	m	class:Shocktube2DState
m_fDenR	state/state_shocktube.h	/^        double m_fDenL, m_fDenR;$/;"	m	class:SodShocktube2DLaterState
m_fDenR	state/state_shocktube.h	/^        double m_fDenL, m_fDenR;$/;"	m	class:SodShocktube2DState
m_fDenU	state/state_shocktube.h	/^        double m_fDenU, m_fDenL;$/;"	m	class:RayleighTaylor2DState
m_fDenU	state/state_shocktube.h	/^        double m_fDenU, m_fDenL;$/;"	m	class:RayleighTaylor3DState
m_fDensity	state/state_gresho.h	/^	double m_fDensity;	$/;"	m	class:Gresho2DState
m_fDensity	state/state_gresho.h	/^	double m_fDensity;$/;"	m	class:ConvergentShock2DState
m_fDt	lp_solver.h	/^	double m_fDt; \/\/\/< the time length of this iteration $/;"	m	class:HyperbolicLPSolver
m_fDt	time_controller.h	/^	double m_fDt; \/\/\/< The physical time interval between two iterations of the simulation$/;"	m	class:TimeController
m_fEinf	eos.h	/^	double m_fEinf; \/\/\/< The parameter energy infinity$/;"	m	class:StiffPolytropicGasEOS
m_fEinf	initializer.h	/^	double m_fEinf;\/\/\/<eos parameter einf (stiffened poly gas) 	$/;"	m	class:Initializer
m_fEndTime	initializer.h	/^	double m_fEndTime; \/\/\/< simulation end time	$/;"	m	class:Initializer
m_fEndTime	time_controller.h	/^	double m_fEndTime; \/\/\/< End physical time of simulation$/;"	m	class:TimeController
m_fG	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLength, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor2DState
m_fG	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLengthX, m_fWaveLengthY, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor3DState
m_fG	state/state_shocktube.h	/^        double m_fPressure, m_fYLength, m_fG;$/;"	m	class:BoundaryTest2DState
m_fG	state/state_shocktube.h	/^        double m_fPressure, m_fYLength, m_fG;$/;"	m	class:DamBreak2DState
m_fGamma	eos.h	/^	double m_fGamma; \/\/\/< The parameter \\e gamma$/;"	m	class:PolytropicGasEOS
m_fGamma	eos.h	/^	double m_fGamma; \/\/\/< The parameter \\e gamma$/;"	m	class:SahaEOS
m_fGamma	eos.h	/^	double m_fGamma; \/\/\/< The parameter \\e gamma$/;"	m	class:StiffPolytropicGasEOS
m_fGamma	initializer.h	/^	double m_fGamma;\/\/\/< eos parameter gamma$/;"	m	class:Initializer
m_fGamma	state/state_shocktube.h	/^	double m_fGamma;$/;"	m	class:SimpleWave2DState
m_fGravity	initializer.h	/^	double m_fGravity;\/\/\/< gravity$/;"	m	class:Initializer
m_fGravity	lp_solver.h	/^	double m_fGravity; \/\/\/< Gravity $/;"	m	class:HyperbolicLPSolver
m_fITime	state/state_shocktube.h	/^	double m_fITime;$/;"	m	class:SimpleWave2DState
m_fInitParticleSpacing	initializer.h	/^	double m_fInitParticleSpacing;\/\/\/< the initial particle spacing	$/;"	m	class:Initializer
m_fInitParticleSpacing	lp_solver.h	/^    double m_fInitParticleSpacing;\/\/< the initial particle spacing for uniform density $/;"	m	class:HyperbolicLPSolver
m_fInitialPerturbation	hexagonal_packing.h	/^	double m_fInitialPerturbation;	$/;"	m	class:HexagonalPacking2D
m_fInitialPerturbation	hexagonal_packing.h	/^	double m_fInitialPerturbation;	$/;"	m	class:HexagonalPacking3D
m_fInitialPerturbation	initializer.h	/^	double m_fInitialPerturbation;\/\/<amount of maximal initial perturbation in dx$/;"	m	class:Initializer
m_fInvalidDensity	initializer.h	/^	double m_fInvalidDensity;\/\/\/< volume cannot be negative: if volume < invalid volume => invalid state	$/;"	m	class:Initializer
m_fInvalidDensity	lp_solver.h	/^	double m_fInvalidDensity; \/\/\/< volume cannot be negative: if volume < invalid volume => invalid state$/;"	m	class:HyperbolicLPSolver
m_fInvalidPressure	initializer.h	/^	double m_fInvalidPressure;\/\/\/< if p < invalid pressure => invalid state$/;"	m	class:Initializer
m_fInvalidPressure	lp_solver.h	/^	double m_fInvalidPressure; \/\/\/< if p < invalid pressure => invalid state$/;"	m	class:HyperbolicLPSolver
m_fLimitR	ls_solver.h	/^	double m_fLimitR;\/\/\/< A specified scalar multiplier (<1) for trimming diagonal entry of R in the QR decomposition$/;"	m	class:QRSolver
m_fMagnitude	state/state_jet.h	/^	double m_fMagnitude; \/\/ magnitude of perturbation on initial pressure$/;"	m	class:Jet3DState
m_fMagnitude	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLength, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor2DState
m_fMagnitude	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLengthX, m_fWaveLengthY, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor3DState
m_fMaxFluidVelocity	lp_solver.h	/^	double m_fMaxFluidVelocity; \/\/\/< Maximum absolute value velocity of fluid particles at a time step$/;"	m	class:LPSolver
m_fMaxSoundSpeed	lp_solver.h	/^	double m_fMaxSoundSpeed; \/\/\/< Maximum sound speed of fluid particles at a time step	$/;"	m	class:LPSolver
m_fMinCFL	lp_solver.h	/^	double m_fMinCFL;$/;"	m	class:LPSolver
m_fMinParticleSpacing	lp_solver.h	/^	double m_fMinParticleSpacing; \/\/\/< Minimum inter-particle spacing among fluid particles at a time step		$/;"	m	class:LPSolver
m_fNeiSearchRadius	initializer.h	/^	double m_fNeiSearchRadius;\/\/\/< the radius for neighbour search$/;"	m	class:Initializer
m_fNeighbourTime	lp_solver.h	/^	double m_fNeighbourTime;\/\/\/< CPU time to construct the GFD stencils given the octree neighbours$/;"	m	class:HyperbolicLPSolver
m_fNextWriteTime	time_controller.h	/^	double m_fNextWriteTime; \/\/\/< The next physical time point to write results$/;"	m	class:TimeController
m_fOctreeTime	lp_solver.h	/^	double m_fOctreeTime;\/\/\/< CPU time to construct and search the octree$/;"	m	class:HyperbolicLPSolver
m_fPCenX	state/state.h	/^	double m_fPCenX, m_fPCenY, m_fPCenZ; \/\/\/< center of the Gaussian pressure profile$/;"	m	class:GaussianPressureState
m_fPCenX	state/state_1d.h	/^	double m_fPCenX; \/\/\/< center of the Gaussian pressure profile$/;"	m	class:GaussianPressure1DState
m_fPCenX	state/state_jet.h	/^	double m_fPCenX; \/\/\/< center of the Gaussian pressure profile$/;"	m	class:Jet1DState
m_fPCenY	state/state.h	/^	double m_fPCenX, m_fPCenY, m_fPCenZ; \/\/\/< center of the Gaussian pressure profile$/;"	m	class:GaussianPressureState
m_fPCenZ	state/state.h	/^	double m_fPCenX, m_fPCenY, m_fPCenZ; \/\/\/< center of the Gaussian pressure profile$/;"	m	class:GaussianPressureState
m_fPCoeff	state/state.h	/^	double m_fPCoeff; \/\/\/< Gaussian coefficient	$/;"	m	class:GaussianPressureState
m_fPCoeff	state/state_1d.h	/^	double m_fPCoeff; \/\/\/< Gaussian coefficient	$/;"	m	class:GaussianPressure1DState
m_fPCoeff	state/state_jet.h	/^	double m_fPCoeff; \/\/\/< Gaussian coefficient	$/;"	m	class:Jet1DState
m_fPMax	state/state_jet.h	/^	double m_fPMax; \/\/ g\/(cm*ms^2)$/;"	m	class:Jet3DState
m_fPPeak	state/state.h	/^	double m_fPPeak; \/\/\/< peak of pressure value$/;"	m	class:GaussianPressureState
m_fPPeak	state/state_1d.h	/^	double m_fPPeak; \/\/\/< peak of pressure value$/;"	m	class:GaussianPressure1DState
m_fPPeak	state/state_jet.h	/^	double m_fPPeak; \/\/\/< peak of pressure value$/;"	m	class:Jet1DState
m_fPinf	eos.h	/^	double m_fPinf; \/\/\/< The parameter pressure infinity $/;"	m	class:StiffPolytropicGasEOS
m_fPinf	initializer.h	/^	double m_fPinf;\/\/\/< eos parameter pinf (stiffened poly gas) $/;"	m	class:Initializer
m_fPressure	state/state.h	/^	double m_fPressure; \/\/\/< pressure$/;"	m	class:UniformVelocityState
m_fPressure	state/state_ballexp.h	/^	double m_fPressure;$/;"	m	class:Ballexp3DState
m_fPressure	state/state_ballexp.h	/^        double m_fPressure;$/;"	m	class:Ballpressurewave3DState
m_fPressure	state/state_ballexp.h	/^        double m_fPressure;$/;"	m	class:Ballrotate3DState
m_fPressure	state/state_collision.h	/^	double m_fPressure;	$/;"	m	class:LeftUniformVelocityState
m_fPressure	state/state_collision.h	/^	double m_fPressure;	$/;"	m	class:RightUniformVelocityState
m_fPressure	state/state_gresho.h	/^	double m_fPressure;$/;"	m	class:ConvergentShock2DState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet1DState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet2DCollisionState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet2DExpansionState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet2DMergeLowerState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet2DMergeState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet2DMergeUpperState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet3DExpansionState
m_fPressure	state/state_jet.h	/^	double m_fPressure;$/;"	m	class:Jet3DState
m_fPressure	state/state_jet.h	/^        double m_fPressure;$/;"	m	class:Jet1DCenterState
m_fPressure	state/state_jet.h	/^        double m_fPressure;$/;"	m	class:Jet1DLaterState
m_fPressure	state/state_jet.h	/^        double m_fPressure;$/;"	m	class:Jet1DLeftState
m_fPressure	state/state_jet.h	/^        double m_fPressure;$/;"	m	class:Jet1DRightState
m_fPressure	state/state_nozzle.h	/^        double m_fPressure;$/;"	m	class:NozzleRotheState
m_fPressure	state/state_nozzle.h	/^        double m_fPressure;$/;"	m	class:NozzleState
m_fPressure	state/state_pellet.h	/^	double m_fPressure;$/;"	m	class:PelletState
m_fPressure	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLength, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor2DState
m_fPressure	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLength;$/;"	m	class:KelvinHelmholtz2DState
m_fPressure	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLengthX, m_fWaveLengthY, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor3DState
m_fPressure	state/state_shocktube.h	/^        double m_fPressure, m_fYLength, m_fG;$/;"	m	class:BoundaryTest2DState
m_fPressure	state/state_shocktube.h	/^        double m_fPressure, m_fYLength, m_fG;$/;"	m	class:DamBreak2DState
m_fPressure1	state/state_shocktube.h	/^	double m_fPressure1, m_fPressure2, m_fPressure3;$/;"	m	class:TPShocktube2DState
m_fPressure2	state/state_shocktube.h	/^	double m_fPressure1, m_fPressure2, m_fPressure3;$/;"	m	class:TPShocktube2DState
m_fPressure3	state/state_shocktube.h	/^	double m_fPressure1, m_fPressure2, m_fPressure3;$/;"	m	class:TPShocktube2DState
m_fPressureL	state/state_shocktube.h	/^	double m_fPressureL, m_fPressureR;$/;"	m	class:NormalShock2DState
m_fPressureL	state/state_shocktube.h	/^	double m_fPressureL, m_fPressureR;$/;"	m	class:Shocktube2DState
m_fPressureL	state/state_shocktube.h	/^        double m_fPressureL, m_fPressureR;$/;"	m	class:SodShocktube2DLaterState
m_fPressureL	state/state_shocktube.h	/^        double m_fPressureL, m_fPressureR;$/;"	m	class:SodShocktube2DState
m_fPressureL	state/state_shocktube.h	/^        double m_fPressureL;$/;"	m	class:SimpleWave2DState
m_fPressurePost	state/state_jet.h	/^	double m_fPressurePost;$/;"	m	class:Jet1DLaterState
m_fPressureR	state/state_shocktube.h	/^	double m_fPressureL, m_fPressureR;$/;"	m	class:NormalShock2DState
m_fPressureR	state/state_shocktube.h	/^	double m_fPressureL, m_fPressureR;$/;"	m	class:Shocktube2DState
m_fPressureR	state/state_shocktube.h	/^        double m_fPressureL, m_fPressureR;$/;"	m	class:SodShocktube2DLaterState
m_fPressureR	state/state_shocktube.h	/^        double m_fPressureL, m_fPressureR;$/;"	m	class:SodShocktube2DState
m_fSPHTime	lp_solver.h	/^	double m_fSPHTime;\/\/\/< CPU time to calculate SPH density (only >0 when SPH density estimator is used)$/;"	m	class:HyperbolicLPSolver
m_fShockSpeed	state/state_jet.h	/^	double m_fShockSpeed;$/;"	m	class:Jet1DLaterState
m_fSolverTime	lp_solver.h	/^	double m_fSolverTime;\/\/\/< CPU time to solve the sptial and temporal derivatives and update the states$/;"	m	class:HyperbolicLPSolver
m_fStartTime	initializer.h	/^	double m_fStartTime;\/\/\/< simulation start time$/;"	m	class:Initializer
m_fTime	state/state_jet.h	/^	double m_fTime;$/;"	m	class:Jet1DLaterState
m_fTime	time_controller.h	/^	double m_fTime; \/\/\/< Current physical time of simulation$/;"	m	class:TimeController
m_fTimesBoundingBox	initializer.h	/^	double m_fTimesBoundingBox; \/\/\/< how many times is the buffer zone wrt average inter-particle spacing$/;"	m	class:Initializer
m_fTimesCapacity	initializer.h	/^	double m_fTimesCapacity; \/\/\/< how many times capacity is wrt m_iFluidNum+m_iBoundaryNum$/;"	m	class:Initializer
m_fTimesContactLength	initializer.h	/^	double m_fTimesContactLength; \/\/\/< how many times larger than m_fInitParticleSpacing$/;"	m	class:Initializer
m_fTimesNeiSearchRadius	initializer.h	/^	double m_fTimesNeiSearchRadius; \/\/\/< how many times is the neighbour search radius wrt average inter-particle spacing$/;"	m	class:Initializer
m_fTimesNeiSearchRadius	lp_solver.h	/^	double m_fTimesNeiSearchRadius;\/\/\/< how many times is the neighbour search radius wrt average inter-particle spacing	$/;"	m	class:HyperbolicLPSolver
m_fTotalTime	lp_solver.h	/^	double m_fTotalTime;\/\/\/< total CPU time$/;"	m	class:HyperbolicLPSolver
m_fVPost	state/state_shocktube.h	/^        double m_fVPost;$/;"	m	class:SimpleWave2DState
m_fVel	state/state_pellet.h	/^	double m_fVel;$/;"	m	class:PelletState
m_fVel1	state/state_shocktube.h	/^        double m_fDen1, m_fDen2, m_fVel1, m_fVel2, m_fDelta, m_fDeltay;$/;"	m	class:KelvinHelmholtz2DState
m_fVel2	state/state_shocktube.h	/^        double m_fDen1, m_fDen2, m_fVel1, m_fVel2, m_fDelta, m_fDeltay;$/;"	m	class:KelvinHelmholtz2DState
m_fVelX	state/state.h	/^	double m_fVelX, m_fVelY, m_fVelZ; \/\/\/< velocities$/;"	m	class:GaussianPressureState
m_fVelX	state/state_1d.h	/^	double m_fVelX; \/\/\/< velocity$/;"	m	class:GaussianPressure1DState
m_fVelX	state/state_collision.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:LeftUniformVelocityState
m_fVelX	state/state_collision.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:RightUniformVelocityState
m_fVelX	state/state_jet.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:Jet3DState
m_fVelX	state/state_jet.h	/^	double m_fVelX;$/;"	m	class:Jet1DState
m_fVelX	state/state_jet.h	/^        double m_fVelX;$/;"	m	class:Jet1DCenterState
m_fVelX	state/state_jet.h	/^        double m_fVelX;$/;"	m	class:Jet1DLaterState
m_fVelX	state/state_jet.h	/^        double m_fVelX;$/;"	m	class:Jet1DLeftState
m_fVelX	state/state_jet.h	/^        double m_fVelX;$/;"	m	class:Jet1DRightState
m_fVelX	state/state_nozzle.h	/^        double m_fVelX;$/;"	m	class:NozzleRotheState
m_fVelX	state/state_nozzle.h	/^        double m_fVelX;$/;"	m	class:NozzleState
m_fVelY	state/state.h	/^	double m_fVelX, m_fVelY, m_fVelZ; \/\/\/< velocities$/;"	m	class:GaussianPressureState
m_fVelY	state/state_collision.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:LeftUniformVelocityState
m_fVelY	state/state_collision.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:RightUniformVelocityState
m_fVelY	state/state_jet.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:Jet3DState
m_fVelY	state/state_nozzle.h	/^	double m_fVelY;$/;"	m	class:NozzleState
m_fVelY	state/state_nozzle.h	/^        double m_fVelY;$/;"	m	class:NozzleRotheState
m_fVelZ	state/state.h	/^	double m_fVelX, m_fVelY, m_fVelZ; \/\/\/< velocities$/;"	m	class:GaussianPressureState
m_fVelZ	state/state_collision.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:LeftUniformVelocityState
m_fVelZ	state/state_collision.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:RightUniformVelocityState
m_fVelZ	state/state_jet.h	/^	double m_fVelX, m_fVelY, m_fVelZ;$/;"	m	class:Jet3DState
m_fVelZ	state/state_nozzle.h	/^	double m_fVelZ;$/;"	m	class:NozzleState
m_fVelZ	state/state_nozzle.h	/^        double m_fVelZ;$/;"	m	class:NozzleRotheState
m_fVelocity	state/state.h	/^	double m_fVelocity; \/\/\/< velocity$/;"	m	class:UniformVelocityState
m_fVelocity	state/state_gresho.h	/^	double m_fVelocity;$/;"	m	class:ConvergentShock2DState
m_fVelocity	state/state_jet.h	/^	double m_fVelocity; $/;"	m	class:Jet2DCollisionState
m_fVelocity	state/state_jet.h	/^	double m_fVelocity; $/;"	m	class:Jet2DExpansionState
m_fVelocity	state/state_jet.h	/^	double m_fVelocity; $/;"	m	class:Jet2DMergeLowerState
m_fVelocity	state/state_jet.h	/^	double m_fVelocity; $/;"	m	class:Jet2DMergeState
m_fVelocity	state/state_jet.h	/^	double m_fVelocity; $/;"	m	class:Jet2DMergeUpperState
m_fVelocity	state/state_jet.h	/^	double m_fVelocity; $/;"	m	class:Jet3DExpansionState
m_fVelocityL	state/state_shocktube.h	/^	double m_fVelocityL, m_fVelocityR;$/;"	m	class:NormalShock2DState
m_fVelocityR	state/state_shocktube.h	/^	double m_fVelocityL, m_fVelocityR;$/;"	m	class:NormalShock2DState
m_fWaveLength	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLength, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor2DState
m_fWaveLength	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLength;$/;"	m	class:KelvinHelmholtz2DState
m_fWaveLengthX	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLengthX, m_fWaveLengthY, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor3DState
m_fWaveLengthY	state/state_shocktube.h	/^        double m_fPressure, m_fWaveLengthX, m_fWaveLengthY, m_fMagnitude, m_fG;$/;"	m	class:RayleighTaylor3DState
m_fWriteTimeInterval	initializer.h	/^	double m_fWriteTimeInterval;\/\/\/< write time interval$/;"	m	class:Initializer
m_fWriteTimeInterval	time_controller.h	/^	double m_fWriteTimeInterval; \/\/\/< The physical time interval between two writting of results$/;"	m	class:TimeController
m_fXmax	initializer.h	/^	double m_fXmin, m_fXmax, m_fYmin, m_fYmax, m_fZmin, m_fZmax;$/;"	m	class:BoundingBox
m_fXmin	initializer.h	/^	double m_fXmin, m_fXmax, m_fYmin, m_fYmax, m_fZmin, m_fZmax;$/;"	m	class:BoundingBox
m_fYLength	state/state_shocktube.h	/^        double m_fPressure, m_fYLength, m_fG;$/;"	m	class:BoundaryTest2DState
m_fYLength	state/state_shocktube.h	/^        double m_fPressure, m_fYLength, m_fG;$/;"	m	class:DamBreak2DState
m_fYmax	initializer.h	/^	double m_fXmin, m_fXmax, m_fYmin, m_fYmax, m_fZmin, m_fZmax;$/;"	m	class:BoundingBox
m_fYmin	initializer.h	/^	double m_fXmin, m_fXmax, m_fYmin, m_fYmax, m_fZmin, m_fZmax;$/;"	m	class:BoundingBox
m_fZmax	initializer.h	/^	double m_fXmin, m_fXmax, m_fYmin, m_fYmax, m_fZmin, m_fZmax;$/;"	m	class:BoundingBox
m_fZmin	initializer.h	/^	double m_fXmin, m_fXmax, m_fYmin, m_fYmax, m_fZmin, m_fZmax;$/;"	m	class:BoundingBox
m_iBinarytreeResolution	initializer.h	/^    int m_iBinarytreeResolution;$/;"	m	class:Initializer
m_iBinarytreeResolution	particle_data.h	/^    int m_iBinarytreeResolution;$/;"	m	class:ParticleData
m_iBoundaryNum	particle_data.h	/^	std::size_t m_iBoundaryNum;\/\/\/< Number of boundary particles$/;"	m	class:ParticleData
m_iBoundaryObjNum	initializer.h	/^	int m_iBoundaryObjNum;\/\/\/< number of boundary objects$/;"	m	class:Initializer
m_iBoundaryStartIndex	particle_data.h	/^	std::size_t m_iBoundaryStartIndex;\/\/\/< Start index of boundary particles in the particle array$/;"	m	class:ParticleData
m_iCapacity	initializer.h	/^	std::size_t m_iCapacity;\/\/\/< Maximum length of particle arrays (> the total number of all particles)  	$/;"	m	class:Initializer
m_iCapacity	particle_data.h	/^	std::size_t m_iCapacity;\/\/\/< Maximum length of particle arrays (> the total number of all particles)$/;"	m	class:ParticleData
m_iCount	lp_solver.h	/^	int m_iCount;\/\/\/< count of time steps$/;"	m	class:HyperbolicLPSolver
m_iDensityEstimatorType	initializer.h	/^	int m_iDensityEstimatorType;\/\/\/< type of density estimator (0:pde, 1:SPH, 3: PDE with switch to SPH)$/;"	m	class:Initializer
m_iDensityEstimatorType	lp_solver.h	/^	int m_iDensityEstimatorType; \/\/< if use SPH density estimator$/;"	m	class:HyperbolicLPSolver
m_iDimension	initializer.h	/^	int m_iDimension;\/\/\/< dimension$/;"	m	class:Initializer
m_iDimension	lp_solver.h	/^	int m_iDimension; \/\/\/< dimension$/;"	m	class:HyperbolicLPSolver
m_iDimension	particle_data.h	/^	int m_iDimension; \/\/\/< dimension$/;"	m	class:ParticleData
m_iDirSplitOrder	lp_solver.h	/^	int m_iDirSplitOrder;\/\/\/< In 3D: 0=xyzyx, 1=xzyzx, 2=yxzxy, 3=yzxzy, 4=zxyxz, 5=zyx. In 2D: 0=xyx, 1=yxy	$/;"	m	class:HyperbolicLPSolver
m_iEOSChoice	eos.h	/^	int m_iEOSChoice; \/\/\/< The eos choice: 1=Polytropic gas; 2=Stiffened Polytropic gas; 3=Saha Eos$/;"	m	class:EOS
m_iEOSChoice	initializer.h	/^	int m_iEOSChoice;\/\/\/< choice of eos$/;"	m	class:Initializer
m_iFixParticles	initializer.h	/^	bool m_iFixParticles;\/\/<Fix the particles$/;"	m	class:Initializer
m_iFixParticles	lp_solver.h	/^	bool m_iFixParticles;\/\/<if use fixed particles$/;"	m	class:HyperbolicLPSolver
m_iFluidNum	initializer.h	/^	std::size_t m_iFluidNum;\/\/\/< Number of fluid particles$/;"	m	class:Initializer
m_iFluidNum	particle_data.h	/^	std::size_t m_iFluidNum;\/\/\/< Number of fluid particles$/;"	m	class:ParticleData
m_iFluidObjNum	initializer.h	/^	int m_iFluidObjNum;\/\/\/< number of fluid objects		$/;"	m	class:Initializer
m_iFluidStartIndex	initializer.h	/^	std::size_t m_iFluidStartIndex;\/\/\/< Start index of fluid particles in the particle array$/;"	m	class:Initializer
m_iFluidStartIndex	particle_data.h	/^	std::size_t m_iFluidStartIndex;\/\/\/< Start index of fluid particles in the particle array$/;"	m	class:ParticleData
m_iFreeBoundary	lp_solver.h	/^	bool m_iFreeBoundary; \/\/\/< if there is free boundary condition$/;"	m	class:HyperbolicLPSolver
m_iGhostNum	particle_data.h	/^	std::size_t m_iGhostNum;\/\/\/< Number of ghost particles$/;"	m	class:ParticleData
m_iGhostStartIndex	particle_data.h	/^	std::size_t m_iGhostStartIndex;\/\/\/< Start index of ghost particles in the particle array $/;"	m	class:ParticleData
m_iIfDebug	initializer.h	/^	bool m_iIfDebug; \/\/\/< if true then print debug info$/;"	m	class:Initializer
m_iIfDebug	lp_solver.h	/^	bool m_iIfDebug;\/\/\/< if true then print debug info$/;"	m	class:LPSolver
m_iIfDebug	time_controller.h	/^	bool m_iIfDebug;\/\/\/< if true then print debug info$/;"	m	class:TimeController
m_iIfHex	initializer.h	/^	bool m_iIfHex;\/\/\/< 0:random intialization 1:hexgonal pack$/;"	m	class:Initializer
m_iIfMultiThreads	lp_solver.h	/^	bool m_iIfMultiThreads;	\/\/\/< true if use multithreads$/;"	m	class:HyperbolicLPSolver
m_iIfRestart	initializer.h	/^	bool m_iIfRestart; \/\/\/< 0:no restart 1:restart$/;"	m	class:Initializer
m_iIfRestart	lp_solver.h	/^	bool m_iIfRestart;\/\/\/< if a restart run$/;"	m	class:HyperbolicLPSolver
m_iInflowNum	particle_data.h	/^	std::size_t m_iInflowNum;\/\/\/< Number of inflow boundary particles (for nozzle simulation)$/;"	m	class:ParticleData
m_iLPFOrder	initializer.h	/^	int m_iLPFOrder;\/\/\/< the order of Local Polynomial Fitting (LPF)  	$/;"	m	class:Initializer
m_iLPFOrder	lp_solver.h	/^	int m_iLPFOrder; \/\/\/< the order of Local Polynomial Fitting (LPF)$/;"	m	class:HyperbolicLPSolver
m_iLinearSearchDepth	octree.h	/^  int m_iLinearSearchDepth;$/;"	m	class:Octree
m_iMaxDepth	octree.h	/^  int m_iMaxDepth;$/;"	m	class:Octree
m_iMaxNeighborNum	neighbour_searcher.h	/^	size_t m_iMaxNeighborNum;\/\/\/< The maximum number of neighbours of a particle$/;"	m	class:OctreeSearcher
m_iMaxNeighbourNum	initializer.h	/^	std::size_t m_iMaxNeighbourNum;\/\/\/< maximum number of neighbours of a particle$/;"	m	class:Initializer
m_iMaxNeighbourNum	particle_data.h	/^	std::size_t m_iMaxNeighbourNum;\/\/\/< maximum number of neighbours of a particle$/;"	m	class:ParticleData
m_iMaxNeighbourNumInOneDir	initializer.h	/^	std::size_t m_iMaxNeighbourNumInOneDir;\/\/\/< maximum number of neighbours of a particle in one direction	$/;"	m	class:Initializer
m_iMaxNeighbourNumInOneDir	particle_data.h	/^	std::size_t m_iMaxNeighbourNumInOneDir;\/\/\/< maximum number of neighbours of a particle in one direction$/;"	m	class:ParticleData
m_iMaxParticleNum	neighbour_searcher.h	/^	size_t m_iMaxParticleNum;\/\/\/< The capacity of the particle array (> the total number of particles)$/;"	m	class:OctreeSearcher
m_iMaxParticleNum	octree.h	/^  size_t m_iMaxParticleNum;$/;"	m	class:Octree
m_iMaxParticlePerCell	initializer.h	/^	int m_iMaxParticlePerCell = 50;	$/;"	m	class:Initializer
m_iMaxParticlePerCell	particle_data.h	/^	int m_iMaxParticlePerCell;\/\/maximum number of particle per APCloud node for density integral calculation$/;"	m	class:ParticleData
m_iMinNeighborNum	neighbour_searcher.h	/^	size_t m_iMinNeighborNum;\/\/\/< The minimum number of neighbours of a particle$/;"	m	class:OctreeSearcher
m_iNumCol	ls_solver.h	/^	std::size_t m_iNumCol;\/\/\/< The number of columns in matrix A	$/;"	m	class:LSSolver
m_iNumCol1stOrder	initializer.h	/^	std::size_t  m_iNumCol1stOrder;\/\/TODO\/\/\/< the number of columns of A when solving 1st order LPF$/;"	m	class:Initializer
m_iNumCol1stOrder	lp_solver.h	/^	std::size_t m_iNumCol1stOrder; \/\/\/< the number of columns of A when solving 1st order LPF	$/;"	m	class:HyperbolicLPSolver
m_iNumCol2ndOrder	initializer.h	/^	std::size_t m_iNumCol2ndOrder;\/\/TODO\/\/\/< the number of columns of A when solving 2nd order LPF	$/;"	m	class:Initializer
m_iNumCol2ndOrder	lp_solver.h	/^	std::size_t m_iNumCol2ndOrder; \/\/\/< the number of columns of A when solving 2nd order LPF$/;"	m	class:HyperbolicLPSolver
m_iNumDigits	particle_viewer.h	/^	int m_iNumDigits;\/\/\/< The number of digits for the indexing of output file name $/;"	m	class:ParticleViewer
m_iNumParticleWithinSearchRadius	initializer.h	/^	size_t m_iNumParticleWithinSearchRadius;\/\/\/< the number of particles within the search radius at initialization time$/;"	m	class:Initializer
m_iNumPhase	lp_solver.h	/^	int m_iNumPhase; \/\/\/< number of phases in directional splitting$/;"	m	class:HyperbolicLPSolver
m_iNumRow	ls_solver.h	/^	std::size_t m_iNumRow;\/\/\/< The number of rows in matrix A	$/;"	m	class:LSSolver
m_iNumRow1stOrder	initializer.h	/^	std::size_t m_iNumRow1stOrder;\/\/\/< the smallest number of rows of A to solve 1st order LPF$/;"	m	class:Initializer
m_iNumRow1stOrder	lp_solver.h	/^	std::size_t m_iNumRow1stOrder; \/\/\/< the smallest number of rows of A to solve 1st order LPF$/;"	m	class:HyperbolicLPSolver
m_iNumRow2ndOrder	initializer.h	/^	std::size_t m_iNumRow2ndOrder;\/\/\/< the smallest number of rows of A to solve 2nd order LPF$/;"	m	class:Initializer
m_iNumRow2ndOrder	lp_solver.h	/^	std::size_t m_iNumRow2ndOrder; \/\/\/< the smallest number of rows of A to solve 2nd order LPF$/;"	m	class:HyperbolicLPSolver
m_iNumThreads	initializer.h	/^	int m_iNumThreads;\/\/\/< Number of threads $/;"	m	class:Initializer
m_iNumThreads	lp_solver.h	/^	int m_iNumThreads; \/\/\/< Number of threads	$/;"	m	class:HyperbolicLPSolver
m_iNumber	initializer.h	/^	size_t m_iNumber;$/;"	m	class:BoundingBox
m_iNumberofPellet	initializer.h	/^	int m_iNumberofPellet;$/;"	m	class:Initializer
m_iNumberofPellet	neighbour_searcher.h	/^    int m_iNumberofPellet;$/;"	m	class:OctreeSearcher
m_iNumberofPellet	particle_data.h	/^	int m_iNumberofPellet;\/\/number of pellet$/;"	m	class:ParticleData
m_iObjectTag	initializer.h	/^	int m_iObjectTag;$/;"	m	class:BoundingBox
m_iOutputError	initializer.h	/^	bool m_iOutputError;\/\/\/<output the error compared to exact solution$/;"	m	class:Initializer
m_iPelletDistribution	initializer.h	/^	int m_iPelletDistribution;$/;"	m	class:Initializer
m_iPeriodicBoundary	lp_solver.h	/^	bool m_iPeriodicBoundary; \/\/\/< if there is periodic boundary condition$/;"	m	class:HyperbolicLPSolver
m_iPrintAllParticle	initializer.h	/^    int m_iPrintAllParticle = 0;$/;"	m	class:Initializer
m_iPrintDeltaq	initializer.h	/^    int m_iPrintDeltaq = 0;$/;"	m	class:Initializer
m_iPrintDeltaq	particle_data.h	/^    int m_iPrintDeltaq;$/;"	m	class:ParticleData
m_iPrintDensity	initializer.h	/^    int m_iPrintDensity = 0;$/;"	m	class:Initializer
m_iPrintDensity	particle_data.h	/^    int m_iPrintDensity;$/;"	m	class:ParticleData
m_iPrintLeftIntegral	initializer.h	/^    int m_iPrintLeftIntegral = 0;$/;"	m	class:Initializer
m_iPrintLeftIntegral	particle_data.h	/^    int m_iPrintLeftIntegral;$/;"	m	class:ParticleData
m_iPrintLocalSpacing	initializer.h	/^    int m_iPrintLocalSpacing = 0;$/;"	m	class:Initializer
m_iPrintLocalSpacing	particle_data.h	/^    int m_iPrintLocalSpacing;$/;"	m	class:ParticleData
m_iPrintMass	initializer.h	/^    int m_iPrintMass = 0;$/;"	m	class:Initializer
m_iPrintMass	particle_data.h	/^    int m_iPrintMass;$/;"	m	class:ParticleData
m_iPrintPressure	initializer.h	/^    int m_iPrintPressure = 0;$/;"	m	class:Initializer
m_iPrintPressure	particle_data.h	/^    int m_iPrintPressure;$/;"	m	class:ParticleData
m_iPrintQplusminus	initializer.h	/^    int m_iPrintQplusminus = 0;$/;"	m	class:Initializer
m_iPrintQplusminus	particle_data.h	/^    int m_iPrintQplusminus;$/;"	m	class:ParticleData
m_iPrintRightIntegral	initializer.h	/^    int m_iPrintRightIntegral = 0;$/;"	m	class:Initializer
m_iPrintRightIntegral	particle_data.h	/^    int m_iPrintRightIntegral;$/;"	m	class:ParticleData
m_iPrintSoundSpeed	initializer.h	/^    int m_iPrintSoundSpeed = 0;$/;"	m	class:Initializer
m_iPrintSoundSpeed	particle_data.h	/^    int m_iPrintSoundSpeed;$/;"	m	class:ParticleData
m_iPrintTemperature	initializer.h	/^    int m_iPrintTemperature = 0;$/;"	m	class:Initializer
m_iPrintTemperature	particle_data.h	/^    int m_iPrintTemperature;$/;"	m	class:ParticleData
m_iPrintTimeTrack	initializer.h	/^    int m_iPrintTimeTrack = 0;$/;"	m	class:Initializer
m_iPrintTimeTrack	particle_data.h	/^    int m_iPrintTimeTrack;$/;"	m	class:ParticleData
m_iPrintVelocity	initializer.h	/^    int m_iPrintVelocity = 0;$/;"	m	class:Initializer
m_iPrintVelocity	particle_data.h	/^    int m_iPrintVelocity;$/;"	m	class:ParticleData
m_iPrintVelocityU	initializer.h	/^    int m_iPrintVelocityU = 0;$/;"	m	class:Initializer
m_iPrintVelocityU	particle_data.h	/^    int m_iPrintVelocityU;$/;"	m	class:ParticleData
m_iPrintVelocityV	initializer.h	/^    int m_iPrintVelocityV = 0;$/;"	m	class:Initializer
m_iPrintVelocityV	particle_data.h	/^    int m_iPrintVelocityV;$/;"	m	class:ParticleData
m_iPrintVelocityW	initializer.h	/^    int m_iPrintVelocityW = 0;$/;"	m	class:Initializer
m_iPrintVelocityW	particle_data.h	/^    int m_iPrintVelocityW;$/;"	m	class:ParticleData
m_iPrintVolume	initializer.h	/^    int m_iPrintVolume = 0;$/;"	m	class:Initializer
m_iPrintVolume	particle_data.h	/^    int m_iPrintVolume;$/;"	m	class:ParticleData
m_iQuadtreeResolution	initializer.h	/^    int m_iQuadtreeResolution;$/;"	m	class:Initializer
m_iQuadtreeResolution	particle_data.h	/^	int m_iQuadtreeResolution;$/;"	m	class:ParticleData
m_iRandomDirSplitOrder	initializer.h	/^	bool m_iRandomDirSplitOrder;\/\/\/< if true then the order of directional splitting is randomly set 1:yes 0:no	$/;"	m	class:Initializer
m_iRandomDirSplitOrder	lp_solver.h	/^	bool m_iRandomDirSplitOrder; \/\/\/< if true then the order of directional splitting is randomly set$/;"	m	class:HyperbolicLPSolver
m_iSolidBoundary	lp_solver.h	/^	bool m_iSolidBoundary; \/\/\/< if there is solid boundary condition$/;"	m	class:HyperbolicLPSolver
m_iStartIndex	initializer.h	/^	size_t m_iStartIndex;$/;"	m	class:BoundingBox
m_iTheadNum	neighbour_searcher.h	/^	int m_iTheadNum;\/\/\/< The number of threads $/;"	m	class:OctreeSearcher
m_iTotalNum	particle_data.h	/^	std::size_t m_iTotalNum;\/\/\/< Number of all types of particles$/;"	m	class:ParticleData
m_iTotalNumberOfParticles	octree.h	/^  int m_iTotalNumberOfParticles;$/;"	m	class:Octree
m_iTreeDepth	initializer.h	/^	int m_iTreeDepth;\/\/\/< the octree depth for neighbour search		$/;"	m	class:Initializer
m_iTreeLength	octree.h	/^  int m_iTreeLength;$/;"	m	class:Octree
m_iUseLimiter	initializer.h	/^	bool m_iUseLimiter;\/\/\/< if use limiter or not 1:yes 0:no$/;"	m	class:Initializer
m_iUseLimiter	lp_solver.h	/^	bool m_iUseLimiter; \/\/\/< if use limiter \/ switch$/;"	m	class:HyperbolicLPSolver
m_iWriteStep	initializer.h	/^	std::size_t m_iWriteStep; \/\/\/< write step$/;"	m	class:Initializer
m_iWriteStep	time_controller.h	/^	std::size_t m_iWriteStep; \/\/\/< The number of times results are written to the particle veiwer$/;"	m	class:TimeController
m_pEOS	initializer.h	/^	EOS* m_pEOS;\/\/\/< pointer to the EOS object$/;"	m	class:Initializer
m_pEOS	lp_solver.h	/^	EOS* m_pEOS; \/\/\/< Pointer to the object for computing eos$/;"	m	class:HyperbolicLPSolver
m_pEOS	pellet_solver.h	/^        EOS* m_pEOS;$/;"	m	class:PelletSolver
m_pEinf	lp_solver.h	/^	double m_pEinf;\/\/\/< e_inf in still polytropic eos$/;"	m	class:HyperbolicLPSolver
m_pGamma	lp_solver.h	/^    double m_pGamma;\/\/\/< gamma in polytropic and stiff polytropic eos$/;"	m	class:HyperbolicLPSolver
m_pNeighbourSearcher	lp_solver.h	/^	NeighbourSearcher* m_pNeighbourSearcher; \/\/\/< Pointer to the object for the neighbour search task$/;"	m	class:HyperbolicLPSolver
m_pOctree	neighbour_searcher.h	/^	Octree* m_pOctree;\/\/\/< The octree$/;"	m	class:OctreeSearcher
m_pOctree_integral	neighbour_searcher.h	/^    Octree* m_pOctree_integral;$/;"	m	class:OctreeSearcher
m_pParticleData	lp_solver.h	/^	ParticleData* m_pParticleData; \/\/\/< Pointer to the object containing major particle data arrays 	$/;"	m	class:HyperbolicLPSolver
m_pParticleData	particle_viewer.h	/^	ParticleData* m_pParticleData;\/\/\/< A pointer to the object which holds particle information and data$/;"	m	class:ParticleViewer
m_pPelletData	pellet_solver.h	/^        ParticleData* m_pPelletData;$/;"	m	class:PelletSolver
m_pPelletSolver	lp_solver.h	/^	PelletSolver* m_pPelletSolver;$/;"	m	class:HyperbolicLPSolver
m_pPinf	lp_solver.h	/^	double m_pPinf;\/\/\/< p_inf in stiff polytropic eos$/;"	m	class:HyperbolicLPSolver
m_pSearchResult	neighbour_searcher.h	/^	SearchResult* m_pSearchResult;\/\/\/ The search result (of length \\e m_iMaxNeighborNum)$/;"	m	class:OctreeSearcher
m_pSearchResult	neighbour_searcher.h	/^    SearchResult** m_pSearchResult;\/\/\/< The search result for each thread id $/;"	m	class:OctreeSearcher
m_pSearchResultTemp	neighbour_searcher.h	/^	SearchResult** m_pSearchResultTemp; $/;"	m	class:OctreeSearcher
m_pSolver	time_controller.h	/^	LPSolver* m_pSolver; \/\/\/< A pointer to the Lagrangian Particle solver$/;"	m	class:TimeController
m_sAuxiliaryOutput	initializer.h	/^	std::string m_sAuxiliaryOutput;\/\/\/\/<name of auxiliary output type$/;"	m	class:Initializer
m_sDebugfileName	initializer.h	/^	const std::string m_sDebugfileName; \/\/\/< filename for printing debug info$/;"	m	class:Initializer
m_sExactSolutionName	initializer.h	/^	std::string m_sExactSolutionName;\/\/\/<name of exact solution$/;"	m	class:Initializer
m_sFilenameSaveInit	initializer.h	/^	std::string m_sFilenameSaveInit; \/\/\/< the filename for saving initial setting for restart$/;"	m	class:Initializer
m_sOutputfileName	particle_viewer.h	/^	std::string m_sOutputfileName;\/\/\/< The name of the output file $/;"	m	class:ParticleViewer
m_sParticleType	particle_viewer.h	/^	std::string m_sParticleType;\/\/\/< The type of particle data to output (all, fluid, boundary, etc)$/;"	m	class:ParticleViewer
m_vA	ls_solver.h	/^	double *m_vA;\/\/\/< The matrix A$/;"	m	class:LSSolver
m_vBoundaryObj	initializer.h	/^	std::vector<Boundary*> m_vBoundaryObj;\/\/\/< Vector of boundary objects$/;"	m	class:Initializer
m_vBoundaryObj	particle_data.h	/^	std::vector<Boundary*> m_vBoundaryObj; \/\/\/< The vector containing all boundary objects$/;"	m	class:ParticleData
m_vBoundaryObjNames	initializer.h	/^	std::vector<std::string> m_vBoundaryObjNames; \/\/\/< Vector of boundary object names$/;"	m	class:Initializer
m_vBoundaryObjTypes	initializer.h	/^	std::vector<std::string> m_vBoundaryObjTypes; \/\/\/< Vector of boundary object types $/;"	m	class:Initializer
m_vBoundaryObjTypes	particle_data.h	/^	std::vector<std::string> m_vBoundaryObjTypes; \/\/\/< The vector containing all boundary object types$/;"	m	class:ParticleData
m_vCoordX	octree.h	/^  const double *m_vCoordX;$/;"	m	class:Octree
m_vCoordX_integral	octree.h	/^  const double *m_vCoordX_integral;$/;"	m	class:Octree
m_vCoordY	octree.h	/^  const double *m_vCoordY;$/;"	m	class:Octree
m_vCoordZ	octree.h	/^  const double *m_vCoordZ;$/;"	m	class:Octree
m_vCumP	particle_data.h	/^	double* m_vCumP;\/\/\/< cumulative pressure (for 1D limiter)$/;"	m	class:ParticleData
m_vDD1	particle_data.h	/^	double* m_vDD1; \/\/\/< divided difference order 1 (for 1D limiter)$/;"	m	class:ParticleData
m_vDD2Left	particle_data.h	/^	double* m_vDD2Left;\/\/\/< divided difference order 2 (for 1D limiter)$/;"	m	class:ParticleData
m_vDD2Right	particle_data.h	/^	double* m_vDD2Right;\/\/\/< divided difference order 2 (for 1D limiter)$/;"	m	class:ParticleData
m_vDD3Left	particle_data.h	/^	double* m_vDD3Left;\/\/\/< divided difference order 3 (for 1D limiter)$/;"	m	class:ParticleData
m_vDD3Right	particle_data.h	/^	double* m_vDD3Right;\/\/\/< divided difference order 3 (for 1D limiter)$/;"	m	class:ParticleData
m_vDeltaq	particle_data.h	/^	double* m_vDeltaq;$/;"	m	class:ParticleData
m_vDensity	particle_data.h	/^    double* m_vDensity;$/;"	m	class:ParticleData
m_vDepth	octree.h	/^  int* m_vDepth;$/;"	m	class:Octree
m_vDirSplitTable	lp_solver.h	/^	std::vector<std::vector<int> > m_vDirSplitTable; $/;"	m	class:HyperbolicLPSolver
m_vFillGhost	lp_solver.h	/^	std::vector<bool> m_vFillGhost;\/\/\/< if each fludi particle has corresponding ghost particle(s) or not$/;"	m	class:HyperbolicLPSolver
m_vFirstChildIndex	octree.h	/^  int* m_vFirstChildIndex;$/;"	m	class:Octree
m_vFirstParticleIndex	octree.h	/^  int* m_vFirstParticleIndex;$/;"	m	class:Octree
m_vFluidBoundingBox	initializer.h	/^	std::vector<BoundingBox*> m_vFluidBoundingBox;\/\/\/< Initial bounding box of the initialized fluid objects$/;"	m	class:Initializer
m_vFluidBoundingBox	particle_data.h	/^	std::vector<BoundingBox*> m_vFluidBoundingBox;\/\/\/< The vector containing all bounding box of fluid objects	$/;"	m	class:ParticleData
m_vFluidObj	initializer.h	/^	std::vector<Geometry*> m_vFluidObj;\/\/\/< Vector of fluid objects$/;"	m	class:Initializer
m_vFluidObjNames	initializer.h	/^	std::vector<std::string> m_vFluidObjNames; \/\/\/< Vector of fluid object names 	$/;"	m	class:Initializer
m_vFluidObjState	initializer.h	/^	std::vector<State*> m_vFluidObjState;\/\/\/< Vector of objects of fluid state$/;"	m	class:Initializer
m_vFluidObjStateNames	initializer.h	/^	std::vector<std::string> m_vFluidObjStateNames; \/\/\/< Vector of fluid object state names 	$/;"	m	class:Initializer
m_vIfSPHDensity	particle_data.h	/^	int *m_vIfSPHDensity;$/;"	m	class:ParticleData
m_vJPVT	ls_solver.h	/^	std::vector<int> m_vJPVT;\/\/\/< The pivoting matrix 	$/;"	m	class:QRSolver
m_vLPFFirstOrderDown	particle_data.h	/^	int* m_vLPFFirstOrderDown;\/\/\/< The order of local polynomial fitting in \\e down direction (in z-coordinate)$/;"	m	class:ParticleData
m_vLPFFirstOrderLeft	particle_data.h	/^	int* m_vLPFFirstOrderLeft;\/\/\/< The order of local polynomial fitting in \\e left direction (in x-coordinate) $/;"	m	class:ParticleData
m_vLPFFirstOrderNorth	particle_data.h	/^	int* m_vLPFFirstOrderNorth;\/\/\/< The order of local polynomial fitting in \\e north direction (in y-coordinate) $/;"	m	class:ParticleData
m_vLPFFirstOrderRight	particle_data.h	/^	int* m_vLPFFirstOrderRight;\/\/\/< The order of local polynomial fitting in \\e right direction (in x-coordinate)$/;"	m	class:ParticleData
m_vLPFFirstOrderSouth	particle_data.h	/^	int* m_vLPFFirstOrderSouth;\/\/\/< The order of local polynomial fitting in \\e south direction (in y-coordinate) $/;"	m	class:ParticleData
m_vLPFFirstOrderUp	particle_data.h	/^	int* m_vLPFFirstOrderUp;\/\/\/< The order of local polynomial fitting in \\e up direction (in z-coordinate) $/;"	m	class:ParticleData
m_vLPFOrderDown	particle_data.h	/^	int* m_vLPFOrderDown;\/\/\/< The order of local polynomial fitting in \\e down direction (in z-coordinate) $/;"	m	class:ParticleData
m_vLPFOrderLeft	particle_data.h	/^	int* m_vLPFOrderLeft;\/\/\/< The order of local polynomial fitting in \\e left direction (in x-coordinate) $/;"	m	class:ParticleData
m_vLPFOrderNorth	particle_data.h	/^	int* m_vLPFOrderNorth;\/\/\/< The order of local polynomial fitting in \\e north direction (in y-coordinate) $/;"	m	class:ParticleData
m_vLPFOrderRight	particle_data.h	/^	int* m_vLPFOrderRight;\/\/\/< The order of local polynomial fitting in \\e right direction (in x-coordinate)$/;"	m	class:ParticleData
m_vLPFOrderSouth	particle_data.h	/^	int* m_vLPFOrderSouth;\/\/\/< The order of local polynomial fitting in \\e south direction (in y-coordinate) $/;"	m	class:ParticleData
m_vLPFOrderUp	particle_data.h	/^	int* m_vLPFOrderUp;\/\/\/< The order of local polynomial fitting in \\e up direction (in z-coordinate) $/;"	m	class:ParticleData
m_vLeftIntegral	particle_data.h	/^	double* m_vLeftIntegral;$/;"	m	class:ParticleData
m_vLocalParSpacing	initializer.h	/^	double* m_vLocalParSpacing;\/\/\/< local particle spacing$/;"	m	class:Initializer
m_vLocalParSpacing	particle_data.h	/^    double* m_vLocalParSpacing;\/\/\/<local inter-particle spacing$/;"	m	class:ParticleData
m_vLowerLimitOfX	octree.h	/^  double* m_vLowerLimitOfX;$/;"	m	class:Octree
m_vLowerLimitOfY	octree.h	/^  double* m_vLowerLimitOfY;$/;"	m	class:Octree
m_vLowerLimitOfZ	octree.h	/^  double* m_vLowerLimitOfZ;$/;"	m	class:Octree
m_vMass	initializer.h	/^	double* m_vMass;$/;"	m	class:Initializer
m_vMass	particle_data.h	/^	double* m_vMass;$/;"	m	class:ParticleData
m_vMassFlowRate	particle_data.h	/^	double *m_vMassFlowRate;$/;"	m	class:ParticleData
m_vMirrorIndex	lp_solver.h	/^	std::vector<std::size_t> m_vMirrorIndex; \/\/\/< The index of the corresponding fluid particle of a mirror particle$/;"	m	class:HyperbolicLPSolver
m_vNeighList	particle_data.h	/^	int *m_vNeighList;$/;"	m	class:ParticleData
m_vNeighOfParticle	particle_data.h	/^	int *m_vNeighOfParticle;$/;"	m	class:ParticleData
m_vNeighSize	particle_data.h	/^    int *m_vNeighSize;$/;"	m	class:ParticleData
m_vNeighbourList	particle_data.h	/^	int* m_vNeighbourList;\/\/\/< The entire neighbour list$/;"	m	class:ParticleData
m_vNeighbourListDown	particle_data.h	/^	int* m_vNeighbourListDown;\/\/\/< The one-sided (down) neighbour list (\\f& z < z_0 \\f$)  $/;"	m	class:ParticleData
m_vNeighbourListDownSize	particle_data.h	/^	int* m_vNeighbourListDownSize;\/\/\/< The size of the one-sided (down) neighbour list (\\f& z < z_0 \\f$)  $/;"	m	class:ParticleData
m_vNeighbourListLeft	particle_data.h	/^	int* m_vNeighbourListLeft;\/\/\/< The one-sided (left) neighbour list (\\f& x < x_0 \\f$)  $/;"	m	class:ParticleData
m_vNeighbourListLeftSize	particle_data.h	/^	int* m_vNeighbourListLeftSize;\/\/\/< The size of the one-sided (left) neighbour list (\\f& x < x_0 \\f$)  $/;"	m	class:ParticleData
m_vNeighbourListNorth	particle_data.h	/^	int* m_vNeighbourListNorth;\/\/\/< The one-sided (north) neighbour list (\\f& y > y_0 \\f$) $/;"	m	class:ParticleData
m_vNeighbourListNorthSize	particle_data.h	/^	int* m_vNeighbourListNorthSize;\/\/\/< The size of the one-sided (north) neighbour list (\\f& y > y_0 \\f$) $/;"	m	class:ParticleData
m_vNeighbourListRight	particle_data.h	/^	int* m_vNeighbourListRight;\/\/\/< The one-sided (right) neighbour list (\\f& x > x_0 \\f$)$/;"	m	class:ParticleData
m_vNeighbourListRightSize	particle_data.h	/^	int* m_vNeighbourListRightSize;\/\/\/< The size of the one-sided (right) neighbour list (\\f& x > x_0 \\f$) $/;"	m	class:ParticleData
m_vNeighbourListSize	particle_data.h	/^	int* m_vNeighbourListSize;\/\/\/< The size of the entire neighbour list$/;"	m	class:ParticleData
m_vNeighbourListSouth	particle_data.h	/^	int* m_vNeighbourListSouth;\/\/\/< The one-sided (south) neighbour list (\\f& y < y_0 \\f$) $/;"	m	class:ParticleData
m_vNeighbourListSouthSize	particle_data.h	/^	int* m_vNeighbourListSouthSize;\/\/\/< The size of the one-sided (south) neighbour list (\\f& y < y_0 \\f$) $/;"	m	class:ParticleData
m_vNeighbourListUp	particle_data.h	/^	int* m_vNeighbourListUp;\/\/\/< The one-sided (up) neighbour list (\\f& z > z_0 \\f$)    $/;"	m	class:ParticleData
m_vNeighbourListUpSize	particle_data.h	/^	int* m_vNeighbourListUpSize;\/\/\/< The size of the one-sided (up) neighbour list (\\f& z > z_0 \\f$)    $/;"	m	class:ParticleData
m_vNodeKey	octree.h	/^  uint64_t* m_vNodeKey;$/;"	m	class:Octree
m_vNumberOfChildren	octree.h	/^  int* m_vNumberOfChildren;$/;"	m	class:Octree
m_vNumberOfContainedParticles	octree.h	/^  int* m_vNumberOfContainedParticles;$/;"	m	class:Octree
m_vObjectTag	initializer.h	/^	int* m_vObjectTag;\/\/\/< tag=1,2,3,...:fluid objects; otherwise: boundary or ghost particles$/;"	m	class:Initializer
m_vObjectTag	particle_data.h	/^	int* m_vObjectTag;\/\/\/< tag=1,2,3,...:fluid objects; otherwise: boundary or ghost particles$/;"	m	class:ParticleData
m_vPError0	particle_data.h	/^	double *m_vPError0;$/;"	m	class:ParticleData
m_vPError1	particle_data.h	/^	double *m_vPError1;$/;"	m	class:ParticleData
m_vParticleKeyIndex	octree.h	/^  KeyIndex *m_vParticleKeyIndex;$/;"	m	class:Octree
m_vParticleKeyIndex_integral	octree.h	/^  KeyIndex_integral *m_vParticleKeyIndex_integral;$/;"	m	class:Octree
m_vPelletEnergy	particle_data.h	/^    double* m_vPelletEnergy;\/\/energy absorbed by each pellet, need to be updated in every time step$/;"	m	class:ParticleData
m_vPelletID	particle_data.h	/^    int* m_vPelletID;\/\/the id of the pellet generating each inflow particle, size = m_iCapacity$/;"	m	class:ParticleData
m_vPelletInnerRadius	initializer.h	/^	double* m_vPelletInnerRadius;$/;"	m	class:Initializer
m_vPelletInnerRadius	particle_data.h	/^	double* m_vPelletInnerRadius;$/;"	m	class:ParticleData
m_vPelletOuterRadius	initializer.h	/^    double* m_vPelletOuterRadius;$/;"	m	class:Initializer
m_vPelletOuterRadius	particle_data.h	/^	double* m_vPelletOuterRadius;$/;"	m	class:ParticleData
m_vPelletPositionX	initializer.h	/^	double* m_vPelletPositionX;$/;"	m	class:Initializer
m_vPelletPositionX	particle_data.h	/^    double* m_vPelletPositionX;\/\/x coordinate of centre of each pellet, size = m_iNumberofPellet$/;"	m	class:ParticleData
m_vPelletPositionY	initializer.h	/^	double* m_vPelletPositionY;$/;"	m	class:Initializer
m_vPelletPositionY	particle_data.h	/^	double* m_vPelletPositionY;\/\/y coordinate$/;"	m	class:ParticleData
m_vPelletPositionZ	initializer.h	/^	double* m_vPelletPositionZ;$/;"	m	class:Initializer
m_vPelletPositionZ	particle_data.h	/^	double* m_vPelletPositionZ;\/\/z coordinate$/;"	m	class:ParticleData
m_vPelletRadius	initializer.h	/^	double* m_vPelletRadius;$/;"	m	class:Initializer
m_vPelletRadius	particle_data.h	/^	double* m_vPelletRadius;\/\/radius of each pellet$/;"	m	class:ParticleData
m_vPelletState	particle_data.h	/^	int* m_vPelletState;$/;"	m	class:ParticleData
m_vPelletVelocity	particle_data.h	/^	double* m_vPelletVelocity;$/;"	m	class:ParticleData
m_vPhi	particle_data.h	/^	double *m_vPhi;\/\/< used by limiter$/;"	m	class:ParticleData
m_vPositionX	initializer.h	/^	double* m_vPositionX;\/\/\/< x$/;"	m	class:Initializer
m_vPositionX	particle_data.h	/^	double* m_vPositionX;\/\/\/< x$/;"	m	class:ParticleData
m_vPositionX_temp	lp_solver.h	/^    double* m_vPositionX_temp; \/\/used for quadtree computation$/;"	m	class:HyperbolicLPSolver
m_vPositionXm	particle_data.h	/^	double* m_vPositionXm;\/\/\/ middle of positionX (for 1D limiter)$/;"	m	class:ParticleData
m_vPositionY	initializer.h	/^	double* m_vPositionY;\/\/\/< y$/;"	m	class:Initializer
m_vPositionY	particle_data.h	/^	double* m_vPositionY;\/\/\/< y$/;"	m	class:ParticleData
m_vPositionZ	initializer.h	/^	double* m_vPositionZ;\/\/\/< z$/;"	m	class:Initializer
m_vPositionZ	particle_data.h	/^	double* m_vPositionZ;\/\/\/< z$/;"	m	class:ParticleData
m_vPressure	initializer.h	/^	double* m_vPressure;\/\/\/< pressure	$/;"	m	class:Initializer
m_vPressure	particle_data.h	/^	double* m_vPressure;\/\/\/< pressure	$/;"	m	class:ParticleData
m_vPtx	particle_data.h	/^    double *m_vPtx;$/;"	m	class:ParticleData
m_vPty	particle_data.h	/^    double *m_vPty;$/;"	m	class:ParticleData
m_vPxl	particle_data.h	/^	double *m_vPxl;$/;"	m	class:ParticleData
m_vPxr	particle_data.h	/^    double *m_vPxr;$/;"	m	class:ParticleData
m_vPyl	particle_data.h	/^    double *m_vPyl;$/;"	m	class:ParticleData
m_vPyr	particle_data.h	/^    double *m_vPyr;$/;"	m	class:ParticleData
m_vQplusminus	particle_data.h	/^	double* m_vQplusminus;$/;"	m	class:ParticleData
m_vRightIntegral	particle_data.h	/^	double* m_vRightIntegral;$/;"	m	class:ParticleData
m_vSoundSpeed	initializer.h	/^	double* m_vSoundSpeed;\/\/\/< sound speed$/;"	m	class:Initializer
m_vSoundSpeed	particle_data.h	/^	double* m_vSoundSpeed;\/\/\/< sound speed$/;"	m	class:ParticleData
m_vTAU	ls_solver.h	/^	std::vector<double> m_vTAU;\/\/\/< The scalar factors of elementary reflectors$/;"	m	class:QRSolver
m_vTemp1PositionX	particle_data.h	/^	double* m_vTemp1PositionX;$/;"	m	class:ParticleData
m_vTemp1Pressure	particle_data.h	/^	double* m_vTemp1Pressure;\/\/\/< Temp array 1 of pressure (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp1SoundSpeed	particle_data.h	/^	double* m_vTemp1SoundSpeed;\/\/\/< Temp array 1 of sound speed (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp1VelocityU	particle_data.h	/^	double* m_vTemp1VelocityU;\/\/\/< Temp array 1 of velocity in x-coordinate (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp1VelocityV	particle_data.h	/^	double* m_vTemp1VelocityV;\/\/\/< Temp array 1 of velocity in y-coordinate (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp1VelocityW	particle_data.h	/^	double* m_vTemp1VelocityW;\/\/\/< Temp array 1 of velocity in z-coordinate (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp1Volume	particle_data.h	/^	double* m_vTemp1Volume;\/\/\/< Temp array 1 of volume (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp2Pressure	particle_data.h	/^	double* m_vTemp2Pressure;\/\/\/< Temp array 2 of pressure (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp2SoundSpeed	particle_data.h	/^	double* m_vTemp2SoundSpeed;\/\/\/< Temp array 2 of sound speed (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp2VelocityU	particle_data.h	/^	double* m_vTemp2VelocityU;\/\/\/< Temp array 2 of velocity in x-coordinate (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp2VelocityV	particle_data.h	/^	double* m_vTemp2VelocityV;\/\/\/< Temp array 2 of velocity in y-coordinate (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp2VelocityW	particle_data.h	/^	double* m_vTemp2VelocityW;\/\/\/< Temp array 2 of velocity in z-coordinate (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemp2Volume	particle_data.h	/^	double* m_vTemp2Volume;\/\/\/< Temp array 2 of volume (for Stang Splitting)$/;"	m	class:ParticleData
m_vTemperature	initializer.h	/^    double* m_vTemperature;$/;"	m	class:Initializer
m_vTemperature	particle_data.h	/^    double* m_vTemperature;$/;"	m	class:ParticleData
m_vTimeTrack	initializer.h	/^    int* m_vTimeTrack;$/;"	m	class:Initializer
m_vTimeTrack	particle_data.h	/^    int* m_vTimeTrack;$/;"	m	class:ParticleData
m_vUpperLimitOfX	octree.h	/^  double* m_vUpperLimitOfX;$/;"	m	class:Octree
m_vUpperLimitOfY	octree.h	/^  double* m_vUpperLimitOfY;$/;"	m	class:Octree
m_vUpperLimitOfZ	octree.h	/^  double* m_vUpperLimitOfZ;$/;"	m	class:Octree
m_vVelError0	particle_data.h	/^	double *m_vVelError0;$/;"	m	class:ParticleData
m_vVelError1	particle_data.h	/^	double *m_vVelError1;$/;"	m	class:ParticleData
m_vVelocityU	initializer.h	/^	double* m_vVelocityU;\/\/\/< velocity in x-coordinate$/;"	m	class:Initializer
m_vVelocityU	particle_data.h	/^	double* m_vVelocityU;\/\/\/< velocity in x-coordinate$/;"	m	class:ParticleData
m_vVelocityV	initializer.h	/^	double* m_vVelocityV;\/\/\/< velocity in y-coordinate$/;"	m	class:Initializer
m_vVelocityV	particle_data.h	/^	double* m_vVelocityV;\/\/\/< velocity in y-coordinate$/;"	m	class:ParticleData
m_vVelocityW	initializer.h	/^	double* m_vVelocityW;\/\/\/< velocity in z-coordinate$/;"	m	class:Initializer
m_vVelocityW	particle_data.h	/^	double* m_vVelocityW;\/\/\/< velocity in z-coordinate$/;"	m	class:ParticleData
m_vViewers	time_controller.h	/^	std::vector<ParticleViewer*> m_vViewers; \/\/\/< A vector containing pointers to different types of particle viewers	$/;"	m	class:TimeController
m_vVolume	initializer.h	/^	double* m_vVolume;\/\/\/< volume$/;"	m	class:Initializer
m_vVolume	particle_data.h	/^	double* m_vVolume;\/\/\/< volume$/;"	m	class:ParticleData
m_vVolumeOld	particle_data.h	/^	double* m_vVolumeOld;\/\/\/< volume$/;"	m	class:ParticleData
m_vVolumeVoronoi	particle_data.h	/^	double* m_vVolumeVoronoi;$/;"	m	class:ParticleData
m_vVolume_x	particle_data.h	/^    double* m_vVolume_x;$/;"	m	class:ParticleData
m_vVolume_y	particle_data.h	/^    double* m_vVolume_y;$/;"	m	class:ParticleData
m_vVolume_z	particle_data.h	/^    double* m_vVolume_z;$/;"	m	class:ParticleData
m_vVolumetx	particle_data.h	/^    double *m_vVolumetx;$/;"	m	class:ParticleData
m_vVolumety	particle_data.h	/^    double *m_vVolumety;$/;"	m	class:ParticleData
m_vVtx	particle_data.h	/^    double *m_vVtx;$/;"	m	class:ParticleData
m_vVty	particle_data.h	/^    double *m_vVty;$/;"	m	class:ParticleData
m_vVxl	particle_data.h	/^    double *m_vVxl;$/;"	m	class:ParticleData
m_vVxr	particle_data.h	/^    double *m_vVxr;$/;"	m	class:ParticleData
m_vVyl	particle_data.h	/^    double *m_vVyl;$/;"	m	class:ParticleData
m_vVyr	particle_data.h	/^    double *m_vVyr;$/;"	m	class:ParticleData
m_vb	ls_solver.h	/^	double *m_vb;\/\/\/< The vector b (the right-hand-side)		$/;"	m	class:LSSolver
magnitude	geometry/geometry_jet.h	/^	double magnitude; \/\/\/< magnitude of the surface perturbation$/;"	m	class:Jet2D
magnitude	geometry/geometry_jet.h	/^	double magnitude; \/\/\/< magnitude of the surface perturbation$/;"	m	class:Jet3D
main	lp_main.cpp	/^int main(int argc, const char* argv[]) {	$/;"	f
makezero	particle_data.cpp	/^void ParticleData::makezero(size_t i){$/;"	f	class:ParticleData
mass	octree.h	/^  const double *mass;$/;"	m	class:Octree
mass	voronoi_area_estimator.h	/^	const double* mass;$/;"	m	class:VoronoiAreaEstimator
massNe	initializer.h	/^        double massNe;$/;"	m	class:Initializer
massNe	particle_data.h	/^	double massNe;$/;"	m	class:ParticleData
masse	initializer.h	/^        double masse;$/;"	m	class:Initializer
masse	particle_data.h	/^	double masse;$/;"	m	class:ParticleData
modifyInitContactLength	initializer.cpp	/^void Initializer::modifyInitContactLength() {$/;"	f	class:Initializer
modifyInitNeighbourSearchRadius	initializer.cpp	/^void Initializer::modifyInitNeighbourSearchRadius() {$/;"	f	class:Initializer
modifyInitParticleSpacing	initializer.cpp	/^void Initializer::modifyInitParticleSpacing() {$/;"	f	class:Initializer
modifyLocalParSpacing	initializer.cpp	/^void Initializer::modifyLocalParSpacing() {$/;"	f	class:Initializer
modifyNumParticleWithinSearchRadius	initializer.cpp	/^void Initializer::modifyNumParticleWithinSearchRadius() {$/;"	f	class:Initializer
moveFluidParticle	lp_solver.cpp	/^void HyperbolicLPSolver::moveFluidParticle() {$/;"	f	class:HyperbolicLPSolver
n0_even	hexagonal_packing.h	/^	size_t m0, m1, n0_odd, n1_odd, n0_even, n1_even;	$/;"	m	class:HexagonalPacking2D
n0_even	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
n0_odd	hexagonal_packing.h	/^	size_t m0, m1, n0_odd, n1_odd, n0_even, n1_even;	$/;"	m	class:HexagonalPacking2D
n0_odd	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
n1_even	hexagonal_packing.h	/^	size_t m0, m1, n0_odd, n1_odd, n0_even, n1_even;	$/;"	m	class:HexagonalPacking2D
n1_even	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
n1_odd	hexagonal_packing.h	/^	size_t m0, m1, n0_odd, n1_odd, n0_even, n1_even;	$/;"	m	class:HexagonalPacking2D
n1_odd	hexagonal_packing.h	/^	size_t m0_odd, m1_odd, m0_even, m1_even, n0_odd, n1_odd, n0_even, n1_even;$/;"	m	class:HexagonalPacking3D
nb	boundary/boundary_dambreak.h	/^	double nb; \/\/\/< north boundary$/;"	m	class:DamBreak2DBoundary
nb	boundary/boundary_kelvinhelmholtz.h	/^	double nb; \/\/\/< north boundary$/;"	m	class:KelvinHelmholtz2DBoundary
nb	boundary/boundary_rayleightaylor.h	/^	double nb; \/\/\/< north boundary$/;"	m	class:RayleighTaylor2DBoundary
nb	boundary/boundary_rayleightaylor3d.h	/^        double nb; \/\/\/< north boundary$/;"	m	class:RayleighTaylor3DBoundary
nb	boundary/boundary_rayleightaylor_periodic.h	/^	double nb; \/\/\/< north boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
nb	boundary/boundary_solid_shocktube.h	/^	double nb; \/\/\/< north boundary$/;"	m	class:Shocktube2DSolidBoundary
nb	boundary/boundary_solid_shocktube3d.h	/^        double nb; \/\/\/< north boundary$/;"	m	class:Shocktube3D0005SolidBoundary
nb	boundary/boundary_solid_shocktube3d.h	/^        double nb; \/\/\/< north boundary$/;"	m	class:Shocktube3D0025SolidBoundary
nb	boundary/boundary_solid_shocktube3d.h	/^        double nb; \/\/\/< north boundary$/;"	m	class:Shocktube3DSolidBoundary
nb	boundary/boundary_solid_tpshocktube.h	/^	double nb; \/\/\/< north boundary$/;"	m	class:TPShocktube2DSolidBoundary
nbl	boundary/boundary_kelvinhelmholtz.h	/^	double nbl; \/\/\/< north buffer limit$/;"	m	class:KelvinHelmholtz2DBoundary
nbl	boundary/boundary_rayleightaylor_periodic.h	/^	double nbl; \/\/\/< north buffer limit$/;"	m	class:RayleighTaylorPeriodic2DBoundary
nbo	boundary/boundary_dambreak.h	/^	double nbo; \/\/\/< outer north boundary$/;"	m	class:DamBreak2DBoundary
nbo	boundary/boundary_kelvinhelmholtz.h	/^	double nbo; \/\/\/< outer north boundary$/;"	m	class:KelvinHelmholtz2DBoundary
nbo	boundary/boundary_rayleightaylor.h	/^	double nbo; \/\/\/< outer north boundary$/;"	m	class:RayleighTaylor2DBoundary
nbo	boundary/boundary_rayleightaylor3d.h	/^        double nbo; \/\/\/< outer north boundary$/;"	m	class:RayleighTaylor3DBoundary
nbo	boundary/boundary_rayleightaylor_periodic.h	/^	double nbo; \/\/\/< outer north boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
nbo	boundary/boundary_solid_shocktube.h	/^	double nbo; \/\/\/< outer north boundary$/;"	m	class:Shocktube2DSolidBoundary
nbo	boundary/boundary_solid_shocktube3d.h	/^        double nbo; \/\/\/< outer north boundary$/;"	m	class:Shocktube3D0005SolidBoundary
nbo	boundary/boundary_solid_shocktube3d.h	/^        double nbo; \/\/\/< outer north boundary$/;"	m	class:Shocktube3D0025SolidBoundary
nbo	boundary/boundary_solid_shocktube3d.h	/^        double nbo; \/\/\/< outer north boundary$/;"	m	class:Shocktube3DSolidBoundary
nbo	boundary/boundary_solid_tpshocktube.h	/^	double nbo; \/\/\/< outer north boundary$/;"	m	class:TPShocktube2DSolidBoundary
neinf	initializer.h	/^        double neinf;$/;"	m	class:Initializer
neinf	particle_data.h	/^	double neinf;$/;"	m	class:ParticleData
neon_radiation_data	pellet_solver.cpp	/^double PelletSolver::neon_radiation_data($/;"	f	class:PelletSolver
neon_radiation_power_density	pellet_solver.cpp	/^double PelletSolver::neon_radiation_power_density($/;"	f	class:PelletSolver
nn0_even	hexagonal_packing.h	/^	size_t nn0_odd, nn1_odd, nn0_even, nn1_even;		$/;"	m	class:HexagonalPacking3D
nn0_odd	hexagonal_packing.h	/^	size_t nn0_odd, nn1_odd, nn0_even, nn1_even;		$/;"	m	class:HexagonalPacking3D
nn1_even	hexagonal_packing.h	/^	size_t nn0_odd, nn1_odd, nn0_even, nn1_even;		$/;"	m	class:HexagonalPacking3D
nn1_odd	hexagonal_packing.h	/^	size_t nn0_odd, nn1_odd, nn0_even, nn1_even;		$/;"	m	class:HexagonalPacking3D
number_of_points	voronoi_area_estimator.h	/^	int number_of_points;$/;"	m	class:VoronoiAreaEstimator
onesq2	boundary/boundary_dambreak.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_kelvinhelmholtz.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_rayleightaylor.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_rayleightaylor3d.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_rayleightaylor_periodic.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_solid_shocktube.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_solid_shocktube3d.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
onesq2	boundary/boundary_solid_tpshocktube.cpp	/^static const double onesq2 = 1.0\/std::sqrt(2.0);$/;"	v	file:
operator ()	boundary/boundary_dambreak.cpp	/^int DamBreak2DBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:DamBreak2DBoundary
operator ()	boundary/boundary_kelvinhelmholtz.cpp	/^int KelvinHelmholtz2DBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:KelvinHelmholtz2DBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle2DBNLSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle2DBNLSolidBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle2DSimpleSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle2DSimpleSolidBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle2DSolidBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle3DBNLSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DBNLSolidBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle3DSimpleSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DSimpleSolidBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle3DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DSolidBoundary
operator ()	boundary/boundary_nozzle.cpp	/^int Nozzle3DSolidRightBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DSolidRightBoundary
operator ()	boundary/boundary_nozzle.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DInflowBoundary
operator ()	boundary/boundary_nozzle.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DInflowFixPressureBoundary
operator ()	boundary/boundary_nozzle.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Nozzle3DOutflowBoundary
operator ()	boundary/boundary_nozzle.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:NozzleInflowBoundary
operator ()	boundary/boundary_nozzle.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:NozzleInflowFixPressureBoundary
operator ()	boundary/boundary_nozzle.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:NozzleOutflowBoundary
operator ()	boundary/boundary_pellet.h	/^	virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz, std::vector<double>& xb, std::vector<double>& vb, std::vector<double>& zb, std::vector<double>& pressureb, std::vector<double>& vxb, std::vector<double>& vyb, std::vector<double>& vzb){return 0;};$/;"	f	class:PelletInflowBoundary
operator ()	boundary/boundary_pellet.h	/^        virtual int operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:PelletOutflowBoundary
operator ()	boundary/boundary_powder_target.cpp	/^int PowderTarget2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:PowderTarget2DSolidBoundary
operator ()	boundary/boundary_powder_target_3d.cpp	/^int PowderTarget3DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:PowderTarget3DSolidBoundary
operator ()	boundary/boundary_rayleightaylor.cpp	/^int RayleighTaylor2DBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:RayleighTaylor2DBoundary
operator ()	boundary/boundary_rayleightaylor3d.cpp	/^int RayleighTaylor3DBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:RayleighTaylor3DBoundary
operator ()	boundary/boundary_rayleightaylor_periodic.cpp	/^int RayleighTaylorPeriodic2DBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:RayleighTaylorPeriodic2DBoundary
operator ()	boundary/boundary_solid_gresho.cpp	/^int Gresho2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:Gresho2DSolidBoundary
operator ()	boundary/boundary_solid_gresho.cpp	/^int Sedov2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:Sedov2DSolidBoundary
operator ()	boundary/boundary_solid_gresho.cpp	/^int Yee2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Yee2DSolidBoundary
operator ()	boundary/boundary_solid_gresho.cpp	/^int Yee3DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Yee3DSolidBoundary
operator ()	boundary/boundary_solid_shocktube.cpp	/^int Shocktube2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:Shocktube2DSolidBoundary
operator ()	boundary/boundary_solid_shocktube3d.cpp	/^int Shocktube3D0005SolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Shocktube3D0005SolidBoundary
operator ()	boundary/boundary_solid_shocktube3d.cpp	/^int Shocktube3D0025SolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Shocktube3D0025SolidBoundary
operator ()	boundary/boundary_solid_shocktube3d.cpp	/^int Shocktube3DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,$/;"	f	class:Shocktube3DSolidBoundary
operator ()	boundary/boundary_solid_tpshocktube.cpp	/^int TPShocktube2DSolidBoundary::operator()(double x, double y, double z, double pressure, double vx, double vy, double vz,  $/;"	f	class:TPShocktube2DSolidBoundary
operator ()	geometry/geometry.cpp	/^bool Ball::operator()(double x, double y, double z) const {$/;"	f	class:Ball
operator ()	geometry/geometry.cpp	/^bool Disk::operator()(double x, double y, double z=0) const {$/;"	f	class:Disk
operator ()	geometry/geometry_1d.cpp	/^bool Line::operator()(double x, double y, double z) const {$/;"	f	class:Line
operator ()	geometry/geometry_ballexp.cpp	/^bool Ballexp3D::operator()(double x, double y, double z) const {	$/;"	f	class:Ballexp3D
operator ()	geometry/geometry_collision.cpp	/^bool DiskLeft::operator()(double x, double y, double z=0) const {$/;"	f	class:DiskLeft
operator ()	geometry/geometry_collision.cpp	/^bool DiskRight::operator()(double x, double y, double z=0) const {$/;"	f	class:DiskRight
operator ()	geometry/geometry_gresho.cpp	/^bool Gresho2D::operator()(double x, double y, double z) const {	$/;"	f	class:Gresho2D
operator ()	geometry/geometry_gresho.cpp	/^bool Sedov2D::operator()(double x, double y, double z) const {$/;"	f	class:Sedov2D
operator ()	geometry/geometry_gresho.cpp	/^bool Yee2D::operator()(double x, double y, double z) const {$/;"	f	class:Yee2D
operator ()	geometry/geometry_gresho.cpp	/^bool Yee3D::operator()(double x, double y, double z) const {$/;"	f	class:Yee3D
operator ()	geometry/geometry_jet.cpp	/^bool Jet1D::operator()(double x, double y, double z) const {		$/;"	f	class:Jet1D
operator ()	geometry/geometry_jet.cpp	/^bool Jet1DCenter::operator()(double x, double y, double z) const {$/;"	f	class:Jet1DCenter
operator ()	geometry/geometry_jet.cpp	/^bool Jet1DLeft::operator()(double x, double y, double z) const {$/;"	f	class:Jet1DLeft
operator ()	geometry/geometry_jet.cpp	/^bool Jet1DRight::operator()(double x, double y, double z) const {$/;"	f	class:Jet1DRight
operator ()	geometry/geometry_jet.cpp	/^bool Jet2D::operator()(double x, double y, double z) const {	$/;"	f	class:Jet2D
operator ()	geometry/geometry_jet.cpp	/^bool Jet2DCollision::operator()(double x, double y, double z) const {	$/;"	f	class:Jet2DCollision
operator ()	geometry/geometry_jet.cpp	/^bool Jet2DExpansion::operator()(double x, double y, double z) const {	$/;"	f	class:Jet2DExpansion
operator ()	geometry/geometry_jet.cpp	/^bool Jet2DMerge::operator()(double x, double y, double z) const {	$/;"	f	class:Jet2DMerge
operator ()	geometry/geometry_jet.cpp	/^bool Jet2DMergeLower::operator()(double x, double y, double z) const {	$/;"	f	class:Jet2DMergeLower
operator ()	geometry/geometry_jet.cpp	/^bool Jet2DMergeUpper::operator()(double x, double y, double z) const {	$/;"	f	class:Jet2DMergeUpper
operator ()	geometry/geometry_jet.cpp	/^bool Jet3D::operator()(double x, double y, double z) const {	$/;"	f	class:Jet3D
operator ()	geometry/geometry_jet.cpp	/^bool Jet3DExpansion::operator()(double x, double y, double z) const {	$/;"	f	class:Jet3DExpansion
operator ()	geometry/geometry_nozzle.cpp	/^bool Nozzle2D::operator()(double x, double y, double z) const {$/;"	f	class:Nozzle2D
operator ()	geometry/geometry_nozzle.cpp	/^bool Nozzle2DComplete::operator()(double x, double y, double z) const {$/;"	f	class:Nozzle2DComplete
operator ()	geometry/geometry_nozzle.cpp	/^bool Nozzle2DRothe::operator()(double x, double y, double z) const {$/;"	f	class:Nozzle2DRothe
operator ()	geometry/geometry_nozzle.cpp	/^bool Nozzle2DSimple::operator()(double x, double y, double z) const {$/;"	f	class:Nozzle2DSimple
operator ()	geometry/geometry_nozzle.cpp	/^bool Nozzle3D::operator()(double x, double y, double z) const {$/;"	f	class:Nozzle3D
operator ()	geometry/geometry_nozzle.cpp	/^bool Nozzle3DRothe::operator()(double x, double y, double z) const {$/;"	f	class:Nozzle3DRothe
operator ()	geometry/geometry_pellet.cpp	/^bool MultiPelletLayer::operator()(double x, double y, double z) const{$/;"	f	class:MultiPelletLayer
operator ()	geometry/geometry_pellet.cpp	/^bool PelletLayer::operator()(double x, double y, double z) const{$/;"	f	class:PelletLayer
operator ()	geometry/geometry_powder_target.cpp	/^bool PowderTarget2D::operator()(double x, double y, double z) const {$/;"	f	class:PowderTarget2D
operator ()	geometry/geometry_powder_target_3d.cpp	/^bool PowderTarget3D::operator()(double x, double y, double z) const {$/;"	f	class:PowderTarget3D
operator ()	geometry/geometry_random.cpp	/^bool Gaussian3D::operator()(double x, double y, double z) const {$/;"	f	class:Gaussian3D
operator ()	geometry/geometry_random.cpp	/^bool MultiGaussian3D::operator()(double x, double y, double z) const {$/;"	f	class:MultiGaussian3D
operator ()	geometry/geometry_random.cpp	/^bool Uniform3D::operator()(double x, double y, double z) const {$/;"	f	class:Uniform3D
operator ()	geometry/geometry_shocktube.cpp	/^bool BigShocktube2D::operator()(double x, double y, double z) const {$/;"	f	class:BigShocktube2D
operator ()	geometry/geometry_shocktube.cpp	/^bool BoundaryTest2D::operator()(double x, double y, double z) const {$/;"	f	class:BoundaryTest2D
operator ()	geometry/geometry_shocktube.cpp	/^bool DamBreak2D::operator()(double x, double y, double z) const {$/;"	f	class:DamBreak2D
operator ()	geometry/geometry_shocktube.cpp	/^bool KelvinHelmholtz2D::operator()(double x, double y, double z) const {$/;"	f	class:KelvinHelmholtz2D
operator ()	geometry/geometry_shocktube.cpp	/^bool RayleighTaylor2D::operator()(double x, double y, double z) const {$/;"	f	class:RayleighTaylor2D
operator ()	geometry/geometry_shocktube.cpp	/^bool Shocktube2D::operator()(double x, double y, double z) const {	$/;"	f	class:Shocktube2D
operator ()	geometry/geometry_shocktube.cpp	/^bool Shocktube2DLeft::operator()(double x, double y, double z) const {$/;"	f	class:Shocktube2DLeft
operator ()	geometry/geometry_shocktube.cpp	/^bool Shocktube2DRight::operator()(double x, double y, double z) const {$/;"	f	class:Shocktube2DRight
operator ()	geometry/geometry_shocktube.cpp	/^bool TPShocktube2D::operator()(double x, double y, double z) const {$/;"	f	class:TPShocktube2D
operator ()	geometry/geometry_shocktube3d.cpp	/^bool RayleighTaylor3D::operator()(double x, double y, double z) const {$/;"	f	class:RayleighTaylor3D
operator ()	geometry/geometry_shocktube3d.cpp	/^bool Shocktube3D0005::operator()(double x, double y, double z) const {$/;"	f	class:Shocktube3D0005
operator ()	geometry/geometry_shocktube3d.cpp	/^bool Shocktube3D0025::operator()(double x, double y, double z) const {$/;"	f	class:Shocktube3D0025
operator ()	geometry/geometry_shocktube3d.cpp	/^bool Shocktube3D::operator()(double x, double y, double z) const {$/;"	f	class:Shocktube3D
operator <	octree.h	/^  bool operator < (const KeyIndex& a) const$/;"	f	struct:KeyIndex
operator <	octree.h	/^  bool operator < (const KeyIndex_integral& a) const$/;"	f	struct:KeyIndex_integral
operator <	octree.h	/^  bool operator < (const SearchResult& sr) const {$/;"	f	struct:SearchResult
operator =	octree.h	/^  SearchResult& operator = (const SearchResult& sr) {$/;"	f	struct:SearchResult
outerradius	geometry/geometry_pellet.h	/^	double outerradius;$/;"	m	class:PelletLayer
outerradius	geometry/geometry_pellet.h	/^        double* outerradius;$/;"	m	class:MultiPelletLayer
outputerror	particle_viewer.h	/^	bool outputerror;$/;"	m	class:ParticleViewer
p0	state/state_powder_target.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget2DState
p0	state/state_powder_target_3d.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget3DState
p_deposition	state/state_powder_target.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget2DState
p_deposition	state/state_powder_target_3d.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget3DState
pressure	state/state.cpp	/^double GaussianPressureState::pressure(double x, double y, double z) {$/;"	f	class:GaussianPressureState
pressure	state/state.cpp	/^double UniformVelocityState::pressure(double x, double y, double z) {$/;"	f	class:UniformVelocityState
pressure	state/state_1d.cpp	/^double GaussianPressure1DState::pressure(double x, double y, double z) {$/;"	f	class:GaussianPressure1DState
pressure	state/state_ballexp.cpp	/^double Ballexp3DState::pressure(double x, double y, double z) {$/;"	f	class:Ballexp3DState
pressure	state/state_ballexp.cpp	/^double Ballpressurewave3DState::pressure(double x, double y, double z) {$/;"	f	class:Ballpressurewave3DState
pressure	state/state_ballexp.cpp	/^double Ballrotate3DState::pressure(double x, double y, double z) {$/;"	f	class:Ballrotate3DState
pressure	state/state_collision.cpp	/^double LeftUniformVelocityState::pressure(double x, double y, double z) {$/;"	f	class:LeftUniformVelocityState
pressure	state/state_collision.cpp	/^double RightUniformVelocityState::pressure(double x, double y, double z) {$/;"	f	class:RightUniformVelocityState
pressure	state/state_gresho.cpp	/^double ConvergentShock2DState::pressure(double x, double y, double z) {$/;"	f	class:ConvergentShock2DState
pressure	state/state_gresho.cpp	/^double Gresho2DState::pressure(double x, double y, double z) {$/;"	f	class:Gresho2DState
pressure	state/state_gresho.cpp	/^double Noh2DState::pressure(double x, double y, double z) {$/;"	f	class:Noh2DState
pressure	state/state_gresho.cpp	/^double Sedov2DState::pressure(double x, double y, double z) {$/;"	f	class:Sedov2DState
pressure	state/state_gresho.cpp	/^double Yee2DState::pressure(double x, double y, double z) {$/;"	f	class:Yee2DState
pressure	state/state_jet.cpp	/^double Jet1DCenterState::pressure(double x, double y, double z) {$/;"	f	class:Jet1DCenterState
pressure	state/state_jet.cpp	/^double Jet1DLaterState::pressure(double x, double y, double z) {$/;"	f	class:Jet1DLaterState
pressure	state/state_jet.cpp	/^double Jet1DLeftState::pressure(double x, double y, double z) {$/;"	f	class:Jet1DLeftState
pressure	state/state_jet.cpp	/^double Jet1DRightState::pressure(double x, double y, double z) {$/;"	f	class:Jet1DRightState
pressure	state/state_jet.cpp	/^double Jet1DState::pressure(double x, double y, double z) {$/;"	f	class:Jet1DState
pressure	state/state_jet.cpp	/^double Jet2DCollisionState::pressure(double x, double y, double z) {$/;"	f	class:Jet2DCollisionState
pressure	state/state_jet.cpp	/^double Jet2DExpansionState::pressure(double x, double y, double z) {$/;"	f	class:Jet2DExpansionState
pressure	state/state_jet.cpp	/^double Jet2DMergeLowerState::pressure(double x, double y, double z) {$/;"	f	class:Jet2DMergeLowerState
pressure	state/state_jet.cpp	/^double Jet2DMergeState::pressure(double x, double y, double z) {$/;"	f	class:Jet2DMergeState
pressure	state/state_jet.cpp	/^double Jet2DMergeUpperState::pressure(double x, double y, double z) {$/;"	f	class:Jet2DMergeUpperState
pressure	state/state_jet.cpp	/^double Jet3DExpansionState::pressure(double x, double y, double z) {$/;"	f	class:Jet3DExpansionState
pressure	state/state_jet.cpp	/^double Jet3DState::pressure(double x, double y, double z) {$/;"	f	class:Jet3DState
pressure	state/state_nozzle.cpp	/^double NozzleRotheState::pressure(double x, double y, double z) {$/;"	f	class:NozzleRotheState
pressure	state/state_nozzle.cpp	/^double NozzleState::pressure(double x, double y, double z) {$/;"	f	class:NozzleState
pressure	state/state_pellet.cpp	/^double PelletState::pressure(double x, double y, double z) {$/;"	f	class:PelletState
pressure	state/state_powder_target.cpp	/^double PowderTarget2DState::pressure(double x, double y, double z) {$/;"	f	class:PowderTarget2DState
pressure	state/state_powder_target_3d.cpp	/^double PowderTarget3DState::pressure(double x, double y, double z) { $/;"	f	class:PowderTarget3DState
pressure	state/state_shocktube.cpp	/^double BoundaryTest2DState::pressure(double x, double y, double z) {$/;"	f	class:BoundaryTest2DState
pressure	state/state_shocktube.cpp	/^double DamBreak2DState::pressure(double x, double y, double z) {$/;"	f	class:DamBreak2DState
pressure	state/state_shocktube.cpp	/^double KelvinHelmholtz2DState::pressure(double x, double y, double z) {$/;"	f	class:KelvinHelmholtz2DState
pressure	state/state_shocktube.cpp	/^double NormalShock2DState::pressure(double x, double y, double z) {$/;"	f	class:NormalShock2DState
pressure	state/state_shocktube.cpp	/^double RayleighTaylor2DState::pressure(double x, double y, double z) {$/;"	f	class:RayleighTaylor2DState
pressure	state/state_shocktube.cpp	/^double RayleighTaylor3DState::pressure(double x, double y, double z) {$/;"	f	class:RayleighTaylor3DState
pressure	state/state_shocktube.cpp	/^double Shocktube2DState::pressure(double x, double y, double z) {$/;"	f	class:Shocktube2DState
pressure	state/state_shocktube.cpp	/^double SimpleWave2DState::pressure(double x, double y, double z) {$/;"	f	class:SimpleWave2DState
pressure	state/state_shocktube.cpp	/^double SodShocktube2DLaterState::pressure(double x, double y, double z) {$/;"	f	class:SodShocktube2DLaterState
pressure	state/state_shocktube.cpp	/^double SodShocktube2DState::pressure(double x, double y, double z) {$/;"	f	class:SodShocktube2DState
pressure	state/state_shocktube.cpp	/^double TPShocktube2DState::pressure(double x, double y, double z) {$/;"	f	class:TPShocktube2DState
r0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
r0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
r0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
r0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
r0	boundary/boundary_nozzle.h	/^        double x0,r0;$/;"	m	class:Nozzle3DSolidRightBoundary
r0	geometry/geometry_nozzle.h	/^	double r0;$/;"	m	class:Nozzle2DComplete
r1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
r1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
r1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
r1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
r1	geometry/geometry_nozzle.h	/^	double r1;$/;"	m	class:Nozzle2DComplete
r2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
r2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
r2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
r2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
r2	geometry/geometry_nozzle.h	/^	double r2;$/;"	m	class:Nozzle2DComplete
r3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
r3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
r3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
r3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
r3	geometry/geometry_nozzle.h	/^	double r3;$/;"	m	class:Nozzle2DComplete
r4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
r4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
r4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
r4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
radius	boundary/boundary_nozzle.h	/^	double radius;$/;"	m	class:Nozzle2DSimpleSolidBoundary
radius	boundary/boundary_nozzle.h	/^	double radius;$/;"	m	class:NozzleInflowBoundary
radius	boundary/boundary_nozzle.h	/^        double radius;$/;"	m	class:Nozzle3DInflowBoundary
radius	boundary/boundary_nozzle.h	/^        double radius;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
radius	boundary/boundary_nozzle.h	/^        double radius;$/;"	m	class:Nozzle3DSimpleSolidBoundary
radius	boundary/boundary_nozzle.h	/^        double radius;$/;"	m	class:NozzleInflowFixPressureBoundary
radius	boundary/boundary_solid_gresho.h	/^	double radius;	$/;"	m	class:Gresho2DSolidBoundary
radius	boundary/boundary_solid_gresho.h	/^        double radius;$/;"	m	class:Sedov2DSolidBoundary
radius	boundary/boundary_solid_gresho.h	/^        double radius;$/;"	m	class:Yee2DSolidBoundary
radius	boundary/boundary_solid_gresho.h	/^        double radius;$/;"	m	class:Yee3DSolidBoundary
radius	geometry/geometry.h	/^	double radius; \/\/\/< ball radius$/;"	m	class:Ball
radius	geometry/geometry.h	/^	double radius; \/\/\/< disk radius$/;"	m	class:Disk
radius	geometry/geometry_ballexp.h	/^	double radius;	$/;"	m	class:Ballexp3D
radius	geometry/geometry_collision.h	/^	double radius;$/;"	m	class:DiskLeft
radius	geometry/geometry_collision.h	/^	double radius;$/;"	m	class:DiskRight
radius	geometry/geometry_gresho.h	/^	double radius;$/;"	m	class:Gresho2D
radius	geometry/geometry_gresho.h	/^        double radius;$/;"	m	class:Sedov2D
radius	geometry/geometry_gresho.h	/^        double radius;$/;"	m	class:Yee2D
radius	geometry/geometry_gresho.h	/^        double radius;$/;"	m	class:Yee3D
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet2D
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet2DExpansion
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet2DMerge
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet2DMergeLower
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet2DMergeUpper
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet3D
radius	geometry/geometry_jet.h	/^	double radius;$/;"	m	class:Jet3DExpansion
radius	geometry/geometry_nozzle.h	/^        double radius;$/;"	m	class:Nozzle2D
radius	geometry/geometry_nozzle.h	/^        double radius;$/;"	m	class:Nozzle2DRothe
radius	geometry/geometry_nozzle.h	/^        double radius;$/;"	m	class:Nozzle2DSimple
radius	geometry/geometry_nozzle.h	/^        double radius;$/;"	m	class:Nozzle3D
radius	geometry/geometry_nozzle.h	/^        double radius;$/;"	m	class:Nozzle3DRothe
radius	geometry/geometry_powder_target.h	/^	double radius;$/;"	m	class:PowderTarget2D
radius	geometry/geometry_powder_target_3d.h	/^	double radius;$/;"	m	class:PowderTarget3D
radius	geometry/geometry_random.h	/^        double sigma,radius,xCen,yCen,zCen;$/;"	m	class:Gaussian3D
radius	geometry/geometry_random.h	/^        double sigma,radius;$/;"	m	class:MultiGaussian3D
randomlocation	geometry/geometry.h	/^	virtual void randomlocation(double& x, double& y, double& z){return;};	$/;"	f	class:Geometry
randomlocation	geometry/geometry_gresho.cpp	/^void Yee2D::randomlocation(double& x, double& y, double& z){$/;"	f	class:Yee2D
randomlocation	geometry/geometry_random.cpp	/^void Gaussian3D::randomlocation(double& x, double& y, double& z){$/;"	f	class:Gaussian3D
randomlocation	geometry/geometry_random.cpp	/^void MultiGaussian3D::randomlocation(double& x, double& y, double& z){$/;"	f	class:MultiGaussian3D
randomlocation	geometry/geometry_random.cpp	/^void Uniform3D::randomlocation(double& x, double& y, double& z){$/;"	f	class:Uniform3D
rb	boundary/boundary_dambreak.h	/^	double rb; \/\/\/< right boundary$/;"	m	class:DamBreak2DBoundary
rb	boundary/boundary_kelvinhelmholtz.h	/^	double rb; \/\/\/< right boundary$/;"	m	class:KelvinHelmholtz2DBoundary
rb	boundary/boundary_rayleightaylor.h	/^	double rb; \/\/\/< right boundary$/;"	m	class:RayleighTaylor2DBoundary
rb	boundary/boundary_rayleightaylor3d.h	/^        double rb; \/\/\/< right boundary$/;"	m	class:RayleighTaylor3DBoundary
rb	boundary/boundary_rayleightaylor_periodic.h	/^	double rb; \/\/\/< right boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
rb	boundary/boundary_solid_shocktube.h	/^	double rb; \/\/\/< right boundary$/;"	m	class:Shocktube2DSolidBoundary
rb	boundary/boundary_solid_shocktube3d.h	/^        double rb; \/\/\/< right boundary$/;"	m	class:Shocktube3D0005SolidBoundary
rb	boundary/boundary_solid_shocktube3d.h	/^        double rb; \/\/\/< right boundary$/;"	m	class:Shocktube3D0025SolidBoundary
rb	boundary/boundary_solid_shocktube3d.h	/^        double rb; \/\/\/< right boundary$/;"	m	class:Shocktube3DSolidBoundary
rb	boundary/boundary_solid_tpshocktube.h	/^	double rb; \/\/\/< right boundary$/;"	m	class:TPShocktube2DSolidBoundary
rbl	boundary/boundary_kelvinhelmholtz.h	/^	double rbl; \/\/\/< right buffer limit$/;"	m	class:KelvinHelmholtz2DBoundary
rbl	boundary/boundary_rayleightaylor_periodic.h	/^	double rbl; \/\/\/< right buffer limit$/;"	m	class:RayleighTaylorPeriodic2DBoundary
rbo	boundary/boundary_dambreak.h	/^	double rbo; \/\/\/< outer right boundary$/;"	m	class:DamBreak2DBoundary
rbo	boundary/boundary_kelvinhelmholtz.h	/^	double rbo; \/\/\/< outer right boundary$/;"	m	class:KelvinHelmholtz2DBoundary
rbo	boundary/boundary_rayleightaylor.h	/^	double rbo; \/\/\/< outer right boundary$/;"	m	class:RayleighTaylor2DBoundary
rbo	boundary/boundary_rayleightaylor3d.h	/^        double rbo; \/\/\/< outer right boundary$/;"	m	class:RayleighTaylor3DBoundary
rbo	boundary/boundary_rayleightaylor_periodic.h	/^	double rbo; \/\/\/< outer right boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
rbo	boundary/boundary_solid_shocktube.h	/^	double rbo; \/\/\/< outer right boundary$/;"	m	class:Shocktube2DSolidBoundary
rbo	boundary/boundary_solid_shocktube3d.h	/^        double rbo; \/\/\/< outer right boundary$/;"	m	class:Shocktube3D0005SolidBoundary
rbo	boundary/boundary_solid_shocktube3d.h	/^        double rbo; \/\/\/< outer right boundary$/;"	m	class:Shocktube3D0025SolidBoundary
rbo	boundary/boundary_solid_shocktube3d.h	/^        double rbo; \/\/\/< outer right boundary$/;"	m	class:Shocktube3DSolidBoundary
rbo	boundary/boundary_solid_tpshocktube.h	/^	double rbo; \/\/\/< outer right boundary$/;"	m	class:TPShocktube2DSolidBoundary
readDatafile	initializer.cpp	/^void Initializer::readDatafile(const string& datafileName) {$/;"	f	class:Initializer
readInputfile	initializer.cpp	/^void Initializer::readInputfile(const string& inputfileName) {$/;"	f	class:Initializer
readParamfile	initializer.cpp	/^void Initializer::readParamfile(const string& paramfileName) {$/;"	f	class:Initializer
reflect	boundary/boundary_rayleightaylor3d.cpp	/^void RayleighTaylor3DBoundary::reflect(double x, double y, double z, double pressure, double vx, double vy, double vz, int bx, int by, int bz,$/;"	f	class:RayleighTaylor3DBoundary
reflect	boundary/boundary_solid_shocktube3d.cpp	/^void Shocktube3D0005SolidBoundary::reflect(double x, double y, double z, double pressure, double vx, double vy, double vz, int bx, int by, int bz,$/;"	f	class:Shocktube3D0005SolidBoundary
reflect	boundary/boundary_solid_shocktube3d.cpp	/^void Shocktube3D0025SolidBoundary::reflect(double x, double y, double z, double pressure, double vx, double vy, double vz, int bx, int by, int bz,$/;"	f	class:Shocktube3D0025SolidBoundary
reflect	boundary/boundary_solid_shocktube3d.cpp	/^void Shocktube3DSolidBoundary::reflect(double x, double y, double z, double pressure, double vx, double vy, double vz, int bx, int by, int bz,$/;"	f	class:Shocktube3DSolidBoundary
reflectBack	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectBack(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectFront	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectFront(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectLeft	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectLeft(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectLeft	boundary/boundary_powder_target.cpp	/^void PowderTarget2DSolidBoundary::reflectLeft(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:PowderTarget2DSolidBoundary
reflectLeft	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectLeft(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectLeft	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectLeft(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectLeft	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectLeft(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectLeft	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectLeft(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectLeftBack	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectLeftBack(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectLeftFront	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectLeftFront(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectLeftNorth	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectLeftNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectLeftNorth	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectLeftNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectLeftNorth	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectLeftNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectLeftNorth	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectLeftNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectLeftSouth	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectLeftSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectLeftSouth	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectLeftSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectLeftSouth	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectLeftSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectLeftSouth	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectLeftSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectNorth	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectNorth	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectNorth	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectNorth	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectRight	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectRight(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectRight	boundary/boundary_powder_target.cpp	/^void PowderTarget2DSolidBoundary::reflectRight(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:PowderTarget2DSolidBoundary
reflectRight	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectRight(double x, double y,double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectRight	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectRight(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectRight	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectRight(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectRight	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectRight(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectRightBack	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectRightBack(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectRightFront	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectRightFront(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectRightNorth	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectRightNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectRightNorth	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectRightNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectRightNorth	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectRightNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectRightNorth	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectRightNorth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectRightSouth	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectRightSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectRightSouth	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectRightSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectRightSouth	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectRightSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectRightSouth	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectRightSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
reflectSemiCircle	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectSemiCircle(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectSemiCircleBack	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectSemiCircleBack(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectSemiCircleFront	boundary/boundary_powder_target_3d.cpp	/^void PowderTarget3DSolidBoundary::reflectSemiCircleFront(double x, double y, double z, double pressure, double vx, double vy,  double vz, $/;"	f	class:PowderTarget3DSolidBoundary
reflectSouth	boundary/boundary_dambreak.cpp	/^void DamBreak2DBoundary::reflectSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:DamBreak2DBoundary
reflectSouth	boundary/boundary_rayleightaylor.cpp	/^void RayleighTaylor2DBoundary::reflectSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:RayleighTaylor2DBoundary
reflectSouth	boundary/boundary_solid_shocktube.cpp	/^void Shocktube2DSolidBoundary::reflectSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:Shocktube2DSolidBoundary
reflectSouth	boundary/boundary_solid_tpshocktube.cpp	/^void TPShocktube2DSolidBoundary::reflectSouth(double x, double y, double pressure, double vx, double vy,  $/;"	f	class:TPShocktube2DSolidBoundary
registerBoundary	boundary/boundary.cpp	/^void BoundaryFactory::registerBoundary(std::string name, GeoCreateFunc func) {$/;"	f	class:BoundaryFactory
registerGeometry	geometry/geometry.cpp	/^void GeometryFactory::registerGeometry(std::string name, GeoCreateFunc func) {$/;"	f	class:GeometryFactory
registerState	state/state.cpp	/^void StateFactory::registerState(std::string name, StateCreateFunc func) {$/;"	f	class:StateFactory
reorderNeighbour2D	lp_solver.cpp	/^void reorderNeighbour2D(size_t index, size_t neiListStartIndex, int* neighbourList, int* neighbourListSize, const double* positionX, const double* positionY) {$/;"	f
resetLPFOrder	lp_solver.cpp	/^void HyperbolicLPSolver::resetLPFOrder() {$/;"	f	class:HyperbolicLPSolver
rho_0	state/state_powder_target.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget2DState
rho_0	state/state_powder_target_3d.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget3DState
right	boundary/boundary_nozzle.h	/^	double right;$/;"	m	class:NozzleInflowBoundary
right	boundary/boundary_nozzle.h	/^        double right;$/;"	m	class:Nozzle3DInflowBoundary
right	boundary/boundary_nozzle.h	/^        double right;$/;"	m	class:Nozzle3DInflowFixPressureBoundary
right	boundary/boundary_nozzle.h	/^        double right;$/;"	m	class:NozzleInflowFixPressureBoundary
rightFlush	particle_viewer.cpp	/^string ParticleViewer::rightFlush(size_t writeStep, size_t numDigits) {$/;"	f	class:ParticleViewer
rightLen	geometry/geometry_1d.h	/^	double rightLen; \/\/\/< length on the right of zero$/;"	m	class:Line
rmax	boundary/boundary_nozzle.h	/^        double xmin,xmax,rmax;$/;"	m	class:Nozzle3DOutflowBoundary
sb	boundary/boundary_dambreak.h	/^	double sb; \/\/\/< south boundary$/;"	m	class:DamBreak2DBoundary
sb	boundary/boundary_kelvinhelmholtz.h	/^	double sb; \/\/\/< south boundary$/;"	m	class:KelvinHelmholtz2DBoundary
sb	boundary/boundary_rayleightaylor.h	/^	double sb; \/\/\/< south boundary$/;"	m	class:RayleighTaylor2DBoundary
sb	boundary/boundary_rayleightaylor3d.h	/^        double sb; \/\/\/< south boundary$/;"	m	class:RayleighTaylor3DBoundary
sb	boundary/boundary_rayleightaylor_periodic.h	/^	double sb; \/\/\/< south boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
sb	boundary/boundary_solid_shocktube.h	/^	double sb; \/\/\/< south boundary$/;"	m	class:Shocktube2DSolidBoundary
sb	boundary/boundary_solid_shocktube3d.h	/^        double sb; \/\/\/< south boundary$/;"	m	class:Shocktube3D0005SolidBoundary
sb	boundary/boundary_solid_shocktube3d.h	/^        double sb; \/\/\/< south boundary$/;"	m	class:Shocktube3D0025SolidBoundary
sb	boundary/boundary_solid_shocktube3d.h	/^        double sb; \/\/\/< south boundary$/;"	m	class:Shocktube3DSolidBoundary
sb	boundary/boundary_solid_tpshocktube.h	/^	double sb; \/\/\/< south boundary$/;"	m	class:TPShocktube2DSolidBoundary
sbl	boundary/boundary_kelvinhelmholtz.h	/^	double sbl; \/\/\/< south buffer limit$/;"	m	class:KelvinHelmholtz2DBoundary
sbl	boundary/boundary_rayleightaylor_periodic.h	/^	double sbl; \/\/\/< south buffer limit$/;"	m	class:RayleighTaylorPeriodic2DBoundary
sbo	boundary/boundary_dambreak.h	/^	double sbo; \/\/\/< outer south boundary$/;"	m	class:DamBreak2DBoundary
sbo	boundary/boundary_kelvinhelmholtz.h	/^	double sbo; \/\/\/< outer south boundary$/;"	m	class:KelvinHelmholtz2DBoundary
sbo	boundary/boundary_rayleightaylor.h	/^	double sbo; \/\/\/< outer south boundary$/;"	m	class:RayleighTaylor2DBoundary
sbo	boundary/boundary_rayleightaylor3d.h	/^        double sbo; \/\/\/< outer south boundary$/;"	m	class:RayleighTaylor3DBoundary
sbo	boundary/boundary_rayleightaylor_periodic.h	/^	double sbo; \/\/\/< outer south boundary$/;"	m	class:RayleighTaylorPeriodic2DBoundary
sbo	boundary/boundary_solid_shocktube.h	/^	double sbo; \/\/\/< outer south boundary$/;"	m	class:Shocktube2DSolidBoundary
sbo	boundary/boundary_solid_shocktube3d.h	/^        double sbo; \/\/\/< outer south boundary$/;"	m	class:Shocktube3D0005SolidBoundary
sbo	boundary/boundary_solid_shocktube3d.h	/^        double sbo; \/\/\/< outer south boundary$/;"	m	class:Shocktube3D0025SolidBoundary
sbo	boundary/boundary_solid_shocktube3d.h	/^        double sbo; \/\/\/< outer south boundary$/;"	m	class:Shocktube3DSolidBoundary
sbo	boundary/boundary_solid_tpshocktube.h	/^	double sbo; \/\/\/< outer south boundary$/;"	m	class:TPShocktube2DSolidBoundary
searchNeighbor	octree.cpp	/^int Octree::searchNeighbor(const double search_x, const double search_y, const double search_z, const double radius, SearchResult* result, size_t& result_length) {$/;"	f	class:Octree
searchNeighbor	octree.cpp	/^int Octree::searchNeighbor(const double search_x, const double search_y, const double search_z, const double radius, SearchResult* result, size_t& result_length, int count, double alpha, double beta) {$/;"	f	class:Octree
searchNeighbor	octree.cpp	/^int Octree::searchNeighbor(const double search_x, const double search_y, const double search_z, const double radius, SearchResult* result, size_t& result_length, int count, int dir) {$/;"	f	class:Octree
searchNeighbor	octree.cpp	/^int Octree::searchNeighbor(const double search_x, const double search_y, const double search_z, const double radius, int* result, size_t& result_length) {$/;"	f	class:Octree
searchNeighbour	neighbour_searcher.cpp	/^int OctreeSearcher::searchNeighbour(const double x, const double y, const double z, const double initial_radius, int* result, double* distance, size_t& result_length, int index) {$/;"	f	class:OctreeSearcher
searchNeighbour	neighbour_searcher.cpp	/^int OctreeSearcher::searchNeighbour(const double x, const double y, const double z, const double initial_radius, int* result, double* distance, size_t& result_length, int tid, int index) {$/;"	f	class:OctreeSearcher
searchNeighbourDirection	neighbour_searcher.cpp	/^int OctreeSearcher::searchNeighbourDirection(const double x, const double y, const double z, const double initial_radius, int* result, double* distance, size_t& result_length, int index) {$/;"	f	class:OctreeSearcher
searchNeighbourDirection	neighbour_searcher.cpp	/^int OctreeSearcher::searchNeighbourDirection(const double x, const double y, const double z, const double initial_radius, int* result, double* distance, size_t& result_length, int tid, int index) {$/;"	f	class:OctreeSearcher
searchNeighbourForFluidParticle	lp_solver.cpp	/^void HyperbolicLPSolver::searchNeighbourForFluidParticle() {$/;"	f	class:HyperbolicLPSolver
searchNeighbourForFluidParticle	lp_solver.cpp	/^void HyperbolicLPSolver::searchNeighbourForFluidParticle(int choice) {$/;"	f	class:HyperbolicLPSolver
searchNeighbourQuadrant	neighbour_searcher.cpp	/^int OctreeSearcher::searchNeighbourQuadrant(const double x, const double y, const double z, const double initial_radius, int* result, double* distance, size_t& result_length, int index) {$/;"	f	class:OctreeSearcher
searchNeighbourQuadrant	neighbour_searcher.cpp	/^int OctreeSearcher::searchNeighbourQuadrant(const double x, const double y, const double z, const double initial_radius, int* result, double* distance, size_t& result_length, int tid, int index) {$/;"	f	class:OctreeSearcher
setAuxiliaryOutput	particle_viewer.h	/^	void setAuxiliaryOutput(std::string s){auxiliaryoutput=s;}$/;"	f	class:ParticleViewer
setBoundingBox	initializer.cpp	/^void Initializer::setBoundingBox() {$/;"	f	class:Initializer
setBoundingBox	initializer.cpp	/^void Initializer::setBoundingBox(const int* tag, size_t num) {$/;"	f	class:Initializer
setBoundingBoxStartIndex	initializer.cpp	/^void Initializer::setBoundingBoxStartIndex() {$/;"	f	class:Initializer
setEOS	initializer.cpp	/^void Initializer::setEOS() {$/;"	f	class:Initializer
setExactSolutionName	particle_viewer.h	/^	void setExactSolutionName(std::string s){exactsolution=s;}$/;"	f	class:ParticleViewer
setGhostStartIndex	particle_data.h	/^        void setGhostStartIndex(int total_number) {m_iGhostStartIndex = total_number;}$/;"	f	class:ParticleData
setGhostVelocity	lp_solver.cpp	/^void HyperbolicLPSolver::setGhostVelocity(int phase) {$/;"	f	class:HyperbolicLPSolver
setInAndOutDataPointers	lp_solver.cpp	/^void HyperbolicLPSolver::setInAndOutDataPointers(int phase, int dir,$/;"	f	class:HyperbolicLPSolver
setLPFOrderPointers	lp_solver.cpp	/^void HyperbolicLPSolver::setLPFOrderPointers(int dir, \/\/ input$/;"	f	class:HyperbolicLPSolver
setListInOneDir2D	lp_solver.cpp	/^void setListInOneDir2D(size_t index, size_t maxNeiNumInOneDir,$/;"	f
setListInOneDir2D	lp_solver.cpp	/^void setListInOneDir2D(size_t neiIndex, double a0, double a1, double b0, double b1,$/;"	f
setListInOneDir3D	lp_solver.cpp	/^void setListInOneDir3D(size_t index, size_t maxNeiNumInOneDir,$/;"	f
setListInOneDir3D	lp_solver.cpp	/^void setListInOneDir3D(size_t neiIndex, double a0, double a1, double b0, double b1, double c0, double c1,$/;"	f
setLocalParSpacing	initializer.cpp	/^void Initializer::setLocalParSpacing() {$/;"	f	class:Initializer
setLocalParSpacingTemp	initializer.cpp	/^void Initializer::setLocalParSpacingTemp() {$/;"	f	class:Initializer
setMaxParticleNum	neighbour_searcher.cpp	/^  void OctreeSearcher::setMaxParticleNum(size_t maxParticleNum) {$/;"	f	class:OctreeSearcher
setMaxParticleNum	octree.cpp	/^void Octree::setMaxParticleNum(size_t maxParticleNum) {$/;"	f	class:Octree
setMirrorPressureAndVelocity	lp_solver.cpp	/^void HyperbolicLPSolver::setMirrorPressureAndVelocity(int phase) {$/;"	f	class:HyperbolicLPSolver
setNeighbourListPointers	lp_solver.cpp	/^void HyperbolicLPSolver::setNeighbourListPointers(int dir, \/\/ input$/;"	f	class:HyperbolicLPSolver
setNumber	initializer.h	/^	void setNumber(size_t num) {m_iNumber=num;}$/;"	f	class:BoundingBox
setObjectTag	initializer.cpp	/^void Initializer::setObjectTag() {$/;"	f	class:Initializer
setObjectTag	initializer.h	/^	void setObjectTag(int tag) {m_iObjectTag=tag;}$/;"	f	class:BoundingBox
setObjs	initializer.cpp	/^void Initializer::setObjs() {$/;"	f	class:Initializer
setOutputError	particle_viewer.h	/^	void setOutputError(bool f){outputerror=f;}$/;"	f	class:ParticleViewer
setParams	initializer.cpp	/^void Initializer::setParams() {$/;"	f	class:Initializer
setPelletQuantity	initializer.cpp	/^void Initializer::setPelletQuantity(){$/;"	f	class:Initializer
setStartIndex	initializer.h	/^	void setStartIndex(size_t index) {m_iStartIndex=index;}$/;"	f	class:BoundingBox
setUpwindNeighbourList	lp_solver.cpp	/^void HyperbolicLPSolver::setUpwindNeighbourList() {$/;"	f	class:HyperbolicLPSolver
setXmax	initializer.h	/^	void setXmax(double xmax) {m_fXmax=xmax;}$/;"	f	class:BoundingBox
setXmin	initializer.h	/^	void setXmin(double xmin) {m_fXmin=xmin;}$/;"	f	class:BoundingBox
setYmax	initializer.h	/^	void setYmax(double ymax) {m_fYmax=ymax;}$/;"	f	class:BoundingBox
setYmin	initializer.h	/^	void setYmin(double ymin) {m_fYmin=ymin;}$/;"	f	class:BoundingBox
setZmax	initializer.h	/^	void setZmax(double zmax) {m_fZmax=zmax;}$/;"	f	class:BoundingBox
setZmin	initializer.h	/^	void setZmin(double zmin) {m_fZmin=zmin;}$/;"	f	class:BoundingBox
sigma	geometry/geometry_random.h	/^        double sigma,radius,xCen,yCen,zCen;$/;"	m	class:Gaussian3D
sigma	geometry/geometry_random.h	/^        double sigma,radius;$/;"	m	class:MultiGaussian3D
sigma_x	state/state_powder_target.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget2DState
sigma_x	state/state_powder_target_3d.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget3DState
sigma_y	state/state_powder_target.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget2DState
sigma_y	state/state_powder_target_3d.h	/^	double rho_0, p0, p_deposition, sigma_x, sigma_y;	$/;"	m	class:PowderTarget3DState
solve	lp_solver.cpp	/^int HyperbolicLPSolver::solve(double dt) {	$/;"	f	class:HyperbolicLPSolver
solve	ls_solver.cpp	/^int QRSolver::solve(double* result, double* b) {$/;"	f	class:QRSolver
solve	time_controller.cpp	/^int DefaultTimeController::solve() {$/;"	f	class:DefaultTimeController
solve_laxwendroff	lp_solver.cpp	/^bool HyperbolicLPSolver::solve_laxwendroff() {$/;"	f	class:HyperbolicLPSolver
solve_laxwendroff_fix	lp_solver.cpp	/^bool HyperbolicLPSolver::solve_laxwendroff_fix() {$/;"	f	class:HyperbolicLPSolver
solve_upwind	lp_solver.cpp	/^bool HyperbolicLPSolver::solve_upwind(int phase) {$/;"	f	class:HyperbolicLPSolver
spline_conductivity	eos.cpp	/^static gsl_spline2d *spline_conductivity;$/;"	v	file:
spline_sound_speed	eos.cpp	/^static gsl_spline2d *spline_sound_speed;$/;"	v	file:
spline_temperature	eos.cpp	/^static gsl_spline2d *spline_temperature;$/;"	v	file:
stateTable	state/state.h	/^	std::unordered_map<std::string, StateCreateFunc> stateTable; \/\/\/< hash table for the (name,creatFunction) pair	$/;"	m	class:StateFactory
sublimationenergy	initializer.h	/^        double sublimationenergy;$/;"	m	class:Initializer
sublimationenergy	particle_data.h	/^	double sublimationenergy;$/;"	m	class:ParticleData
swap	particle_data.cpp	/^void ParticleData::swap(size_t i, size_t j){$/;"	f	class:ParticleData
tb	boundary/boundary_rayleightaylor3d.h	/^        double tb; \/\/\/< top boundary$/;"	m	class:RayleighTaylor3DBoundary
tb	boundary/boundary_solid_shocktube3d.h	/^	double tb; \/\/\/< top boundary$/;"	m	class:Shocktube3D0005SolidBoundary
tb	boundary/boundary_solid_shocktube3d.h	/^	double tb; \/\/\/< top boundary$/;"	m	class:Shocktube3D0025SolidBoundary
tb	boundary/boundary_solid_shocktube3d.h	/^	double tb; \/\/\/< top boundary$/;"	m	class:Shocktube3DSolidBoundary
tbo	boundary/boundary_rayleightaylor3d.h	/^        double tbo; \/\/\/< outer top boundary$/;"	m	class:RayleighTaylor3DBoundary
tbo	boundary/boundary_solid_shocktube3d.h	/^	double tbo; \/\/\/< outer top boundary$/;"	m	class:Shocktube3D0005SolidBoundary
tbo	boundary/boundary_solid_shocktube3d.h	/^	double tbo; \/\/\/< outer top boundary$/;"	m	class:Shocktube3D0025SolidBoundary
tbo	boundary/boundary_solid_shocktube3d.h	/^	double tbo; \/\/\/< outer top boundary$/;"	m	class:Shocktube3DSolidBoundary
teinf	initializer.h	/^        double teinf;$/;"	m	class:Initializer
teinf	particle_data.h	/^	double teinf;$/;"	m	class:ParticleData
thickness	boundary/boundary_dambreak.h	/^	double thickness;$/;"	m	class:DamBreak2DBoundary
thickness	boundary/boundary_kelvinhelmholtz.h	/^	double thickness;$/;"	m	class:KelvinHelmholtz2DBoundary
thickness	boundary/boundary_nozzle.h	/^	double thickness;$/;"	m	class:Nozzle2DSimpleSolidBoundary
thickness	boundary/boundary_nozzle.h	/^        double thickness;$/;"	m	class:Nozzle2DBNLSolidBoundary
thickness	boundary/boundary_nozzle.h	/^        double thickness;$/;"	m	class:Nozzle2DSolidBoundary
thickness	boundary/boundary_nozzle.h	/^        double thickness;$/;"	m	class:Nozzle3DBNLSolidBoundary
thickness	boundary/boundary_nozzle.h	/^        double thickness;$/;"	m	class:Nozzle3DSimpleSolidBoundary
thickness	boundary/boundary_nozzle.h	/^        double thickness;$/;"	m	class:Nozzle3DSolidBoundary
thickness	boundary/boundary_nozzle.h	/^        double thickness;$/;"	m	class:Nozzle3DSolidRightBoundary
thickness	boundary/boundary_rayleightaylor.h	/^	double thickness;$/;"	m	class:RayleighTaylor2DBoundary
thickness	boundary/boundary_rayleightaylor3d.h	/^        double thickness;$/;"	m	class:RayleighTaylor3DBoundary
thickness	boundary/boundary_rayleightaylor_periodic.h	/^	double thickness;$/;"	m	class:RayleighTaylorPeriodic2DBoundary
thickness	boundary/boundary_solid_gresho.h	/^	double thickness;$/;"	m	class:Gresho2DSolidBoundary
thickness	boundary/boundary_solid_gresho.h	/^        double thickness;$/;"	m	class:Sedov2DSolidBoundary
thickness	boundary/boundary_solid_gresho.h	/^        double thickness;$/;"	m	class:Yee2DSolidBoundary
thickness	boundary/boundary_solid_gresho.h	/^        double thickness;$/;"	m	class:Yee3DSolidBoundary
thickness	boundary/boundary_solid_shocktube.h	/^	double thickness;$/;"	m	class:Shocktube2DSolidBoundary
thickness	boundary/boundary_solid_shocktube3d.h	/^        double thickness;$/;"	m	class:Shocktube3D0005SolidBoundary
thickness	boundary/boundary_solid_shocktube3d.h	/^        double thickness;$/;"	m	class:Shocktube3D0025SolidBoundary
thickness	boundary/boundary_solid_shocktube3d.h	/^        double thickness;$/;"	m	class:Shocktube3DSolidBoundary
thickness	boundary/boundary_solid_tpshocktube.h	/^	double thickness;$/;"	m	class:TPShocktube2DSolidBoundary
time	state/state_shocktube.h	/^	double time;$/;"	m	class:SodShocktube2DLaterState
timeIntegration	lp_solver.cpp	/^void HyperbolicLPSolver::timeIntegration($/;"	f	class:HyperbolicLPSolver
timeIntegration	lp_solver.cpp	/^void HyperbolicLPSolver::timeIntegration(int index, double Dt, double gravity, double inVolume, double inVelocityU, double inVelocityV, double inVelocityW, double inPressure, double inSoundSpeed,$/;"	f	class:HyperbolicLPSolver
timeIntegration_fix	lp_solver.cpp	/^void HyperbolicLPSolver::timeIntegration_fix(int index, double Dt, double gravity, double inVolume, double inVelocityU, double inVelocityV, double inVelocityW, double inPressure, double inSoundSpeed,$/;"	f	class:HyperbolicLPSolver
uint32_t	neighbour_searcher.h	/^typedef unsigned __int32 uint32_t; $/;"	t
uint32_t	octree.h	/^typedef unsigned __int32 uint32_t; $/;"	t
uint64_t	neighbour_searcher.h	/^typedef unsigned __int64 uint64_t;  $/;"	t
uint64_t	octree.h	/^typedef unsigned __int64 uint64_t;  $/;"	t
updateFluidState	lp_solver.cpp	/^void HyperbolicLPSolver::updateFluidState() {$/;"	f	class:HyperbolicLPSolver
updateFluidVelocity	lp_solver.cpp	/^void HyperbolicLPSolver::updateFluidVelocity() {$/;"	f	class:HyperbolicLPSolver
updateLocalParSpacingByVolume	lp_solver.cpp	/^void HyperbolicLPSolver::updateLocalParSpacingByVolume() {$/;"	f	class:HyperbolicLPSolver
updateStatesByLorentzForce	lp_solver.cpp	/^void HyperbolicLPSolver::updateStatesByLorentzForce() {$/;"	f	class:HyperbolicLPSolver
updateStatesByLorentzForce	pellet_solver.cpp	/^void PelletSolver::updateStatesByLorentzForce( double dt) {$/;"	f	class:PelletSolver
velocity	state/state.cpp	/^void GaussianPressureState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:GaussianPressureState
velocity	state/state.cpp	/^void UniformVelocityState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:UniformVelocityState
velocity	state/state_1d.cpp	/^void GaussianPressure1DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:GaussianPressure1DState
velocity	state/state_ballexp.cpp	/^void Ballexp3DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Ballexp3DState
velocity	state/state_ballexp.cpp	/^void Ballpressurewave3DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Ballpressurewave3DState
velocity	state/state_ballexp.cpp	/^void Ballrotate3DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Ballrotate3DState
velocity	state/state_collision.cpp	/^void LeftUniformVelocityState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:LeftUniformVelocityState
velocity	state/state_collision.cpp	/^void RightUniformVelocityState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:RightUniformVelocityState
velocity	state/state_gresho.cpp	/^void ConvergentShock2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:ConvergentShock2DState
velocity	state/state_gresho.cpp	/^void Gresho2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Gresho2DState
velocity	state/state_gresho.cpp	/^void Noh2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Noh2DState
velocity	state/state_gresho.cpp	/^void Sedov2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Sedov2DState
velocity	state/state_gresho.cpp	/^void Yee2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Yee2DState
velocity	state/state_jet.cpp	/^void Jet1DCenterState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet1DCenterState
velocity	state/state_jet.cpp	/^void Jet1DLaterState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet1DLaterState
velocity	state/state_jet.cpp	/^void Jet1DLeftState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet1DLeftState
velocity	state/state_jet.cpp	/^void Jet1DRightState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet1DRightState
velocity	state/state_jet.cpp	/^void Jet1DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet1DState
velocity	state/state_jet.cpp	/^void Jet2DCollisionState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet2DCollisionState
velocity	state/state_jet.cpp	/^void Jet2DExpansionState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet2DExpansionState
velocity	state/state_jet.cpp	/^void Jet2DMergeLowerState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet2DMergeLowerState
velocity	state/state_jet.cpp	/^void Jet2DMergeState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet2DMergeState
velocity	state/state_jet.cpp	/^void Jet2DMergeUpperState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet2DMergeUpperState
velocity	state/state_jet.cpp	/^void Jet3DExpansionState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet3DExpansionState
velocity	state/state_jet.cpp	/^void Jet3DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Jet3DState
velocity	state/state_nozzle.cpp	/^void NozzleRotheState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:NozzleRotheState
velocity	state/state_nozzle.cpp	/^void NozzleState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:NozzleState
velocity	state/state_pellet.cpp	/^void PelletState::velocity(double x, double y, double z, double& vX, double& vY,double& vZ){$/;"	f	class:PelletState
velocity	state/state_powder_target.cpp	/^void PowderTarget2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:PowderTarget2DState
velocity	state/state_powder_target_3d.cpp	/^void PowderTarget3DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:PowderTarget3DState
velocity	state/state_shocktube.cpp	/^void BoundaryTest2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:BoundaryTest2DState
velocity	state/state_shocktube.cpp	/^void DamBreak2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:DamBreak2DState
velocity	state/state_shocktube.cpp	/^void KelvinHelmholtz2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:KelvinHelmholtz2DState
velocity	state/state_shocktube.cpp	/^void NormalShock2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:NormalShock2DState
velocity	state/state_shocktube.cpp	/^void RayleighTaylor2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:RayleighTaylor2DState
velocity	state/state_shocktube.cpp	/^void RayleighTaylor3DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:RayleighTaylor3DState
velocity	state/state_shocktube.cpp	/^void Shocktube2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:Shocktube2DState
velocity	state/state_shocktube.cpp	/^void SimpleWave2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:SimpleWave2DState
velocity	state/state_shocktube.cpp	/^void SodShocktube2DLaterState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:SodShocktube2DLaterState
velocity	state/state_shocktube.cpp	/^void SodShocktube2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:SodShocktube2DState
velocity	state/state_shocktube.cpp	/^void TPShocktube2DState::velocity(double x, double y, double z, double& vX, double& vY, double& vZ) {$/;"	f	class:TPShocktube2DState
writeResult	particle_viewer.cpp	/^int TXTParticleViewer1D::writeResult(double time, size_t writeStep) {$/;"	f	class:TXTParticleViewer1D
writeResult	particle_viewer.cpp	/^int VTKParticleViewer::writeResult(double time, size_t writeStep) {$/;"	f	class:VTKParticleViewer
x0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
x0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
x0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
x0	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
x0	boundary/boundary_nozzle.h	/^        double x0,r0;$/;"	m	class:Nozzle3DSolidRightBoundary
x0	geometry/geometry_nozzle.h	/^        double x0;$/;"	m	class:Nozzle2DComplete
x1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
x1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
x1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
x1	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
x1	geometry/geometry_nozzle.h	/^	double x1;$/;"	m	class:Nozzle2DComplete
x2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
x2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
x2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
x2	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
x2	geometry/geometry_nozzle.h	/^	double x2;$/;"	m	class:Nozzle2DComplete
x3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
x3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
x3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
x3	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
x3	geometry/geometry_nozzle.h	/^	double x3;$/;"	m	class:Nozzle2DComplete
x4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DBNLSolidBoundary
x4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle2DSolidBoundary
x4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DBNLSolidBoundary
x4	boundary/boundary_nozzle.h	/^        double x0,r0,x1,r1,x2,r2,x3,r3,x4,r4;$/;"	m	class:Nozzle3DSolidBoundary
xCen	geometry/geometry.h	/^	double xCen; \/\/\/< ball center in x-coordinate$/;"	m	class:Ball
xCen	geometry/geometry.h	/^	double xCen; \/\/\/< disk center in x-coordinate$/;"	m	class:Disk
xCen	geometry/geometry_ballexp.h	/^	double xCen;$/;"	m	class:Ballexp3D
xCen	geometry/geometry_collision.h	/^	double xCen;$/;"	m	class:DiskLeft
xCen	geometry/geometry_collision.h	/^	double xCen;$/;"	m	class:DiskRight
xCen	geometry/geometry_gresho.h	/^	double xCen;$/;"	m	class:Gresho2D
xCen	geometry/geometry_gresho.h	/^        double xCen;$/;"	m	class:Sedov2D
xCen	geometry/geometry_gresho.h	/^        double xCen;$/;"	m	class:Yee2D
xCen	geometry/geometry_gresho.h	/^        double xCen;$/;"	m	class:Yee3D
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet1D
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet2D
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet2DExpansion
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet2DMerge
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet2DMergeLower
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet2DMergeUpper
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet3D
xCen	geometry/geometry_jet.h	/^	double xCen;$/;"	m	class:Jet3DExpansion
xCen	geometry/geometry_jet.h	/^        double xCen;$/;"	m	class:Jet1DCenter
xCen	geometry/geometry_jet.h	/^        double xCen;$/;"	m	class:Jet1DLeft
xCen	geometry/geometry_jet.h	/^        double xCen;$/;"	m	class:Jet1DRight
xCen	geometry/geometry_random.h	/^	std::vector<double> xCen,yCen,zCen;$/;"	m	class:MultiGaussian3D
xCen	geometry/geometry_random.h	/^        double sigma,radius,xCen,yCen,zCen;$/;"	m	class:Gaussian3D
xCen	geometry/geometry_random.h	/^    std::vector<double> xCen,yCen,zCen;$/;"	m	class:Uniform3D
xLeftCen	geometry/geometry_jet.h	/^	double xLeftCen;$/;"	m	class:Jet2DCollision
xLength	geometry/geometry_jet.h	/^	double xLength;$/;"	m	class:Jet2DCollision
xRightCen	geometry/geometry_jet.h	/^	double xRightCen;$/;"	m	class:Jet2DCollision
x_coord	voronoi_area_estimator.h	/^	const double* x_coord;$/;"	m	class:VoronoiAreaEstimator
xcen	geometry/geometry_pellet.h	/^	double xcen;$/;"	m	class:PelletLayer
xcen	geometry/geometry_pellet.h	/^        double* xcen;$/;"	m	class:MultiPelletLayer
xcen	state/state_pellet.h	/^	double xcen;$/;"	m	class:PelletState
xmax	boundary/boundary_nozzle.h	/^	double xmin,xmax,ymin,ymax;$/;"	m	class:NozzleOutflowBoundary
xmax	boundary/boundary_nozzle.h	/^        double xmin,xmax,rmax;$/;"	m	class:Nozzle3DOutflowBoundary
xmax	boundary/boundary_pellet.h	/^        double xmin,xmax,ymin,ymax,zmin,zmax;$/;"	m	class:PelletOutflowBoundary
xmax	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, h_r;$/;"	m	class:HexagonalPacking2D
xmax	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
xmin	boundary/boundary_nozzle.h	/^	double xmin,xmax,ymin,ymax;$/;"	m	class:NozzleOutflowBoundary
xmin	boundary/boundary_nozzle.h	/^        double xmin,xmax,rmax;$/;"	m	class:Nozzle3DOutflowBoundary
xmin	boundary/boundary_pellet.h	/^        double xmin,xmax,ymin,ymax,zmin,zmax;$/;"	m	class:PelletOutflowBoundary
xmin	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, h_r;$/;"	m	class:HexagonalPacking2D
xmin	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
yCen	geometry/geometry.h	/^	double yCen; \/\/\/< ball center in y-coordinate$/;"	m	class:Ball
yCen	geometry/geometry.h	/^	double yCen; \/\/\/< disk center in y-coordinate$/;"	m	class:Disk
yCen	geometry/geometry_ballexp.h	/^	double yCen;$/;"	m	class:Ballexp3D
yCen	geometry/geometry_collision.h	/^	double yCen;$/;"	m	class:DiskLeft
yCen	geometry/geometry_collision.h	/^	double yCen;$/;"	m	class:DiskRight
yCen	geometry/geometry_gresho.h	/^	double yCen;$/;"	m	class:Gresho2D
yCen	geometry/geometry_gresho.h	/^        double yCen;$/;"	m	class:Sedov2D
yCen	geometry/geometry_gresho.h	/^        double yCen;$/;"	m	class:Yee2D
yCen	geometry/geometry_gresho.h	/^        double yCen;$/;"	m	class:Yee3D
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet2D
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet2DCollision
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet2DExpansion
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet2DMerge
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet2DMergeLower
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet2DMergeUpper
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet3D
yCen	geometry/geometry_jet.h	/^	double yCen;$/;"	m	class:Jet3DExpansion
yCen	geometry/geometry_random.h	/^	std::vector<double> xCen,yCen,zCen;$/;"	m	class:MultiGaussian3D
yCen	geometry/geometry_random.h	/^        double sigma,radius,xCen,yCen,zCen;$/;"	m	class:Gaussian3D
yCen	geometry/geometry_random.h	/^    std::vector<double> xCen,yCen,zCen;$/;"	m	class:Uniform3D
yLength	geometry/geometry_jet.h	/^	double yLength;$/;"	m	class:Jet2DCollision
y_coord	voronoi_area_estimator.h	/^	const double* y_coord;$/;"	m	class:VoronoiAreaEstimator
ycen	geometry/geometry_pellet.h	/^	double ycen;$/;"	m	class:PelletLayer
ycen	geometry/geometry_pellet.h	/^        double* ycen;$/;"	m	class:MultiPelletLayer
ycen	state/state_pellet.h	/^	double ycen;$/;"	m	class:PelletState
ymax	boundary/boundary_nozzle.h	/^	double xmin,xmax,ymin,ymax;$/;"	m	class:NozzleOutflowBoundary
ymax	boundary/boundary_pellet.h	/^        double xmin,xmax,ymin,ymax,zmin,zmax;$/;"	m	class:PelletOutflowBoundary
ymax	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, h_r;$/;"	m	class:HexagonalPacking2D
ymax	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
ymin	boundary/boundary_nozzle.h	/^	double xmin,xmax,ymin,ymax;$/;"	m	class:NozzleOutflowBoundary
ymin	boundary/boundary_pellet.h	/^        double xmin,xmax,ymin,ymax,zmin,zmax;$/;"	m	class:PelletOutflowBoundary
ymin	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, h_r;$/;"	m	class:HexagonalPacking2D
ymin	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
zCen	geometry/geometry.h	/^	double zCen; \/\/\/< ball center in z-coordinate$/;"	m	class:Ball
zCen	geometry/geometry_ballexp.h	/^	double zCen;$/;"	m	class:Ballexp3D
zCen	geometry/geometry_jet.h	/^	double zCen;$/;"	m	class:Jet3D
zCen	geometry/geometry_jet.h	/^	double zCen;$/;"	m	class:Jet3DExpansion
zCen	geometry/geometry_random.h	/^	std::vector<double> xCen,yCen,zCen;$/;"	m	class:MultiGaussian3D
zCen	geometry/geometry_random.h	/^        double sigma,radius,xCen,yCen,zCen;$/;"	m	class:Gaussian3D
zCen	geometry/geometry_random.h	/^    std::vector<double> xCen,yCen,zCen;$/;"	m	class:Uniform3D
z_coord	voronoi_area_estimator.h	/^	const double* z_coord;$/;"	m	class:VoronoiAreaEstimator
zcen	geometry/geometry_pellet.h	/^	double zcen;$/;"	m	class:PelletLayer
zcen	geometry/geometry_pellet.h	/^        double* zcen;$/;"	m	class:MultiPelletLayer
zcen	state/state_pellet.h	/^	double zcen;$/;"	m	class:PelletState
zlength	boundary/boundary_solid_gresho.h	/^	double zlength;$/;"	m	class:Yee3DSolidBoundary
zlength	geometry/geometry_gresho.h	/^	double zlength;$/;"	m	class:Yee3D
zmax	boundary/boundary_pellet.h	/^        double xmin,xmax,ymin,ymax,zmin,zmax;$/;"	m	class:PelletOutflowBoundary
zmax	boundary/boundary_solid_gresho.h	/^	double zmino,zmaxo,zmin,zmax;$/;"	m	class:Yee3DSolidBoundary
zmax	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
zmaxo	boundary/boundary_solid_gresho.h	/^	double zmino,zmaxo,zmin,zmax;$/;"	m	class:Yee3DSolidBoundary
zmin	boundary/boundary_pellet.h	/^        double xmin,xmax,ymin,ymax,zmin,zmax;$/;"	m	class:PelletOutflowBoundary
zmin	boundary/boundary_solid_gresho.h	/^	double zmino,zmaxo,zmin,zmax;$/;"	m	class:Yee3DSolidBoundary
zmin	hexagonal_packing.h	/^	double xmin, xmax, ymin, ymax, zmin, zmax, h_r;$/;"	m	class:HexagonalPacking3D
zmino	boundary/boundary_solid_gresho.h	/^	double zmino,zmaxo,zmin,zmax;$/;"	m	class:Yee3DSolidBoundary
~Ball	geometry/geometry.h	/^	virtual ~Ball() {}$/;"	f	class:Ball
~Ballexp3D	geometry/geometry_ballexp.h	/^	virtual ~Ballexp3D() {}$/;"	f	class:Ballexp3D
~Ballexp3DState	state/state_ballexp.h	/^	virtual ~Ballexp3DState() {};$/;"	f	class:Ballexp3DState
~Ballpressurewave3DState	state/state_ballexp.h	/^        virtual ~Ballpressurewave3DState() {};$/;"	f	class:Ballpressurewave3DState
~Ballrotate3DState	state/state_ballexp.h	/^        virtual ~Ballrotate3DState() {};$/;"	f	class:Ballrotate3DState
~BigShocktube2D	geometry/geometry_shocktube.h	/^        virtual ~BigShocktube2D() {}$/;"	f	class:BigShocktube2D
~Boundary	boundary/boundary.h	/^	virtual ~Boundary() {}$/;"	f	class:Boundary
~BoundaryTest2D	geometry/geometry_shocktube.h	/^        virtual ~BoundaryTest2D() {}$/;"	f	class:BoundaryTest2D
~BoundaryTest2DState	state/state_shocktube.h	/^        virtual ~BoundaryTest2DState() {};$/;"	f	class:BoundaryTest2DState
~ConvergentShock2DState	state/state_gresho.h	/^	virtual ~ConvergentShock2DState() {};$/;"	f	class:ConvergentShock2DState
~DamBreak2D	geometry/geometry_shocktube.h	/^        virtual ~DamBreak2D() {}$/;"	f	class:DamBreak2D
~DamBreak2DBoundary	boundary/boundary_dambreak.h	/^	virtual ~DamBreak2DBoundary() {}$/;"	f	class:DamBreak2DBoundary
~DamBreak2DState	state/state_shocktube.h	/^        virtual ~DamBreak2DState() {};$/;"	f	class:DamBreak2DState
~Disk	geometry/geometry.h	/^	virtual ~Disk() {}$/;"	f	class:Disk
~DiskLeft	geometry/geometry_collision.h	/^	virtual ~DiskLeft() {}$/;"	f	class:DiskLeft
~DiskRight	geometry/geometry_collision.h	/^	virtual ~DiskRight() {}$/;"	f	class:DiskRight
~EOS	eos.h	/^	virtual ~EOS() {};$/;"	f	class:EOS
~Gaussian3D	geometry/geometry_random.h	/^        virtual ~Gaussian3D(){}$/;"	f	class:Gaussian3D
~GaussianPressure1DState	state/state_1d.h	/^	virtual ~GaussianPressure1DState() {};$/;"	f	class:GaussianPressure1DState
~GaussianPressureState	state/state.h	/^	virtual ~GaussianPressureState() {};$/;"	f	class:GaussianPressureState
~Geometry	geometry/geometry.h	/^	virtual ~Geometry() {}$/;"	f	class:Geometry
~Gresho2D	geometry/geometry_gresho.h	/^	virtual ~Gresho2D() {}$/;"	f	class:Gresho2D
~Gresho2DSolidBoundary	boundary/boundary_solid_gresho.h	/^	virtual ~Gresho2DSolidBoundary() {}$/;"	f	class:Gresho2DSolidBoundary
~Gresho2DState	state/state_gresho.h	/^	virtual ~Gresho2DState() {};$/;"	f	class:Gresho2DState
~HyperbolicLPSolver	lp_solver.cpp	/^HyperbolicLPSolver::~HyperbolicLPSolver() {$/;"	f	class:HyperbolicLPSolver
~Initializer	initializer.cpp	/^Initializer::~Initializer() {$/;"	f	class:Initializer
~Jet1D	geometry/geometry_jet.h	/^	virtual ~Jet1D() {}$/;"	f	class:Jet1D
~Jet1DCenter	geometry/geometry_jet.h	/^        virtual ~Jet1DCenter() {}$/;"	f	class:Jet1DCenter
~Jet1DCenterState	state/state_jet.h	/^        virtual ~Jet1DCenterState() {};$/;"	f	class:Jet1DCenterState
~Jet1DLaterState	state/state_jet.h	/^        virtual ~Jet1DLaterState() {};$/;"	f	class:Jet1DLaterState
~Jet1DLeft	geometry/geometry_jet.h	/^        virtual ~Jet1DLeft() {}$/;"	f	class:Jet1DLeft
~Jet1DLeftState	state/state_jet.h	/^        virtual ~Jet1DLeftState() {};$/;"	f	class:Jet1DLeftState
~Jet1DRight	geometry/geometry_jet.h	/^        virtual ~Jet1DRight() {}$/;"	f	class:Jet1DRight
~Jet1DRightState	state/state_jet.h	/^        virtual ~Jet1DRightState() {};$/;"	f	class:Jet1DRightState
~Jet1DState	state/state_jet.h	/^	virtual ~Jet1DState() {};$/;"	f	class:Jet1DState
~Jet2D	geometry/geometry_jet.h	/^	virtual ~Jet2D() {}$/;"	f	class:Jet2D
~Jet2DCollision	geometry/geometry_jet.h	/^	virtual ~Jet2DCollision() {}$/;"	f	class:Jet2DCollision
~Jet2DCollisionState	state/state_jet.h	/^	virtual ~Jet2DCollisionState() {};$/;"	f	class:Jet2DCollisionState
~Jet2DExpansion	geometry/geometry_jet.h	/^	virtual ~Jet2DExpansion() {}$/;"	f	class:Jet2DExpansion
~Jet2DExpansionState	state/state_jet.h	/^	virtual ~Jet2DExpansionState() {};$/;"	f	class:Jet2DExpansionState
~Jet2DMerge	geometry/geometry_jet.h	/^	virtual ~Jet2DMerge() {}$/;"	f	class:Jet2DMerge
~Jet2DMergeLower	geometry/geometry_jet.h	/^	virtual ~Jet2DMergeLower() {}$/;"	f	class:Jet2DMergeLower
~Jet2DMergeLowerState	state/state_jet.h	/^	virtual ~Jet2DMergeLowerState() {};$/;"	f	class:Jet2DMergeLowerState
~Jet2DMergeState	state/state_jet.h	/^	virtual ~Jet2DMergeState() {};$/;"	f	class:Jet2DMergeState
~Jet2DMergeUpper	geometry/geometry_jet.h	/^	virtual ~Jet2DMergeUpper() {}$/;"	f	class:Jet2DMergeUpper
~Jet2DMergeUpperState	state/state_jet.h	/^	virtual ~Jet2DMergeUpperState() {};$/;"	f	class:Jet2DMergeUpperState
~Jet3D	geometry/geometry_jet.h	/^	virtual ~Jet3D() {}$/;"	f	class:Jet3D
~Jet3DExpansion	geometry/geometry_jet.h	/^	virtual ~Jet3DExpansion() {}$/;"	f	class:Jet3DExpansion
~Jet3DExpansionState	state/state_jet.h	/^	virtual ~Jet3DExpansionState() {};$/;"	f	class:Jet3DExpansionState
~Jet3DState	state/state_jet.h	/^	virtual ~Jet3DState() {};$/;"	f	class:Jet3DState
~KelvinHelmholtz2D	geometry/geometry_shocktube.h	/^        virtual ~KelvinHelmholtz2D() {}$/;"	f	class:KelvinHelmholtz2D
~KelvinHelmholtz2DBoundary	boundary/boundary_kelvinhelmholtz.h	/^	virtual ~KelvinHelmholtz2DBoundary() {}$/;"	f	class:KelvinHelmholtz2DBoundary
~KelvinHelmholtz2DState	state/state_shocktube.h	/^        virtual ~KelvinHelmholtz2DState() {};$/;"	f	class:KelvinHelmholtz2DState
~LPSolver	lp_solver.h	/^	virtual ~LPSolver() {}$/;"	f	class:LPSolver
~LSSolver	ls_solver.h	/^	virtual ~LSSolver() {}$/;"	f	class:LSSolver
~LeftUniformVelocityState	state/state_collision.h	/^	virtual ~LeftUniformVelocityState() {};$/;"	f	class:LeftUniformVelocityState
~Line	geometry/geometry_1d.h	/^	virtual ~Line() {}$/;"	f	class:Line
~MultiGaussian3D	geometry/geometry_random.h	/^        virtual ~MultiGaussian3D(){}$/;"	f	class:MultiGaussian3D
~MultiPelletLayer	geometry/geometry_pellet.cpp	/^MultiPelletLayer::~MultiPelletLayer(){$/;"	f	class:MultiPelletLayer
~NeighbourSearcher	neighbour_searcher.h	/^	virtual ~NeighbourSearcher() {} $/;"	f	class:NeighbourSearcher
~Noh2DState	state/state_gresho.h	/^        virtual ~Noh2DState() {};$/;"	f	class:Noh2DState
~NormalShock2DState	state/state_shocktube.h	/^	virtual ~NormalShock2DState() {};$/;"	f	class:NormalShock2DState
~Nozzle2D	geometry/geometry_nozzle.h	/^        virtual ~Nozzle2D() {}$/;"	f	class:Nozzle2D
~Nozzle2DBNLSolidBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle2DBNLSolidBoundary() {};$/;"	f	class:Nozzle2DBNLSolidBoundary
~Nozzle2DComplete	geometry/geometry_nozzle.h	/^        virtual ~Nozzle2DComplete() {}$/;"	f	class:Nozzle2DComplete
~Nozzle2DRothe	geometry/geometry_nozzle.h	/^        virtual ~Nozzle2DRothe() {}$/;"	f	class:Nozzle2DRothe
~Nozzle2DSimple	geometry/geometry_nozzle.h	/^        virtual ~Nozzle2DSimple() {}$/;"	f	class:Nozzle2DSimple
~Nozzle2DSimpleSolidBoundary	boundary/boundary_nozzle.h	/^	virtual ~Nozzle2DSimpleSolidBoundary() {};$/;"	f	class:Nozzle2DSimpleSolidBoundary
~Nozzle2DSolidBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle2DSolidBoundary() {};$/;"	f	class:Nozzle2DSolidBoundary
~Nozzle3D	geometry/geometry_nozzle.h	/^        virtual ~Nozzle3D() {}$/;"	f	class:Nozzle3D
~Nozzle3DBNLSolidBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DBNLSolidBoundary() {};$/;"	f	class:Nozzle3DBNLSolidBoundary
~Nozzle3DInflowBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DInflowBoundary() {};$/;"	f	class:Nozzle3DInflowBoundary
~Nozzle3DInflowFixPressureBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DInflowFixPressureBoundary() {};$/;"	f	class:Nozzle3DInflowFixPressureBoundary
~Nozzle3DOutflowBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DOutflowBoundary() {};$/;"	f	class:Nozzle3DOutflowBoundary
~Nozzle3DRothe	geometry/geometry_nozzle.h	/^        virtual ~Nozzle3DRothe() {}$/;"	f	class:Nozzle3DRothe
~Nozzle3DSimpleSolidBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DSimpleSolidBoundary() {};$/;"	f	class:Nozzle3DSimpleSolidBoundary
~Nozzle3DSolidBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DSolidBoundary() {};$/;"	f	class:Nozzle3DSolidBoundary
~Nozzle3DSolidRightBoundary	boundary/boundary_nozzle.h	/^        virtual ~Nozzle3DSolidRightBoundary() {};$/;"	f	class:Nozzle3DSolidRightBoundary
~NozzleInflowBoundary	boundary/boundary_nozzle.h	/^	virtual ~NozzleInflowBoundary() {};$/;"	f	class:NozzleInflowBoundary
~NozzleInflowFixPressureBoundary	boundary/boundary_nozzle.h	/^        virtual ~NozzleInflowFixPressureBoundary() {};$/;"	f	class:NozzleInflowFixPressureBoundary
~NozzleOutflowBoundary	boundary/boundary_nozzle.h	/^        virtual ~NozzleOutflowBoundary() {};$/;"	f	class:NozzleOutflowBoundary
~NozzleRotheState	state/state_nozzle.h	/^        virtual ~NozzleRotheState() {};$/;"	f	class:NozzleRotheState
~NozzleState	state/state_nozzle.h	/^        virtual ~NozzleState() {};$/;"	f	class:NozzleState
~Octree	octree.cpp	/^Octree::~Octree() {$/;"	f	class:Octree
~OctreeSearcher	neighbour_searcher.h	/^	virtual ~OctreeSearcher() {$/;"	f	class:OctreeSearcher
~ParticleData	particle_data.cpp	/^ParticleData::~ParticleData() {$/;"	f	class:ParticleData
~ParticleViewer	particle_viewer.h	/^	virtual ~ParticleViewer() {}$/;"	f	class:ParticleViewer
~PelletInflowBoundary	boundary/boundary_pellet.h	/^	virtual ~PelletInflowBoundary() {};$/;"	f	class:PelletInflowBoundary
~PelletLayer	geometry/geometry_pellet.h	/^	virtual ~PelletLayer() {}$/;"	f	class:PelletLayer
~PelletOutflowBoundary	boundary/boundary_pellet.h	/^        virtual ~PelletOutflowBoundary() {};$/;"	f	class:PelletOutflowBoundary
~PelletSolver	pellet_solver.h	/^        ~PelletSolver(){};$/;"	f	class:PelletSolver
~PelletState	state/state_pellet.h	/^	virtual ~PelletState(){};$/;"	f	class:PelletState
~PolytropicGasEOS	eos.h	/^	virtual ~PolytropicGasEOS() {}	$/;"	f	class:PolytropicGasEOS
~PowderTarget2D	geometry/geometry_powder_target.h	/^	virtual ~PowderTarget2D() {}$/;"	f	class:PowderTarget2D
~PowderTarget2DSolidBoundary	boundary/boundary_powder_target.h	/^	virtual ~PowderTarget2DSolidBoundary() {}$/;"	f	class:PowderTarget2DSolidBoundary
~PowderTarget2DState	state/state_powder_target.h	/^	virtual ~PowderTarget2DState() {};$/;"	f	class:PowderTarget2DState
~PowderTarget3D	geometry/geometry_powder_target_3d.h	/^	virtual ~PowderTarget3D() {}$/;"	f	class:PowderTarget3D
~PowderTarget3DSolidBoundary	boundary/boundary_powder_target_3d.h	/^	virtual ~PowderTarget3DSolidBoundary() {}$/;"	f	class:PowderTarget3DSolidBoundary
~PowderTarget3DState	state/state_powder_target_3d.h	/^	virtual ~PowderTarget3DState() {};$/;"	f	class:PowderTarget3DState
~RayleighTaylor2D	geometry/geometry_shocktube.h	/^        virtual ~RayleighTaylor2D() {}$/;"	f	class:RayleighTaylor2D
~RayleighTaylor2DBoundary	boundary/boundary_rayleightaylor.h	/^	virtual ~RayleighTaylor2DBoundary() {}$/;"	f	class:RayleighTaylor2DBoundary
~RayleighTaylor2DState	state/state_shocktube.h	/^        virtual ~RayleighTaylor2DState() {};$/;"	f	class:RayleighTaylor2DState
~RayleighTaylor3D	geometry/geometry_shocktube3d.h	/^        virtual ~RayleighTaylor3D() {}$/;"	f	class:RayleighTaylor3D
~RayleighTaylor3DBoundary	boundary/boundary_rayleightaylor3d.h	/^        virtual ~RayleighTaylor3DBoundary() {}$/;"	f	class:RayleighTaylor3DBoundary
~RayleighTaylor3DState	state/state_shocktube.h	/^        virtual ~RayleighTaylor3DState() {};$/;"	f	class:RayleighTaylor3DState
~RayleighTaylorPeriodic2DBoundary	boundary/boundary_rayleightaylor_periodic.h	/^	virtual ~RayleighTaylorPeriodic2DBoundary() {}$/;"	f	class:RayleighTaylorPeriodic2DBoundary
~RightUniformVelocityState	state/state_collision.h	/^	virtual ~RightUniformVelocityState() {};$/;"	f	class:RightUniformVelocityState
~SahaEOS	eos.h	/^	virtual ~SahaEOS() {}	$/;"	f	class:SahaEOS
~Sedov2D	geometry/geometry_gresho.h	/^        virtual ~Sedov2D() {}$/;"	f	class:Sedov2D
~Sedov2DSolidBoundary	boundary/boundary_solid_gresho.h	/^        virtual ~Sedov2DSolidBoundary() {}$/;"	f	class:Sedov2DSolidBoundary
~Sedov2DState	state/state_gresho.h	/^        virtual ~Sedov2DState() {};$/;"	f	class:Sedov2DState
~Shocktube2D	geometry/geometry_shocktube.h	/^	virtual ~Shocktube2D() {}$/;"	f	class:Shocktube2D
~Shocktube2DLeft	geometry/geometry_shocktube.h	/^        virtual ~Shocktube2DLeft() {}$/;"	f	class:Shocktube2DLeft
~Shocktube2DRight	geometry/geometry_shocktube.h	/^        virtual ~Shocktube2DRight() {}$/;"	f	class:Shocktube2DRight
~Shocktube2DSolidBoundary	boundary/boundary_solid_shocktube.h	/^	virtual ~Shocktube2DSolidBoundary() {}$/;"	f	class:Shocktube2DSolidBoundary
~Shocktube2DState	state/state_shocktube.h	/^	virtual ~Shocktube2DState() {};$/;"	f	class:Shocktube2DState
~Shocktube3D	geometry/geometry_shocktube3d.h	/^        virtual ~Shocktube3D() {}$/;"	f	class:Shocktube3D
~Shocktube3D0005	geometry/geometry_shocktube3d.h	/^        virtual ~Shocktube3D0005() {}$/;"	f	class:Shocktube3D0005
~Shocktube3D0005SolidBoundary	boundary/boundary_solid_shocktube3d.h	/^        virtual ~Shocktube3D0005SolidBoundary() {}$/;"	f	class:Shocktube3D0005SolidBoundary
~Shocktube3D0025	geometry/geometry_shocktube3d.h	/^        virtual ~Shocktube3D0025() {}$/;"	f	class:Shocktube3D0025
~Shocktube3D0025SolidBoundary	boundary/boundary_solid_shocktube3d.h	/^        virtual ~Shocktube3D0025SolidBoundary() {}$/;"	f	class:Shocktube3D0025SolidBoundary
~Shocktube3DSolidBoundary	boundary/boundary_solid_shocktube3d.h	/^        virtual ~Shocktube3DSolidBoundary() {}$/;"	f	class:Shocktube3DSolidBoundary
~SimpleWave2DState	state/state_shocktube.h	/^        virtual ~SimpleWave2DState() {};$/;"	f	class:SimpleWave2DState
~SodShocktube2DLaterState	state/state_shocktube.h	/^        virtual ~SodShocktube2DLaterState() {};$/;"	f	class:SodShocktube2DLaterState
~SodShocktube2DState	state/state_shocktube.h	/^        virtual ~SodShocktube2DState() {};$/;"	f	class:SodShocktube2DState
~State	state/state.h	/^	virtual ~State() {};$/;"	f	class:State
~StiffPolytropicGasEOS	eos.h	/^	virtual ~StiffPolytropicGasEOS() {}$/;"	f	class:StiffPolytropicGasEOS
~TPShocktube2D	geometry/geometry_shocktube.h	/^	virtual ~TPShocktube2D() {}$/;"	f	class:TPShocktube2D
~TPShocktube2DSolidBoundary	boundary/boundary_solid_tpshocktube.h	/^	virtual ~TPShocktube2DSolidBoundary() {}$/;"	f	class:TPShocktube2DSolidBoundary
~TPShocktube2DState	state/state_shocktube.h	/^	virtual ~TPShocktube2DState() {};$/;"	f	class:TPShocktube2DState
~TXTParticleViewer1D	particle_viewer.h	/^	virtual ~TXTParticleViewer1D() {}$/;"	f	class:TXTParticleViewer1D
~TimeController	time_controller.h	/^	virtual ~TimeController() {}$/;"	f	class:TimeController
~Uniform3D	geometry/geometry_random.h	/^	virtual ~Uniform3D(){}$/;"	f	class:Uniform3D
~UniformVelocityState	state/state.h	/^	virtual ~UniformVelocityState() {};$/;"	f	class:UniformVelocityState
~VTKParticleViewer	particle_viewer.h	/^	virtual ~VTKParticleViewer() {}$/;"	f	class:VTKParticleViewer
~VoronoiAreaEstimator	voronoi_area_estimator.h	/^	virtual ~VoronoiAreaEstimator() {};$/;"	f	class:VoronoiAreaEstimator
~Yee2D	geometry/geometry_gresho.h	/^        virtual ~Yee2D() {}$/;"	f	class:Yee2D
~Yee2DSolidBoundary	boundary/boundary_solid_gresho.h	/^        virtual ~Yee2DSolidBoundary() {}$/;"	f	class:Yee2DSolidBoundary
~Yee2DState	state/state_gresho.h	/^        virtual ~Yee2DState() {};$/;"	f	class:Yee2DState
~Yee3D	geometry/geometry_gresho.h	/^        virtual ~Yee3D() {}$/;"	f	class:Yee3D
~Yee3DSolidBoundary	boundary/boundary_solid_gresho.h	/^        virtual ~Yee3DSolidBoundary() {}$/;"	f	class:Yee3DSolidBoundary
